diff --git a/CASES/EMS_cases.py b/CASES/EMS_cases.py
index a0c0967..48d44ed 100644
--- a/CASES/EMS_cases.py
+++ b/CASES/EMS_cases.py
@@ -221,18 +221,18 @@ cases.append(case)
 subcases[case] = []
 data_input[case] = {}
 for SST in [28,]:
-  subcases[case] = subcases[case] + ['KUANG_SST{0}_DEPHY'.format(SST),]
-  data_input[case]['KUANG_SST{0}_DEPHY'.format(SST)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_DEPHY.nc'.format(SST)
-
-  subcases[case] = subcases[case] + ['KUANG_SST{0}_TP05_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]
-  subcases[case] = subcases[case] + ['KUANG_SST{0}_TM05_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]
-  subcases[case] = subcases[case] + ['KUANG_SST{0}_QP02_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]
-  subcases[case] = subcases[case] + ['KUANG_SST{0}_QM02_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]  
-  for lev in range(90,39,-1):
-      data_input[case]['KUANG_SST{0}_TP05_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_TP05_l{1:0>2}_DEPHY.nc'.format(SST,lev)
-      data_input[case]['KUANG_SST{0}_TM05_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_TM05_l{1:0>2}_DEPHY.nc'.format(SST,lev)
-      data_input[case]['KUANG_SST{0}_QP02_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_QP02_l{1:0>2}_DEPHY.nc'.format(SST,lev)
-      data_input[case]['KUANG_SST{0}_QM02_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_QM02_l{1:0>2}_DEPHY.nc'.format(SST,lev)
+    subcases[case] = subcases[case] + ['KUANG_SST{0}_DEPHY'.format(SST),]
+    data_input[case]['KUANG_SST{0}_DEPHY'.format(SST)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_DEPHY.nc'.format(SST)
+
+    subcases[case] = subcases[case] + ['KUANG_SST{0}_TP05_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]
+    subcases[case] = subcases[case] + ['KUANG_SST{0}_TM05_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]
+    subcases[case] = subcases[case] + ['KUANG_SST{0}_QP02_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]
+    subcases[case] = subcases[case] + ['KUANG_SST{0}_QM02_l{1:0>2}_DEPHY'.format(SST,lev) for lev in range(90,39,-1)]  
+    for lev in range(90,39,-1):
+        data_input[case]['KUANG_SST{0}_TP05_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_TP05_l{1:0>2}_DEPHY.nc'.format(SST,lev)
+        data_input[case]['KUANG_SST{0}_TM05_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_TM05_l{1:0>2}_DEPHY.nc'.format(SST,lev)
+        data_input[case]['KUANG_SST{0}_QP02_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_QP02_l{1:0>2}_DEPHY.nc'.format(SST,lev)
+        data_input[case]['KUANG_SST{0}_QM02_l{1:0>2}_DEPHY'.format(SST,lev)] = rep0 + '/RCE/KUANG/KUANG_SST{0}_QM02_l{1:0>2}_DEPHY.nc'.format(SST,lev)
 
 ####################################
 
diff --git a/CASES/RICO/RICO_SHORT_SCM_driver.nc b/CASES/RICO/RICO_SHORT_SCM_driver.nc
new file mode 100644
index 0000000..7b34af1
Binary files /dev/null and b/CASES/RICO/RICO_SHORT_SCM_driver.nc differ
diff --git a/Examples/config/config_41t1_AROME_OPER.py b/Examples/config/config_41t1_AROME_OPER.py
index 7e67d66..af837f3 100644
--- a/Examples/config/config_41t1_AROME_OPER.py
+++ b/Examples/config/config_41t1_AROME_OPER.py
@@ -3,6 +3,9 @@ import os
 rep0 = os.getenv('REP_MUSC')
 
 config = 'AROME_OPER'
-cycle = '41t1_op1.11.GFORTRAN610.x.EB.MUSC'
-MASTER = '/cnrm/amacs/USERS/roehrig/share/MUSC/41t1_op1.11.GFORTRAN610.x.EB.MUSC/bin/MASTERODB'
-namATMref = rep0 + '/namelist/AROME/namarp_41t1_AROME_OPER'
+cycle = '41t1_op1.11_MUSC'
+MASTER = '/cnrm/proc/honnert/HIGH_TUNE/MUSC_ROMAIN/MASTER41t1'
+#PGD = '/home/roehrig/pack/' + cycle + '/bin/PGD'
+#PREP = '/home/roehrig/pack/' + cycle + '/bin/PREP'
+namATMref = rep0 + '/namelist/AROME/namarp_41t1_AROME_HTUNE'
+#namSFXref = rep0 + '/namelist/SURFEX/nam.sfx.tl127.CMIP6.v631'
diff --git a/Examples/config/config_41t1_ARPPNT_OPER.py b/Examples/config/config_41t1_ARPPNT_OPER.py
index 533392b..33be0be 100644
--- a/Examples/config/config_41t1_ARPPNT_OPER.py
+++ b/Examples/config/config_41t1_ARPPNT_OPER.py
@@ -3,6 +3,9 @@ import os
 rep0 = os.getenv('REP_MUSC')
 
 config = 'ARPPNT_OPER'
-cycle = '41t1_op1.11.GFORTRAN610.x.EB.MUSC'
-MASTER = '/cnrm/amacs/USERS/roehrig/share/MUSC/41t1_op1.11.GFORTRAN610.x.EB.MUSC/bin/MASTERODB'
+cycle = '41t1_op1.11_MUSC'
+MASTER = '/home/roehrig/pack/' + cycle + '/bin/MASTERODB'
+PGD = '/home/roehrig/pack/' + cycle + '/bin/PGD'
+PREP = '/home/roehrig/pack/' + cycle + '/bin/PREP'
 namATMref = rep0 + '/namelist/ARPPNT/namarp_41t1_ARPEGE_OPER'
+#namSFXref = rep0 + '/namelist/SURFEX/nam.sfx.tl127.CMIP6.v631'
diff --git a/Examples/config/config_46t1_AROME_EMI.py b/Examples/config/config_46t1_AROME_EMI.py
new file mode 100644
index 0000000..a961016
--- /dev/null
+++ b/Examples/config/config_46t1_AROME_EMI.py
@@ -0,0 +1,11 @@
+import os
+
+rep0 = os.getenv('REP_MUSC')
+
+config = 'AROME_EMI'
+cycle = '46t1_Honnert'
+MASTER = '/home/roehrig/pack/' + cycle + '/bin/MASTERODB'
+#PGD = '/home/roehrig/pack/' + cycle + '/bin/PGD'
+#PREP = '/home/roehrig/pack/' + cycle + '/bin/PREP'
+namATMref = rep0 + '/namelist/AROME/namarp_46t1_AROME_EMI'
+#namSFXref = rep0 + '/namelist/SURFEX/nam.sfx.tl127.CMIP6.v631'
diff --git a/Examples/config/config_46t1_AROME_OPER.py b/Examples/config/config_46t1_AROME_OPER.py
deleted file mode 100644
index b4814c5..0000000
--- a/Examples/config/config_46t1_AROME_OPER.py
+++ /dev/null
@@ -1,8 +0,0 @@
-import os
-
-rep0 = os.getenv('REP_MUSC')
-
-config = 'AROME_OPER'
-cycle = '46_t1.01.GFORTRAN610ECCOD.xfftw'
-MASTER = '/cnrm/amacs/USERS/roehrig/share/MUSC/46_t1.01.GFORTRAN610ECCOD.xfftw/bin/MASTERODB'
-namATMref = rep0 + '/namelist/AROME/namarp_46t1_AROME_OPER'
diff --git a/Examples/config/config_arp631_CMIP6.py b/Examples/config/config_arp631_CMIP6.py
index bff28f7..84da07a 100644
--- a/Examples/config/config_arp631_CMIP6.py
+++ b/Examples/config/config_arp631_CMIP6.py
@@ -4,8 +4,8 @@ rep0 = os.getenv('REP_MUSC')
 
 config = 'CMIP6'
 cycle = 'arp631'
-MASTER = '/home/common/pack/arp603_export.01.GFORTRAN610.cx/bin/MASTER'
-PGD = '/home/common/pack/arp603_export.01.GFORTRAN610.cx/bin/PGD'
-PREP = '/home/common/pack/arp603_export.01.GFORTRAN610.cx/bin/PREP'
+MASTER = '/Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/bin//MASTERODB'
+PGD = '/Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/bin/PGD'
+PREP = '/Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/bin/PREP'
 namATMref = rep0 + '/namelist/ARPCLIMAT/nam.atm.tl127l91r.CMIP6.v631'
 namSFXref = rep0 + '/namelist/SURFEX/nam.sfx.tl127.CMIP6.v631'
diff --git a/Examples/configsim.py b/Examples/configsim.py
index bbd0a0c..9a981a4 100644
--- a/Examples/configsim.py
+++ b/Examples/configsim.py
@@ -16,24 +16,25 @@ allcases=False
 cases = ['AYOTTE']
 
 if model in ['ARPCLIMAT',]:
-    # Number of vertical level
-    nlev = 91
-     # Model time step in seconds
-    timestep = 300
+  # Number of vertical level
+  nlev = 91
+  # Model time step in seconds
+  timestep = 300
 elif model in ['AROME','AROME46t1',]:
-      # Number of vertical level
-    nlev= 90
-    # Model time step in seconds
-    timestep = 50
+  # Number of vertical level
+  nlev= 90
+  # Model time step in seconds
+  timestep = 50
 elif model in ['ARPPNT',]:
-    # Number of vertical level
-    #nlev= 90
-    nlev= 105
-    # Model time step in seconds
-    timestep = 360
+  # Number of vertical level
+  nlev= 90
+#  nlev= 105
+  # Model time step in seconds
+  timestep = 360
+#  # Number of vertical level
 else:
-    print 'Model unknown:', model
-    sys.exit()
+  print 'unknown model:', model
+  sys.exit()
 
 # Test that asked cases are available
 for cc in cases:
diff --git a/Examples/namelist/AROME/namarp_46t1_AROME_OPER b/Examples/namelist/AROME/namarp_46t1_AROME_OPER
deleted file mode 100644
index 28c771d..0000000
--- a/Examples/namelist/AROME/namarp_46t1_AROME_OPER
+++ /dev/null
@@ -1,752 +0,0 @@
-&NACIETEO
-/
-&NACOBS
-/
-&NACTAN
-/
-&NACTEX
-/
-&NACVEG
-/
-&NADOCK
-/
-&NAEAEM7
-/
-&NAEAER
-/
-&NAECOAPHY
-/
-&NAEPHLI
-/
-&NAEPHY
-/
-&NAERAD
-  LRRTM=.FALSE.,
-  LSRTM=.FALSE.,
-  NMCICA=0,
-  NOZOCL=2,
-  NRADFR=-1,
-  NSW=6,
-  RLWINHF=0.9,
-/
-&NAERCLI
-/
-&NAETLDIAG
-/
-&NAEVOL
-/
-&NAIMPO
-/
-&NALORI
-/
-&NAMACV
-/
-&NAMAERDET
-/
-&NAMAFN
-/
-&NAMARG
-  CNMEXP='ARPE',
-  LECMWF=.FALSE.,
-  LELAM=.TRUE.,
-  LSLAG=.TRUE.,
-  NCONF=1,
-  NSUPERSEDE=1,
-/
-&NAMARPHY
-  LKFBCONV=.FALSE.,
-  LKFBD=.FALSE.,
-  LKFBS=.FALSE.,
-  LMFSHAL=.TRUE.,
-  LMICRO=.TRUE.,
-  LMPA=.TRUE.,
-  LMSE=.FALSE.,
-  LTURB=.TRUE.,
-/
-&NAMCA
-/
-&NAMCAPE
-/
-&NAMCFU
-  LCUMFU=.FALSE.,
-/
-&NAMCHEM
-/
-&NAMCHET
-/
-&NAMCHK
-/
-&NAMCLA
-/
-&NAMCLDP
-/
-&NAMCLI
-/
-&NAMCLOP15
-/
-&NAMCLTC
-/
-&NAMCOK
-/
-&NAMCOM
-/
-&NAMCOMPO
-/
-&NAMCOSJO
-/
-&NAMCT0
-  CNPPATH='.',
-  LALLOPR=.FALSE.,
-  LAROME=.TRUE.,
-  LFBDAP=.TRUE.,
-  LFDBOP=.FALSE.,
-  LGRIB_API=.FALSE.,
-  LREGETA=.TRUE.,
-  LSFORC=.TRUE.,
-  LSFORCS=.TRUE.,
-  LSPRT=.TRUE.,
-  LTWOTL=.TRUE.,
-  NFRHIS=1,
-  NFRPOS=1,
-  NFRSDI=1,
-  NHISTS(0)=-30,
-  NHISTS(1)=0,
-  NHISTS(10)=-9,
-  NHISTS(11)=-10,
-  NHISTS(12)=-11,
-  NHISTS(13)=-12,
-  NHISTS(14)=-13,
-  NHISTS(15)=-14,
-  NHISTS(16)=-15,
-  NHISTS(17)=-16,
-  NHISTS(18)=-17,
-  NHISTS(19)=-18,
-  NHISTS(2)=-1,
-  NHISTS(20)=-19,
-  NHISTS(21)=-20,
-  NHISTS(22)=-21,
-  NHISTS(23)=-22,
-  NHISTS(24)=-23,
-  NHISTS(25)=-24,
-  NHISTS(26)=-25,
-  NHISTS(27)=-26,
-  NHISTS(28)=-27,
-  NHISTS(29)=-28,
-  NHISTS(3)=-2,
-  NHISTS(30)=-29,
-  NHISTS(4)=-3,
-  NHISTS(5)=-4,
-  NHISTS(6)=-5,
-  NHISTS(7)=-6,
-  NHISTS(8)=-7,
-  NHISTS(9)=-8,
-  NUNDEFLD=-99999999,
-/
-&NAMCT1
-  LRFILAF=.FALSE.,
-  N1POS=0,
-  N1RES=0,
-  N1SFXHIS=0,
-/
-&NAMCUMF
-/
-&NAMCUMFS
-/
-&NAMCVER
-/
-&NAMCVMNH
-/
-&NAMDDH
-/
-&NAMDFI
-/
-&NAMDIM
-  NPROMA=-4,
-/
-&NAMDIMO
-/
-&NAMDIM_TRAJ
-/
-&NAMDPHY
-/
-&NAMDYN
-  BETADT=1.,
-  LADVF=.FALSE.,
-  LIMPF=.FALSE.,
-  LQMPD=.FALSE.,
-  LQMT=.FALSE.,
-  LQMVD=.FALSE.,
-  NCOMP_CVGQ=1,
-  NSITER=0,
-  NSPDLAG=3,
-  NSVDLAG=3,
-  NTLAG=3,
-  NVLAG=3,
-  NWLAG=3,
-  RCMSLP0=0.,
-  REPS1=0.,
-  REPS2=0.,
-  REPSM1=0.,
-  REPSM2=0.,
-  REPSP1=0.,
-  REXPDH=4.,
-  SIPR=101325.,
-  SITR=350.,
-  SITRA=50.,
-  VESL=0.,
-  VMAX1=100.,
-  VMAX2=120.,
-  XIDT=0.,
-/
-&NAMDYNA
-/
-&NAMDYNCORE
-/
-&NAMEMIS_CONF
-/
-&NAMENKF
-/
-&NAMENSCOV
-/
-&NAMFA
-  NSTRON=0,
-/
-&NAMFAINIT
-/
-&NAMFPC
-/
-&NAMFPD
-/
-&NAMFPDY2
-/
-&NAMFPDYF
-/
-&NAMFPDYH
-/
-&NAMFPDYI
-/
-&NAMFPDYP
-/
-&NAMFPDYS
-/
-&NAMFPDYT
-/
-&NAMFPDYV
-/
-&NAMFPF
-/
-&NAMFPG
-/
-&NAMFPIOS
-/
-&NAMFPMOVE
-/
-&NAMFPOBJ
-/
-&NAMFPPHY
-/
-&NAMFPSC2
-/
-&NAMFPSC2_DEP
-/
-&NAMGEM
-/
-&NAMGFL
-  NGFL_EZDIAG=4,
-  NGFL_FORC=124,
-  YCVGQ_NL%LCDERS=.FALSE.,
-  YCVGQ_NL%LGP=.TRUE.,
-  YCVGQ_NL%LSP=.FALSE.,
-  YEZDIAG_NL(1)%CNAME='EZDIAG01',
-  YEZDIAG_NL(2)%CNAME='EZDIAG02',
-  YEZDIAG_NL(3)%CNAME='EZDIAG03',
-  YEZDIAG_NL(4)%CNAME='EZDIAG04',
-  YG_NL%LPT=.TRUE.,
-  YG_NL%NCOUPLING=0,
-  YG_NL%NREQIN=0,
-  YI_NL%LADV=.TRUE.,
-  YI_NL%LGP=.TRUE.,
-  YI_NL%LGPINGP=.TRUE.,
-  YI_NL%LPHY=.FALSE.,
-  YI_NL%LQM=.TRUE.,
-  YI_NL%LREQOUT=.TRUE.,
-  YI_NL%LT1=.TRUE.,
-  YI_NL%NCOUPLING=0,
-  YI_NL%NREQIN=0,
-  YL_NL%LADV=.TRUE.,
-  YL_NL%LGP=.TRUE.,
-  YL_NL%LGPINGP=.TRUE.,
-  YL_NL%LPHY=.FALSE.,
-  YL_NL%LQM=.TRUE.,
-  YL_NL%LREQOUT=.TRUE.,
-  YL_NL%LT1=.TRUE.,
-  YL_NL%NCOUPLING=0,
-  YL_NL%NREQIN=0,
-  YQ_NL%LGP=.TRUE.,
-  YQ_NL%LQM=.FALSE.,
-  YQ_NL%LSP=.FALSE.,
-  YQ_NL%NCOUPLING=0,
-  YQ_NL%NREQIN=1,
-  YR_NL%LADV=.TRUE.,
-  YR_NL%LGP=.TRUE.,
-  YR_NL%LGPINGP=.TRUE.,
-  YR_NL%LPHY=.FALSE.,
-  YR_NL%LQM=.TRUE.,
-  YR_NL%LREQOUT=.TRUE.,
-  YR_NL%LT1=.TRUE.,
-  YR_NL%NCOUPLING=0,
-  YR_NL%NREQIN=0,
-  YS_NL%LADV=.TRUE.,
-  YS_NL%LGP=.TRUE.,
-  YS_NL%LGPINGP=.TRUE.,
-  YS_NL%LPHY=.FALSE.,
-  YS_NL%LQM=.TRUE.,
-  YS_NL%LREQOUT=.TRUE.,
-  YS_NL%LT1=.TRUE.,
-  YS_NL%NCOUPLING=0,
-  YS_NL%NREQIN=0,
-  YTKE_NL%LADV=.FALSE.,
-  YTKE_NL%LGP=.TRUE.,
-  YTKE_NL%LGPINGP=.TRUE.,
-  YTKE_NL%LQM=.TRUE.,
-  YTKE_NL%LREQOUT=.TRUE.,
-  YTKE_NL%LT1=.TRUE.,
-  YTKE_NL%NCOUPLING=0,
-  YTKE_NL%NREQIN=-1,
-  YTKE_NL%REFVALI=0.000001,
-/
-&NAMGRIB
-/
-&NAMGWD
-/
-&NAMGWDIAG
-/
-&NAMGWWMS
-/
-&NAMIAU
-/
-&NAMICE
-/
-&NAMINI
-  LDFI=.FALSE.,
-/
-&NAMINTFLEX
-/
-&NAMIOMI
-/
-&NAMIOS
-/
-&NAMIO_SERV
-/
-&NAMJBCODES
-/
-&NAMJG
-/
-&NAMLCZ
-/
-&NAMLIMA
-/
-&NAMLSFORC
-  LGEOST_UV_FRC=.TRUE.,
-  LMUSCLFA=.TRUE.,
-  LQV_ADV_FRC=.TRUE.,
-  LT_ADV_FRC=.TRUE.,
-  NGEOST_U_DEB=63,
-  NGEOST_U_NUM=31,
-  NGEOST_V_DEB=94,
-  NGEOST_V_NUM=31,
-  NLH_FORC_DEB=32,
-  NLH_FORC_NUM=31,
-  NL_GEOST_UV_TIME(   1 )=0,
-  NL_GEOST_UV_TIME(   10 )=16200,
-  NL_GEOST_UV_TIME(   11 )=18000,
-  NL_GEOST_UV_TIME(   12 )=19800,
-  NL_GEOST_UV_TIME(   13 )=21600,
-  NL_GEOST_UV_TIME(   14 )=23400,
-  NL_GEOST_UV_TIME(   15 )=25200,
-  NL_GEOST_UV_TIME(   16 )=27000,
-  NL_GEOST_UV_TIME(   17 )=28800,
-  NL_GEOST_UV_TIME(   18 )=30600,
-  NL_GEOST_UV_TIME(   19 )=32400,
-  NL_GEOST_UV_TIME(   2 )=1800,
-  NL_GEOST_UV_TIME(   20 )=34200,
-  NL_GEOST_UV_TIME(   21 )=36000,
-  NL_GEOST_UV_TIME(   22 )=37800,
-  NL_GEOST_UV_TIME(   23 )=39600,
-  NL_GEOST_UV_TIME(   24 )=41400,
-  NL_GEOST_UV_TIME(   25 )=43200,
-  NL_GEOST_UV_TIME(   26 )=45000,
-  NL_GEOST_UV_TIME(   27 )=46800,
-  NL_GEOST_UV_TIME(   28 )=48600,
-  NL_GEOST_UV_TIME(   29 )=50400,
-  NL_GEOST_UV_TIME(   3 )=3600,
-  NL_GEOST_UV_TIME(   30 )=52200,
-  NL_GEOST_UV_TIME(   31 )=54000,
-  NL_GEOST_UV_TIME(   4 )=5400,
-  NL_GEOST_UV_TIME(   5 )=7200,
-  NL_GEOST_UV_TIME(   6 )=9000,
-  NL_GEOST_UV_TIME(   7 )=10800,
-  NL_GEOST_UV_TIME(   8 )=12600,
-  NL_GEOST_UV_TIME(   9 )=14400,
-  NL_LH_ADV_TIME(   1 )=0,
-  NL_LH_ADV_TIME(   10 )=16200,
-  NL_LH_ADV_TIME(   11 )=18000,
-  NL_LH_ADV_TIME(   12 )=19800,
-  NL_LH_ADV_TIME(   13 )=21600,
-  NL_LH_ADV_TIME(   14 )=23400,
-  NL_LH_ADV_TIME(   15 )=25200,
-  NL_LH_ADV_TIME(   16 )=27000,
-  NL_LH_ADV_TIME(   17 )=28800,
-  NL_LH_ADV_TIME(   18 )=30600,
-  NL_LH_ADV_TIME(   19 )=32400,
-  NL_LH_ADV_TIME(   2 )=1800,
-  NL_LH_ADV_TIME(   20 )=34200,
-  NL_LH_ADV_TIME(   21 )=36000,
-  NL_LH_ADV_TIME(   22 )=37800,
-  NL_LH_ADV_TIME(   23 )=39600,
-  NL_LH_ADV_TIME(   24 )=41400,
-  NL_LH_ADV_TIME(   25 )=43200,
-  NL_LH_ADV_TIME(   26 )=45000,
-  NL_LH_ADV_TIME(   27 )=46800,
-  NL_LH_ADV_TIME(   28 )=48600,
-  NL_LH_ADV_TIME(   29 )=50400,
-  NL_LH_ADV_TIME(   3 )=3600,
-  NL_LH_ADV_TIME(   30 )=52200,
-  NL_LH_ADV_TIME(   31 )=54000,
-  NL_LH_ADV_TIME(   4 )=5400,
-  NL_LH_ADV_TIME(   5 )=7200,
-  NL_LH_ADV_TIME(   6 )=9000,
-  NL_LH_ADV_TIME(   7 )=10800,
-  NL_LH_ADV_TIME(   8 )=12600,
-  NL_LH_ADV_TIME(   9 )=14400,
-  NL_QV_ADV_TIME(   1 )=0,
-  NL_QV_ADV_TIME(   10 )=16200,
-  NL_QV_ADV_TIME(   11 )=18000,
-  NL_QV_ADV_TIME(   12 )=19800,
-  NL_QV_ADV_TIME(   13 )=21600,
-  NL_QV_ADV_TIME(   14 )=23400,
-  NL_QV_ADV_TIME(   15 )=25200,
-  NL_QV_ADV_TIME(   16 )=27000,
-  NL_QV_ADV_TIME(   17 )=28800,
-  NL_QV_ADV_TIME(   18 )=30600,
-  NL_QV_ADV_TIME(   19 )=32400,
-  NL_QV_ADV_TIME(   2 )=1800,
-  NL_QV_ADV_TIME(   20 )=34200,
-  NL_QV_ADV_TIME(   21 )=36000,
-  NL_QV_ADV_TIME(   22 )=37800,
-  NL_QV_ADV_TIME(   23 )=39600,
-  NL_QV_ADV_TIME(   24 )=41400,
-  NL_QV_ADV_TIME(   25 )=43200,
-  NL_QV_ADV_TIME(   26 )=45000,
-  NL_QV_ADV_TIME(   27 )=46800,
-  NL_QV_ADV_TIME(   28 )=48600,
-  NL_QV_ADV_TIME(   29 )=50400,
-  NL_QV_ADV_TIME(   3 )=3600,
-  NL_QV_ADV_TIME(   30 )=52200,
-  NL_QV_ADV_TIME(   31 )=54000,
-  NL_QV_ADV_TIME(   4 )=5400,
-  NL_QV_ADV_TIME(   5 )=7200,
-  NL_QV_ADV_TIME(   6 )=9000,
-  NL_QV_ADV_TIME(   7 )=10800,
-  NL_QV_ADV_TIME(   8 )=12600,
-  NL_QV_ADV_TIME(   9 )=14400,
-  NL_SH_ADV_TIME(   1 )=0,
-  NL_SH_ADV_TIME(   10 )=16200,
-  NL_SH_ADV_TIME(   11 )=18000,
-  NL_SH_ADV_TIME(   12 )=19800,
-  NL_SH_ADV_TIME(   13 )=21600,
-  NL_SH_ADV_TIME(   14 )=23400,
-  NL_SH_ADV_TIME(   15 )=25200,
-  NL_SH_ADV_TIME(   16 )=27000,
-  NL_SH_ADV_TIME(   17 )=28800,
-  NL_SH_ADV_TIME(   18 )=30600,
-  NL_SH_ADV_TIME(   19 )=32400,
-  NL_SH_ADV_TIME(   2 )=1800,
-  NL_SH_ADV_TIME(   20 )=34200,
-  NL_SH_ADV_TIME(   21 )=36000,
-  NL_SH_ADV_TIME(   22 )=37800,
-  NL_SH_ADV_TIME(   23 )=39600,
-  NL_SH_ADV_TIME(   24 )=41400,
-  NL_SH_ADV_TIME(   25 )=43200,
-  NL_SH_ADV_TIME(   26 )=45000,
-  NL_SH_ADV_TIME(   27 )=46800,
-  NL_SH_ADV_TIME(   28 )=48600,
-  NL_SH_ADV_TIME(   29 )=50400,
-  NL_SH_ADV_TIME(   3 )=3600,
-  NL_SH_ADV_TIME(   30 )=52200,
-  NL_SH_ADV_TIME(   31 )=54000,
-  NL_SH_ADV_TIME(   4 )=5400,
-  NL_SH_ADV_TIME(   5 )=7200,
-  NL_SH_ADV_TIME(   6 )=9000,
-  NL_SH_ADV_TIME(   7 )=10800,
-  NL_SH_ADV_TIME(   8 )=12600,
-  NL_SH_ADV_TIME(   9 )=14400,
-  NL_T_ADV_TIME(   1 )=0,
-  NL_T_ADV_TIME(   10 )=16200,
-  NL_T_ADV_TIME(   11 )=18000,
-  NL_T_ADV_TIME(   12 )=19800,
-  NL_T_ADV_TIME(   13 )=21600,
-  NL_T_ADV_TIME(   14 )=23400,
-  NL_T_ADV_TIME(   15 )=25200,
-  NL_T_ADV_TIME(   16 )=27000,
-  NL_T_ADV_TIME(   17 )=28800,
-  NL_T_ADV_TIME(   18 )=30600,
-  NL_T_ADV_TIME(   19 )=32400,
-  NL_T_ADV_TIME(   2 )=1800,
-  NL_T_ADV_TIME(   20 )=34200,
-  NL_T_ADV_TIME(   21 )=36000,
-  NL_T_ADV_TIME(   22 )=37800,
-  NL_T_ADV_TIME(   23 )=39600,
-  NL_T_ADV_TIME(   24 )=41400,
-  NL_T_ADV_TIME(   25 )=43200,
-  NL_T_ADV_TIME(   26 )=45000,
-  NL_T_ADV_TIME(   27 )=46800,
-  NL_T_ADV_TIME(   28 )=48600,
-  NL_T_ADV_TIME(   29 )=50400,
-  NL_T_ADV_TIME(   3 )=3600,
-  NL_T_ADV_TIME(   30 )=52200,
-  NL_T_ADV_TIME(   31 )=54000,
-  NL_T_ADV_TIME(   4 )=5400,
-  NL_T_ADV_TIME(   5 )=7200,
-  NL_T_ADV_TIME(   6 )=9000,
-  NL_T_ADV_TIME(   7 )=10800,
-  NL_T_ADV_TIME(   8 )=12600,
-  NL_T_ADV_TIME(   9 )=14400,
-  NQV_ADV_DEB=32,
-  NQV_ADV_NUM=31,
-  NSH_FORC_DEB=1,
-  NSH_FORC_NUM=31,
-  NT_ADV_DEB=1,
-  NT_ADV_NUM=31,
-  RCORIO_FORC=8.53113972355e-05,
-  RZ0_FORC=0.035,
-/
-&NAMMARS
-/
-&NAMMCC
-/
-&NAMMCUF
-/
-&NAMMETHOX
-/
-&NAMMKODB
-/
-&NAMMODERR
-/
-&NAMMTS
-/
-&NAMMWAVE
-/
-&NAMNORGWD
-/
-&NAMNPROF
-/
-&NAMNUD
-/
-&NAMOBS
-/
-&NAMOOPS
-/
-&NAMOPH
-  CFNHWF='ECHIS',
-  LINC=.TRUE.,
-/
-&NAMOPTCMEM
-/
-&NAMPAR0
-   LOPT_SCALAR=.TRUE.,
-   MBX_SIZE=2048000000,
-   MP_TYPE=2,
-   NOUTPUT=1,
-   NPRINTLEV=1,
-   NPROC=1,
-  LOPT_SCALAR=.TRUE.,
-/
-&NAMPAR1
-  LEQ_REGIONS=.FALSE.,
-  LSLONDEM=.TRUE.,
-  LSPLIT=.FALSE.,
-  LSYNC_SLCOM=.TRUE.,
-  LSYNC_TRANS=.TRUE.,
-  L_GATHERV_WRGP=.FALSE.,
-  NCOMBFLEN=1800000,
-  NSTRIN=1,
-  NSTROUT=1,
-/
-&NAMPARAR
-  LFPREC3D=.FALSE.,
-  LOSEDIC=.TRUE.,
-  LOSIGMAS=.TRUE.,
-  LOSUBG_COND=.TRUE.,
-  NPRINTFR=10000,
-  NPTP=1,
-  VSIGQSAT=0.02,
-/
-&NAMPHMSE
-  LPGDFWR=.FALSE.,
-/
-&NAMPHY
-  LMPHYS=.TRUE.,
-  LRAYFM=.FALSE.,
-/
-&NAMPHY0
-  REFLKUO=5000.,
-  REFLRHC=25000.,
-/
-&NAMPHY1
-/
-&NAMPHY2
-/
-&NAMPHY3
-/
-&NAMPHYDS
-  NSFORC=62,
-/
-&NAMPPC
-/
-&NAMPPVI
-/
-&NAMPRE
-/
-&NAMRAD15
-/
-&NAMRADCMEM
-/
-&NAMRCF
-/
-&NAMRCOEF
-/
-&NAMRES
-/
-&NAMRGRI
-/
-&NAMRINC
-/
-&NAMRIP
-  CSTOP='h15',
-  TSTEP=50,
-/
-&NAMRIP0
-/
-&NAMRLX
-/
-&NAMSATS
-/
-&NAMSCC
-/
-&NAMSCEN
-/
-&NAMSCM
-/
-&NAMSEKF
-/
-&NAMSENS
-/
-&NAMSIMPHL
-/
-&NAMSPNG
-/
-&NAMSPP
-/
-&NAMSPSDT
-/
-&NAMSTA
-/
-&NAMSTOPH
-/
-&NAMSWE
-/
-&NAMTESTVAR
-/
-&NAMTHLIM
-/
-&NAMTOPH
-  ETCVIM=5000.,
-  ETNEBU=5000.,
-  ETPLUI=5000.,
-  XDRMTK=2.0D-8,
-  XDRMTP=800.,
-  XDRMTX=4.0D-7,
-  XDRMUK=1.0D-7,
-  XDRMUP=800.,
-  XDRMUX=0.000002,
-/
-&NAMTRAJP
-/
-&NAMTRANS
-/
-&NAMTRANS0
-/
-&NAMVAR
-/
-&NAMVARBC
-/
-&NAMVARBC_AIREP
-/
-&NAMVARBC_ALLSKY
-/
-&NAMVARBC_GBRAD
-/
-&NAMVARBC_RAD
-/
-&NAMVARBC_SFCOBS
-/
-&NAMVARBC_TCWV
-/
-&NAMVARBC_TO3
-/
-&NAMVAREPS
-/
-&NAMVDF
-/
-&NAMVDOZ
-/
-&NAMVOLCANO
-/
-&NAMVRTL
-/
-&NAMVV0
-/
-&NAMVV1
-/
-&NAMVWRK
-/
-&NAMWAVELETJB
-/
-&NAMXFU
-  LXFU=.FALSE.,
-/
-&NAM_CANAPE
-/
-&NAM_DISTRIBUTED_VECTORS
-/
-&NAPHLC
-/
-&NEMCT0
-  LEQLIMSAT=.TRUE.,
-/
-&NEMDIM
-/
-&NEMDYN
-/
-&NEMELBC0A
-  NBICOP=2,
-  NBICOT=2,
-  NBICOU=2,
-  NECRIPL=1,
-/
-&NEMELBC0B
-  TEFRCL=0.,
-/
-&NEMFPEZO
-/
-&NEMGEO
-  RLAT_ACAD=35.8,
-  RLON_ACAD=-97.5,
-/
-&NEMJK
-/
-&NEMVAR
-/
-&NEMWAVELET
-/
diff --git a/README.md b/README.md
deleted file mode 100644
index 84b1aa5..0000000
--- a/README.md
+++ /dev/null
@@ -1,6 +0,0 @@
-# EMS
-Environment for MUSC Simulations
-
-
-
-TEST
diff --git a/UTIL/Init_Forc/AROME/prepare_nam1D.py b/UTIL/Init_Forc/AROME/prepare_nam1D.py
index c7c5c22..dce0bf4 100755
--- a/UTIL/Init_Forc/AROME/prepare_nam1D.py
+++ b/UTIL/Init_Forc/AROME/prepare_nam1D.py
@@ -35,7 +35,7 @@ t0 = f['temp'].getAxis(0)[0]
 units0 = f['temp'].getAxis(0).units
 
 attributes = {}
-for att in ['tadvh','qdvh','qtadvh','uadvh','vadvh','tadvv','qadvv','qtadvv','uadvv','vadvv','tadv','qadv','uadv','vadv','trad','forc_omega','forc_w','forc_geo','nudging_t','nudging_q','nudging_u','nudging_v','surfaceForcing','z0','ustar']:
+for att in ['tadvh','qdvh','qtadvh','uadvh','vadvh','tadvv','qadvv','qtadvv','uadvv','vadvv','tadv','qadv','uadv','vadv','trad','forc_omega','forc_w','forc_geo','nudging_t','nudging_q','nudging_u','nudging_v','surfaceForcing','surfaceForcingWind']:
   attributes[att] = 0
 
 for att in f.listglobal():
@@ -133,7 +133,11 @@ if attributes['surfaceForcing'] == "surfaceFlux" :
   nt_sfc = time_sfc.shape[0]
   nb_fs=nb_fs+2
 
-if attributes['ustar'] > 0 :
+if attributes['surfaceForcingWind'] == "ustar" :
+  var2read.append('ustar')	
+  time_sfc = f('ustar').getAxis(0)
+  nt_sfc = time_sfc.shape[0]
+  print 'nt_sfc', nt_sfc
   nb_fs=nb_fs+1
 
 if attributes['nudging_u'] > 0.:
@@ -357,10 +361,10 @@ if lnam1D:
     for it in range(0,nt_sfc):
       print >>g, 'FLE'
       print >>g, data_in['sfc_lat_flx'][it]
-  if attributes['ustar'] > 0 :
+  if attributes['surfaceForcingWind'] == "ustar" :
     for it in range(0,nt_sfc):
       print >>g, 'USTAR'
-      print >>g, str(float(attributes['ustar']))
+      print >>g, data_in['ustar'][it]
 
   for var in config.variablesAux.keys():
     print >>g, var
@@ -399,7 +403,7 @@ if lnam1D:
     tmp.id = var
     g.write(tmp)
 
-  for var in ['sfc_sens_flx','sfc_lat_flx']:
+  for var in ['sfc_sens_flx','sfc_lat_flx','ustar']:
     tmp = MV2.array(data_in[var][:],typecode=MV2.float32)
     tmp.setAxis(0,ntAxis)
     tmp.id = var
diff --git a/UTIL/Init_Forc/ARPCLIMAT/interpvertp.so b/UTIL/Init_Forc/ARPCLIMAT/interpvertp.so
index 6ba9413..f83c6d1 100755
Binary files a/UTIL/Init_Forc/ARPCLIMAT/interpvertp.so and b/UTIL/Init_Forc/ARPCLIMAT/interpvertp.so differ
diff --git a/UTIL/Init_Forc/ARPCLIMAT/prepare_profile.sh b/UTIL/Init_Forc/ARPCLIMAT/prepare_profile.sh
index 009d517..cba06ee 100755
--- a/UTIL/Init_Forc/ARPCLIMAT/prepare_profile.sh
+++ b/UTIL/Init_Forc/ARPCLIMAT/prepare_profile.sh
@@ -1,5 +1,8 @@
 #!/bin/sh
 
+#conda activate myuvcdat
+alias cdat='python'
+
 cat << EOF > tmp.py
 import os
 
diff --git a/UTIL/Init_Forc/ARPPNT/prepare_nam1D.py b/UTIL/Init_Forc/ARPPNT/prepare_nam1D.py
index c7c5c22..dce0bf4 100644
--- a/UTIL/Init_Forc/ARPPNT/prepare_nam1D.py
+++ b/UTIL/Init_Forc/ARPPNT/prepare_nam1D.py
@@ -35,7 +35,7 @@ t0 = f['temp'].getAxis(0)[0]
 units0 = f['temp'].getAxis(0).units
 
 attributes = {}
-for att in ['tadvh','qdvh','qtadvh','uadvh','vadvh','tadvv','qadvv','qtadvv','uadvv','vadvv','tadv','qadv','uadv','vadv','trad','forc_omega','forc_w','forc_geo','nudging_t','nudging_q','nudging_u','nudging_v','surfaceForcing','z0','ustar']:
+for att in ['tadvh','qdvh','qtadvh','uadvh','vadvh','tadvv','qadvv','qtadvv','uadvv','vadvv','tadv','qadv','uadv','vadv','trad','forc_omega','forc_w','forc_geo','nudging_t','nudging_q','nudging_u','nudging_v','surfaceForcing','surfaceForcingWind']:
   attributes[att] = 0
 
 for att in f.listglobal():
@@ -133,7 +133,11 @@ if attributes['surfaceForcing'] == "surfaceFlux" :
   nt_sfc = time_sfc.shape[0]
   nb_fs=nb_fs+2
 
-if attributes['ustar'] > 0 :
+if attributes['surfaceForcingWind'] == "ustar" :
+  var2read.append('ustar')	
+  time_sfc = f('ustar').getAxis(0)
+  nt_sfc = time_sfc.shape[0]
+  print 'nt_sfc', nt_sfc
   nb_fs=nb_fs+1
 
 if attributes['nudging_u'] > 0.:
@@ -357,10 +361,10 @@ if lnam1D:
     for it in range(0,nt_sfc):
       print >>g, 'FLE'
       print >>g, data_in['sfc_lat_flx'][it]
-  if attributes['ustar'] > 0 :
+  if attributes['surfaceForcingWind'] == "ustar" :
     for it in range(0,nt_sfc):
       print >>g, 'USTAR'
-      print >>g, str(float(attributes['ustar']))
+      print >>g, data_in['ustar'][it]
 
   for var in config.variablesAux.keys():
     print >>g, var
@@ -399,7 +403,7 @@ if lnam1D:
     tmp.id = var
     g.write(tmp)
 
-  for var in ['sfc_sens_flx','sfc_lat_flx']:
+  for var in ['sfc_sens_flx','sfc_lat_flx','ustar']:
     tmp = MV2.array(data_in[var][:],typecode=MV2.float32)
     tmp.setAxis(0,ntAxis)
     tmp.id = var
diff --git a/UTIL/Runs/run_AROME46t1.sh b/UTIL/Runs/run_AROME46t1.sh
index c0cdb0d..f3a893a 100755
--- a/UTIL/Runs/run_AROME46t1.sh
+++ b/UTIL/Runs/run_AROME46t1.sh
@@ -122,8 +122,6 @@ export DR_HOOK_IGNORE_SIGNALS=-1
 
 ulimit -s unlimited
 
-unset LD_LIBRARY_PATH
-
 date
 ./MASTER >lola 2>&1
 date
diff --git a/UTIL/Runs/run_ARPCLIMAT.sh b/UTIL/Runs/run_ARPCLIMAT.sh
index 47ce20f..45351a5 100755
--- a/UTIL/Runs/run_ARPCLIMAT.sh
+++ b/UTIL/Runs/run_ARPCLIMAT.sh
@@ -126,7 +126,7 @@ export OMP_NUM_THREADS=1
 #export DR_HOOK=0
 export DR_HOOK_IGNORE_SIGNALS=-1
 
-ulimit -s unlimited
+#ulimit -s unlimited
 
 date
 ./MASTER -c001 -vmeteo -maladin -e${EXP} -t$TSTEP -f$NSTOP -a$ADVEC  >lola 2>&1
@@ -229,6 +229,7 @@ fi
 
 if [ $runpost = True ]
 then
+  cd $OUTPUTDIR0
   set +x
   echo ''
   echo ' Postprocessing '
diff --git a/UTIL/Tools/ASCII2FA/bin/ascii2fa b/UTIL/Tools/ASCII2FA/bin/ascii2fa
index 8fe8647..dc9aeb3 100755
Binary files a/UTIL/Tools/ASCII2FA/bin/ascii2fa and b/UTIL/Tools/ASCII2FA/bin/ascii2fa differ
diff --git a/UTIL/Tools/ASCII2FA/src/Makefile b/UTIL/Tools/ASCII2FA/src/Makefile
index 5c1b937..ed5e0cf 100755
--- a/UTIL/Tools/ASCII2FA/src/Makefile
+++ b/UTIL/Tools/ASCII2FA/src/Makefile
@@ -2,7 +2,7 @@
 
 FC	 =	gfortran
 FFLAGS	 =      -ff2c -fconvert=big-endian -frecord-marker=4 $(M32) -ffixed-form -fdefault-real-8 -DADDRESS64 -DLITTLE_ENDIAN -DHIGHRES
-F90FLAGS =      -fconvert=big-endian -frecord-marker=4 $(M32) -ffree-form -fdefault-real-8 -DADDRESS64 -DHIGHRES
+F90FLAGS =      -fconvert=swap -fno-second-underscore -fbacktrace -fopenmp -fno-sign-zero -fpic -ffree-line-length-none -m64 -ffree-form  -DLINUX -DLITTLE_ENDIAN -DLITTLE -DDARWIN -DADDRESS64 -fdefault-real-8 -fdefault-double-8 -g -O2
 EXEC	 =	acadfa_exe
 
 OBJS	 =	acadfa1D_main.o \
@@ -10,10 +10,11 @@ OBJS	 =	acadfa1D_main.o \
 		real2spec.o \
 		empty.o 
 
-XRD	 =	libxrd.a 
-GRIBEX   =      /home/common/sync/gfortran/auxlibs/lib/libgribex.a 
-MPIDUMMY =      /home/common/sync/gfortran/auxlibs/lib/libmpidummy.a
-LIBS	 =	$(XRD) $(GRIBEX) $(MPIDUMMY)
+XRD	 =	/Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/lib/libxrd.local.a 
+XLA	 =	/Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/lib/libxla.local.a 
+GRIBEX   =      /Users/romainroehrig/libraries/auxlibs/GNU/auxlibs/lib/libgribex.a 
+MPIDUMMY =      /Users/romainroehrig/libraries/auxlibs/GNU/auxlibs/lib/libmpidummy.a
+LIBS	 =	$(XRD) $(XLA) $(GRIBEX) $(MPIDUMMY) 
 
 %.o:%.F90
 	$(FC) $(F90FLAGS) -c $<
diff --git a/UTIL/Tools/ASCII2FA/src/libxrd.a b/UTIL/Tools/ASCII2FA/src/libxrd.a
deleted file mode 100644
index 4e4a59c..0000000
Binary files a/UTIL/Tools/ASCII2FA/src/libxrd.a and /dev/null differ
diff --git a/UTIL/Tools/LFA/bin/cllangu b/UTIL/Tools/LFA/bin/cllangu
index 9f95061..fb1e1b6 100755
Binary files a/UTIL/Tools/LFA/bin/cllangu and b/UTIL/Tools/LFA/bin/cllangu differ
diff --git a/UTIL/Tools/LFA/bin/lfa2lfa b/UTIL/Tools/LFA/bin/lfa2lfa
index f902433..9ea0865 100755
Binary files a/UTIL/Tools/LFA/bin/lfa2lfa and b/UTIL/Tools/LFA/bin/lfa2lfa differ
diff --git a/UTIL/Tools/LFA/bin/lfa2lfp b/UTIL/Tools/LFA/bin/lfa2lfp
index d2129e6..afc92d1 100755
Binary files a/UTIL/Tools/LFA/bin/lfa2lfp and b/UTIL/Tools/LFA/bin/lfa2lfp differ
diff --git a/UTIL/Tools/LFA/bin/lfa_autodocumentation b/UTIL/Tools/LFA/bin/lfa_autodocumentation
index fa079a0..81a8c39 100755
Binary files a/UTIL/Tools/LFA/bin/lfa_autodocumentation and b/UTIL/Tools/LFA/bin/lfa_autodocumentation differ
diff --git a/UTIL/Tools/LFA/bin/lfa_demo b/UTIL/Tools/LFA/bin/lfa_demo
index 64e0248..512a742 100755
Binary files a/UTIL/Tools/LFA/bin/lfa_demo and b/UTIL/Tools/LFA/bin/lfa_demo differ
diff --git a/UTIL/Tools/LFA/bin/lfac b/UTIL/Tools/LFA/bin/lfac
index cfd4db8..da679d3 100755
Binary files a/UTIL/Tools/LFA/bin/lfac and b/UTIL/Tools/LFA/bin/lfac differ
diff --git a/UTIL/Tools/LFA/bin/lfacre b/UTIL/Tools/LFA/bin/lfacre
index 5a4c669..49371c4 100755
Binary files a/UTIL/Tools/LFA/bin/lfacre and b/UTIL/Tools/LFA/bin/lfacre differ
diff --git a/UTIL/Tools/LFA/bin/lfadiff b/UTIL/Tools/LFA/bin/lfadiff
index ea9c582..1098916 100755
Binary files a/UTIL/Tools/LFA/bin/lfadiff and b/UTIL/Tools/LFA/bin/lfadiff differ
diff --git a/UTIL/Tools/LFA/bin/lfadiffart b/UTIL/Tools/LFA/bin/lfadiffart
index 44ba560..db4bfd8 100755
Binary files a/UTIL/Tools/LFA/bin/lfadiffart and b/UTIL/Tools/LFA/bin/lfadiffart differ
diff --git a/UTIL/Tools/LFA/bin/lfadiffrel b/UTIL/Tools/LFA/bin/lfadiffrel
index e345de1..f6fb680 100755
Binary files a/UTIL/Tools/LFA/bin/lfadiffrel and b/UTIL/Tools/LFA/bin/lfadiffrel differ
diff --git a/UTIL/Tools/LFA/bin/lfafreq b/UTIL/Tools/LFA/bin/lfafreq
index f02ec67..db12761 100755
Binary files a/UTIL/Tools/LFA/bin/lfafreq and b/UTIL/Tools/LFA/bin/lfafreq differ
diff --git a/UTIL/Tools/LFA/bin/lfalaf b/UTIL/Tools/LFA/bin/lfalaf
index c6430df..d688e21 100755
Binary files a/UTIL/Tools/LFA/bin/lfalaf and b/UTIL/Tools/LFA/bin/lfalaf differ
diff --git a/UTIL/Tools/LFA/bin/lfaminm b/UTIL/Tools/LFA/bin/lfaminm
index 57bff37..b54e404 100755
Binary files a/UTIL/Tools/LFA/bin/lfaminm and b/UTIL/Tools/LFA/bin/lfaminm differ
diff --git a/UTIL/Tools/LFA/bin/lfamoy b/UTIL/Tools/LFA/bin/lfamoy
index 3dc0bda..24e2039 100755
Binary files a/UTIL/Tools/LFA/bin/lfamoy and b/UTIL/Tools/LFA/bin/lfamoy differ
diff --git a/UTIL/Tools/LFA/bin/lfareu b/UTIL/Tools/LFA/bin/lfareu
index dfe3cf7..b9ee641 100755
Binary files a/UTIL/Tools/LFA/bin/lfareu and b/UTIL/Tools/LFA/bin/lfareu differ
diff --git a/UTIL/Tools/LFA/bin/lfatest b/UTIL/Tools/LFA/bin/lfatest
index cde8c03..81268f2 100755
Binary files a/UTIL/Tools/LFA/bin/lfatest and b/UTIL/Tools/LFA/bin/lfatest differ
diff --git a/UTIL/Tools/LFA/bin/lfp2lfa b/UTIL/Tools/LFA/bin/lfp2lfa
index bc737bb..b47a98e 100755
Binary files a/UTIL/Tools/LFA/bin/lfp2lfa and b/UTIL/Tools/LFA/bin/lfp2lfa differ
diff --git a/UTIL/install/install_MUSC.py b/UTIL/install/install_MUSC.py
index 387ed26..2353a65 100644
--- a/UTIL/install/install_MUSC.py
+++ b/UTIL/install/install_MUSC.py
@@ -147,7 +147,7 @@ def install_SFX(model,case,filecase,repout,cycle,PGD,PREP,config,namref,subcase=
 
       g.close()
 
-      os.system('cdat tmp.py')
+      os.system('python tmp.py')
       os.system('rm -f tmp.py')
     
       if lperf:
@@ -183,7 +183,7 @@ def install_SFX(model,case,filecase,repout,cycle,PGD,PREP,config,namref,subcase=
 
         g.close()
 
-        os.system('cdat tmp.py')
+        os.system('python tmp.py')
         os.system('rm -f tmp.py')
 
         os.system('./prepare_SURFEX.sh')
@@ -308,7 +308,7 @@ def install_Run(model,case,filecase,repout,config,configOut,subcase=None,loverwr
 
       g.close()
 
-      os.system('cdat tmp.py')
+      os.system('python tmp.py')
       os.system('rm -f tmp.py')
 
       if lperf:
@@ -329,7 +329,7 @@ def install_Run(model,case,filecase,repout,config,configOut,subcase=None,loverwr
 
         g.close()
 
-        os.system('cdat tmp.py')
+        os.system('python tmp.py')
         os.system('rm -f tmp.py')
 
         if lperf:
@@ -523,13 +523,13 @@ def install_Atlas(case,repout,config,configAtlas,subcase=None,loverwrite=False,l
 
       g.close()
 
-      os.system('cdat atlas.py')
+      os.system('python atlas.py')
 
     else: 
       print 'Directory already exists:', rep
       if lupdate:
         os.chdir(rep)
-        os.system('cdat atlas.py')
+        os.system('python atlas.py')
       else:
         print 'Nothing is done'
 
diff --git a/UTIL/install/prepare_namATM_AROME46t1.py b/UTIL/install/prepare_namATM_AROME46t1.py
index ad11eb7..dccd3f8 100644
--- a/UTIL/install/prepare_namATM_AROME46t1.py
+++ b/UTIL/install/prepare_namATM_AROME46t1.py
@@ -37,22 +37,21 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
       for i, obj in tmp:  
         if obj == '.T.': nam[namin][param][i] = '.TRUE.'
         if obj == '.F.': nam[namin][param][i] = '.FALSE.'
-        if obj == '__MP_TYPE__': nam[namin][param][i] = '2'
-        if obj == '__NTASKS__': nam[namin][param][i] = '1'
-        if obj == '__MBX_SIZE__': nam[namin][param][i] = '2048000000'
-        if obj == '__LOPT_SCALAR__': nam[namin][param][i] = '.TRUE.'
-        if obj == '__NCOMBFLEN__': nam[namin][param][i] = '1800000'
+        if obj == 'NDPROC': nam[namin][param][i] = '1'
+        if obj == 'NBPROC': nam[namin][param][i] = '1'
+        if obj == 'NCPROC': nam[namin][param][i] = '1'
+        if obj == 'NBPROC_IO': nam[namin][param][i] = '1'
 
   # Aerosols and Ozone
-  nam['NAMPHY']['LOZONE'] = ['.FALSE.',]
-  nam['NAMPHY']['LRAYFM'] = ['.FALSE.',]
-  nam['NAMPHY']['LO3ABC'] = ['.FALSE.',]
-  nam['NAMPHY']['LAEROSEA'] = ['.FALSE.',]
-  nam['NAMPHY']['LAEROLAN'] = ['.FALSE.',]
-  nam['NAMPHY']['LAEROSOO'] = ['.FALSE.',]
-  nam['NAMPHY']['LAERODES'] = ['.FALSE.',]
-  nam['NAMPHY']['LEDR'] = ['.FALSE.',]
-  nam['NAMPHY']['LO3FL'] = ['.FALSE.',]
+  #nam['NAMPHY']['LOZONE'] = ['.FALSE.',]
+  #nam['NAMPHY']['LRAYFM'] = ['.FALSE.',]
+  #nam['NAMPHY']['LO3ABC'] = ['.FALSE.',]
+  #nam['NAMPHY']['LAEROSEA'] = ['.FALSE.',]
+  #nam['NAMPHY']['LAEROLAN'] = ['.FALSE.',]
+  #nam['NAMPHY']['LAEROSOO'] = ['.FALSE.',]
+  #nam['NAMPHY']['LAERODES'] = ['.FALSE.',]
+  #nam['NAMPHY']['LEDR'] = ['.FALSE.',]
+  #nam['NAMPHY']['LO3FL'] = ['.FALSE.',]
 
   # Empty a few namelists
   for nn in ['NAMFPC','NAMFPD','NAMLSFORC','NAMDYNA','NAMFPSC2_DEP']:
@@ -73,11 +72,18 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
   for param in nam[nn].keys():
     if param[-6:] == 'NREQIN': nam[nn][param] = ['0',]
     if param[-7:] == 'LREQOUT': nam[nn][param] = ['.FALSE.']
+  nam[nn]['NGFL_EZDIAG'] = ['23',]
+  for it in range(1,24):
+      nam[nn]['YEZDIAG_NL('+str(it)+')%CNAME'] = ["'EZDIAG"+str(it).zfill(2)+"'",]
   for name in ['TKE','S','R','Q','L','I','G','CVGQ',]:
       if name == 'CVGQ' : 
         nam[nn]['Y'+name+'_NL%LCDERS'] = ['.FALSE.',]
         nam[nn]['Y'+name+'_NL%LSP'] = ['.FALSE.',]      
         nam[nn]['Y'+name+'_NL%LGP'] = ['.TRUE.',]
+      elif name == 'G':
+        nam[nn]['Y'+name+'_NL%LPT'] = ['.TRUE.',]
+        nam[nn]['Y'+name+'_NL%NCOUPLING'] = ['0',]
+        nam[nn]['Y'+name+'_NL%NREQIN'] = ['0',]
       elif name == 'I':
         nam[nn]['Y'+name+'_NL%LGP'] = ['.TRUE.',]
         nam[nn]['Y'+name+'_NL%LGPINGP'] = ['.TRUE.',]
@@ -126,17 +132,6 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
         nam[nn]['Y'+name+'_NL%LT1'] = ['.TRUE.',]
         nam[nn]['Y'+name+'_NL%NCOUPLING'] = ['0',]
         nam[nn]['Y'+name+'_NL%NREQIN'] = ['0',]
-      elif name == 'G':
-        nam[nn]['Y'+name+'_NL%LPHY'] = ['.FALSE.',]
-        nam[nn]['Y'+name+'_NL%LGPINGP'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%LGP'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%LADV'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%LGPINGP'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%LQM'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%LREQOUT'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%LT1'] = ['.TRUE.',]
-        nam[nn]['Y'+name+'_NL%NCOUPLING'] = ['0',]
-        nam[nn]['Y'+name+'_NL%NREQIN'] = ['0',]
       else: 
         nam[nn]['Y'+name+'_NL%LGPINGP'] = ['.TRUE.',]
         nam[nn]['Y'+name+'_NL%LGP'] = ['.TRUE.',]
@@ -148,40 +143,125 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
         nam[nn]['Y'+name+'_NL%NCOUPLING'] = ['0',]
         nam[nn]['Y'+name+'_NL%NREQIN'] = ['-1',]
         nam[nn]['Y'+name+'_NL%REFVALI'] = ['0.000001',]
-  nam[nn]['NGFL_EZDIAG'] = ['4',]
-  for i in range(1,5):
-      nam[nn]["YEZDIAG_NL(" + str(i) + ")%CNAME"] = ["'EZDIAG0{0}'".format(i),]
+  
   # Update due to MUSC/ALADIN config
+  nn = 'NAMDYN'
+  nam[nn]['LADVF'] = ['.FALSE.',]
+  nam[nn]['NSITER'] = ['0',]
 
-  # Update NAMCT1
-  nn='NAMCT1'
-  del(nam[nn])
+  # Update NAMDIM
+  nn='NAMDIM'
+  try:
+    del(nam[nn])
+  except KeyError:
+    pass      
   nam[nn] = {}
-  nam[nn]['LRFILAF'] = ['.FALSE.',]
-#  nam[nn]['N1HIS']=['0',]
-#  nam[nn]['N1ISP']=['0',]
-  nam[nn]['N1POS']=['0',]
-  nam[nn]['N1RES']=['0',]
-#  nam[nn]['N1SDI']=['0',]
-  nam[nn]['N1SFXHIS']=['0',]
+  nam[nn]['NPROMA'] = ['-4',]
+
+  # Update NAMDYNA
+  #nn='NAMDYNA'
+  #try:
+  #  del(nam[nn])
+  #except KeyError:
+  #  pass      
+  #nam[nn] = {}
+  #nam[nn]['NDLNPR'] = ['0',]
+
+# Update NAMIO_SERV
+  #nn='NAMIO_SERV'
+  #nam[nn]['NIO_SERV_BUF_MAXSIZE'] = ['0']
+  #nam[nn]['NPROCESS_LEVEL'] = ['0']
+  #nam[nn]['NPROC_IO'] = ['0']
+
+  # Update NAMCT1
+  #nn='NAMCT1'
+  #del(nam[nn])
+  #nam[nn] = {}
+  #nam[nn]['LRFILAF'] = ['.FALSE.',]
+  #nam[nn]['N1POS']=['1',]
+  #nam[nn]['N1RES']=['0',]
+  #nam[nn]['N1SFXHIS']=['0',]
+
+  # Update NAMCT0
+  nn = 'NAMCT0'
+  #nam['NAMCT0'] = {}
+  #nam[nn]['LAROME']=['.TRUE.',]
+  #nam[nn]['LREGETA']=['.TRUE.',]
+  #nam[nn]['LSPRT']=['.TRUE.',]
+  #nam[nn]['CNPPATH']=["'.'",]
+  #nam[nn]['LFDBOP']=['.FALSE.',]
+  #nam[nn]['LFBDAP']=['.TRUE.',]
+  nam[nn]['LSFORC']=['.TRUE.',]
+  nam[nn]['LSFORCS']=['.TRUE.',]
+  #nam[nn]['NFRHIS'] = ['1',]
+  #nam[nn]['NFPOS'] = ['1',]
+  #nam[nn]['NFRPOS'] = ['1',]
+  #nam[nn]['NFRSDI'] = ['1',]
+  #nam[nn]['NHISTS(0)'] = ['1',]
+  #nam[nn]['LGRIB_API']=['.FALSE.',]
+  #nam[nn]['LALLOPR']=['.FALSE.',]
+  #nam[nn]['NUNDEFLD'] = ['-99999999',]
 
   # Update NAMXFU
   nn =  'NAMXFU'
   for param in nam[nn].keys():
     if param[0] == 'L': nam[nn][param] = ['.FALSE.',]
 
+# Update NAMPAR0
+  nn = 'NAMPAR0'
+  del(nam[nn])
+  nam[nn]={}
+  nam[nn][' MBX_SIZE']=['2048000000',]
+  nam[nn][' NOUTPUT']=['1',]
+  nam[nn][' NPROC']=['1',]
+  nam[nn][' MP_TYPE']=['2',]
+  nam[nn][' LOPT_SCALAR']=['.TRUE.',]
+  nam[nn][' NPRINTLEV']=['1',]
+
+# Update NAMPAR1
+  nn = 'NAMPAR1'
+  del(nam[nn])
+  nam[nn]={}
+  nam[nn]['L_GATHERV_WRGP']=['.FALSE.',]
+  nam[nn]['LEQ_REGIONS']=['.FALSE.',]
+  nam[nn]['LSLONDEM']=['.TRUE.',]
+  nam[nn]['LSPLIT']=['.FALSE.',]
+  nam[nn]['LSYNC_SLCOM']=['.TRUE.',]
+  nam[nn]['LSYNC_TRANS']=['.TRUE.',]
+  nam[nn]['NCOMBFLEN']=['1800000',]
+  nam[nn]['NSTRIN']=['1',]
+  nam[nn]['NSTROUT']=['1',]
+ 
+# Update NAMPARAR
+  #nn='NAMPARAR'
+  #nam[nn]['CMF_CLOUD']=["'DIRE'",]
+  #nam[nn]['CMF_UPDRAFT']=["'EDKF'",]
+  #nam[nn]['LMIXUV']=['.TRUE.',]
+  #nam[nn]['NSWB_MNH']=['6',]
+
 # Update NAMARG
 
   nn = 'NAMARG'
   nam[nn]['CNMEXP'] = ["'ARPE'",]
-  #nam[nn]['CUSTOP'] = ["'"+NSTOP+"'",]
-  #nam[nn]['TSTEP'] = [str(timestep),]
 
+# Update NAMCFU
+
+  nn = 'NAMCFU'
+  for param in nam[nn].keys():
+    nam[nn][param] = [".FALSE.",]
+
+# Update NEMELBC0A
+
+  #nn = 'NEMELBC0A'
+  #nam[nn]['LESPCPL'] = [".FALSE.",]
+
+
+  # -----------------------------------------------------------
   # Case specific modifications in namref
   # -----------------------------------------------------------
 
   attributes = {}
-  for att in ['tadvh','qdvh','qtadvh','uadvh','vadvh','tadvv','qadvv','qtadvv','uadvv','vadvv','tadv','qadv','uadv','vadv','trad','forc_omega','forc_w','forc_geo','nudging_t','nudging_q','nudging_u','nudging_v','surfaceForcing']:
+  for att in ['tadvh','qdvh','qtadvh','uadvh','vadvh','tadvv','qadvv','qtadvv','uadvv','vadvv','tadv','qadv','uadv','vadv','trad','forc_omega','forc_w','forc_geo','nudging_t','nudging_q','nudging_u','nudging_v','surfaceForcing','z0','ustar']:
     attributes[att] = 0
 
   for att in ['p_nudging_t','p_nudging_q','p_nudging_u','p_nudging_v']:
@@ -189,6 +269,10 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
   for att in fin.listglobal():
     attributes[att] = fin.getglobal(att)
 
+  if attributes['surfaceForcing'] == "surfaceFlux" :
+    time_sfc = fin('sfc_sens_flx').getAxis(0)
+    nt_sfc = time_sfc.shape[0]
+
   # Setting latitude and longitude
   tmp = fin('temp')
   lat = tmp.getLatitude()[0]
@@ -206,11 +290,10 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
   second = int(startDate[12:14])
   
 #  second = 0
+  #nam['NAMRIP']['NINDAT'] = [startDate[0:8],]
+  #nam['NAMRIP']['NSSSSS'] = [str(int(hour*3600+minute*60+second)),]
   nam['NAMRIP']['TSTEP'] = [str(timestep),]
   nam['NAMRIP']['CSTOP'] = ["'"+NSTOP+"'",]
-#  nam['NAMRIP']['NINDAT'] = [startDate[0:8],]
-#  nam['NAMRIP']['NSSSSS'] = [str(int(hour*3600+minute*60+second)),]
-
 
   # Case with no radiation or radiation included in temperature advection
   nam['NAERAD']['LRRTM'] =  ['.FALSE.',]
@@ -262,15 +345,11 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
   if attributes['forc_omega'] == 1:
       nam["NAMCT0"]['LSFORC']=['.TRUE.',]
       nam[nn]['LSOMEGA_FRC'] = ['.TRUE.',]
-  if attributes['forc_w'] == 1:
-      nam["NAMCT0"]['LSFORC']=['.TRUE.',]
-      nam[nn]['LSW_FRC'] = ['TRUE',]
   if attributes['forc_geo'] == 1:
       nam["NAMCT0"]['LSFORC']=['.TRUE.',]
       nam[nn]['LGEOST_UV_FRC'] = ['.TRUE.',]
       W=7.2921e-5
       nam[nn]['RCORIO_FORC'] = [str(2.*W*math.sin(lat*math.pi/180)),]
-      nam[nn]['RZ0_FORC'] = ['0.035',]
       nam[nn]['NGEOST_U_DEB']=[str(1+nt*i),]
       nam[nn]['NGEOST_U_NUM']=[str(nt),]
       i=i+1
@@ -279,8 +358,14 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
       i=i+1
       for it in range(0,nt):
         nam[nn]['NL_GEOST_UV_TIME(   '+str(int(it+1))+' )']=[str(int(dt*it)),]
-  else:
-      nam[nn]['LGEOST_UV_FRC'] = ['.FALSE.',]
+  if attributes['forc_w'] == 1:
+      nam["NAMCT0"]['LSFORC']=['.TRUE.',]
+      nam[nn]['LSW_FRC'] = ['TRUE',]  
+      nam[nn]['NLSW_DEB'] = [str(1+i*nt),]
+      nam[nn]['NLSW_NUM'] = [str(nt),]
+      i=i+1
+      for it in range(0,nt):
+        nam[nn]['NL_LSW_TIME(   '+str(int(it+1))+' )']=[str(int(dt*it)),]      
   if attributes['nudging_u'] > 0. or attributes['nudging_v'] > 0.:
       nam["NAMCT0"]['LSFORC']=['.TRUE.',]
       nam[nn]['LUV_NUDG'] = ['.TRUE.',]
@@ -298,15 +383,23 @@ def prep_nam_ATM(case,filecase,namref,timestep,NSTOP,namout=None,subcase=None,ls
       nam['NAMTOPH']['ETRELAXQ'] = [str(float(attributes['p_nudging_q'])),]
   if attributes['surfaceForcing'] == "surfaceFlux" :
       nam["NAMCT0"]['LSFORCS']=['.TRUE.',]
-      nam[nn]["NSH_FORC_DEB"]=[str(int(1+j*nt)),]
-      nam[nn]["NSH_FORC_NUM"]=[str(nt),]
+      if attributes['z0'] > 0.:
+        nam[nn]['RZ0_FORC'] = [str(float(attributes['z0'])),]
+      else:
+        nam[nn]['RZ0_FORC'] = ['0.035',]
+      nam[nn]["NSH_FORC_DEB"]=[str(int(1+j*nt_sfc)),]
+      nam[nn]["NSH_FORC_NUM"]=[str(nt_sfc),]
       j=j+1
-      nam[nn]["NLH_FORC_DEB"]=[str(int(1+j*nt)),]
-      nam[nn]["NLH_FORC_NUM"]=[str(nt),]
-      for it in range(0,nt):
-         nam[nn]['NL_SH_ADV_TIME(   '+str(int(it+1))+" )"]=[str(int(dt*it)),]
-         nam[nn]['NL_LH_ADV_TIME(   '+str(int(it+1))+" )"]=[str(int(dt*it)),]
-      nam["NAMPHYDS"]['NSFORC']=[str(int(2*nt)),]
+      nam[nn]["NLH_FORC_DEB"]=[str(int(1+j*nt_sfc)),]
+      nam[nn]["NLH_FORC_NUM"]=[str(nt_sfc),]
+      if nt_sfc == 1:
+        dt_sfc = 0.
+      else:  
+        dt_sfc = time_sfc[1]-time_sfc[0]
+      for it in range(0,nt_sfc):
+         nam[nn]['NL_SH_ADV_TIME(   '+str(int(it+1))+" )"]=[str(int(dt_sfc*it)),]
+         nam[nn]['NL_LH_ADV_TIME(   '+str(int(it+1))+" )"]=[str(int(dt_sfc*it)),]
+      nam["NAMPHYDS"]['NSFORC']=[str(int(2*nt_sfc)),]
 
   nam['NAMGFL']['NGFL_FORC'] = [str(int(nt*i)),]
 
diff --git a/UTIL/post.old/config_AMMA.py b/UTIL/post.old/config_AMMA.py
new file mode 100644
index 0000000..3104e13
--- /dev/null
+++ b/UTIL/post.old/config_AMMA.py
@@ -0,0 +1,48 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['th','thl','ta','hus','hur','ua','va','pres','presH','wap',\
+#	    'ql','qi','qr','qsn','qlc','qic','qrc','qsnc',\
+#	    'cl','pr','hfls','hfss','prw',\
+#	    'tnthrsw','tnthrlw','tnthpbl','tnthlscp','tnthc','tnthd',\
+#	    'tnthlrsw','tnthlrlw','tnthlpbl','tnthllscp','tnthlc','tnthld',\
+#	    'tnqtpbl','tnqtlscp','tnqtc','tnqtd',\
+#	    'wpqtp_pbl','wpthlp_pbl','wpqtp_conv','wpthlp_conv',\
+#	    'Q1','Q2','zg','zgH']
+
+var2save = ['th','ta','hus','ua','va','pres','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','cltl','cltm','clth','clt','Q11','igs','igs2','sigs','sigs2','omega_up','omega_dn','alpha_up','alpha_dn','rho','mlen','sigs2turb','sigs2conv','igs2turb','igs2conv','Q11min','Q11max','acoef','qlc','qic','qrc','qsnc','tke','lwp','iwp','sigc0','sigc1','cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']#,'ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']
+
+var2save = var2save + ['delta_t','delta_q','d_delta_t_gw',\
+	    'omgb_dth','dp_omgb','dt_KE','dq_KE','dt_PBL','dq_PBL',\
+	    'omg_w','dp_delt_omg','spread_w','delta_th',\
+	    'dt_wake','dq_wake','t_undi','q_undi',\
+	    'd_delta_t','d_delta_q','hw','sigmaw',\
+	    'wake_pe','wake_fip','wake_gfl','Cstar','wdens',\
+	    'dt_dn','dt_up','dq_dn','dq_up','Mf_up','Mf_dn','sigd','omgb',\
+	    't_undi_pcmt','q_undi_pcmt','t_wake_pcmt','q_wake_pcmt',\
+	    'qw_undi','qw_wake','Tw_wake','Tw_undi','qsat_undi','qsat_wake',\
+	    'alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn','cape','T_up','qv_up',\
+            'w_up_bud','dw_buoy','dw_fric','dw_Kd','dw_entr','dw_transp','buoy',\
+            'Mf','eps_u','eps_u_org','eps_u_tur','entr_u','detr_u','dTv_up',\
+            'tnqadv','tnqvpbl','tnqvc','tnqvlscp','tnqvd',\
+            'tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd']
+
+lfalaf = '/home/roehrig/Logiciels/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2006-07-10 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+levoutz = []
+for i in range(0,401):
+  levoutz.append(i*50.)
+levoutz.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_AMMA.wake.py b/UTIL/post.old/config_AMMA.wake.py
new file mode 100644
index 0000000..a5e1ece
--- /dev/null
+++ b/UTIL/post.old/config_AMMA.wake.py
@@ -0,0 +1,35 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['th','thl','ta','hus','hur','ua','va','pres','presH','wap',\
+	    'ql','qi','qr','qsn','qlc','qic','qrc','qsnc',\
+	    'cl','pr','prls','prc','hfls','hfss','prw',\
+	    'tnthrsw','tnthrlw','tnthpbl','tnthlscp','tnthc','tnthd',\
+	    'tnthlrsw','tnthlrlw','tnthlpbl','tnthllscp','tnthlc','tnthld',\
+	    'tnqtpbl','tnqtlscp','tnqtc','tnqtd',\
+	    'wpqtp_pbl','wpthlp_pbl','wpqtp_conv','wpthlp_conv',\
+	    'Q1','Q2','zg','zgH','delta_t','delta_q','d_delta_t_gw',\
+	    'omgb_dth','dp_omgb','dt_KE','dq_KE','dt_PBL','dq_PBL',\
+	    'omg_w','dp_delt_omg','spread_w','delta_th',\
+	    'dt_wake','dq_wake','t_undi','q_undi',\
+	    'd_delta_t','d_delta_q','hw','sigmaw',\
+	    'wake_pe','wake_fip','wake_gfl','Cstar','wdens',\
+	    'dt_dn','dt_up','dq_dn','dq_up','Mf_up','Mf_dn','sigd','omgb',\
+	    't_undi_pcmt','q_undi_pcmt','t_wake_pcmt','q_wake_pcmt',\
+	    'qw_undi','qw_wake','Tw_wake','Tw_undi','qsat_undi','qsat_wake',\
+	    'alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn','cape','T_up','qv_up']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2010-07-10 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_AMMA_PCMT.py b/UTIL/post.old/config_AMMA_PCMT.py
new file mode 100644
index 0000000..69c0bdb
--- /dev/null
+++ b/UTIL/post.old/config_AMMA_PCMT.py
@@ -0,0 +1,19 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','cl','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','qr','qsn','qlc','qic','qrc','qsnc']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2010-07-10 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_AMMA_shPCMT.py b/UTIL/post.old/config_AMMA_shPCMT.py
new file mode 100644
index 0000000..d91a2bc
--- /dev/null
+++ b/UTIL/post.old/config_AMMA_shPCMT.py
@@ -0,0 +1,19 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','cl','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvshc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntshc','tntpbl','tntd','ts','hur','Q1','Q2','qr','qsn','qlc','qic','qrc','qsnc','qlshc','qishc','qrshc','qsnshc']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2010-07-10 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_AYOTTE.py b/UTIL/post.old/config_AYOTTE.py
new file mode 100644
index 0000000..09bb283
--- /dev/null
+++ b/UTIL/post.old/config_AYOTTE.py
@@ -0,0 +1,23 @@
+#saveall = True
+saveall = False
+
+
+var2save = ['th','ta','hus','ua','va','pres','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','prw','tnqadv','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','qlc','qic','qrc','qsnc','tke','tnupbl','tnuc','tnud','tnvpbl','tnvc','tnvd']
+
+var2save = var2save + ['alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn','cape','T_up','qv_up','omega_ref','w_up_bud','dw_buoy','dw_fric','dw_Kd','dw_entr','dw_transp','buoy','Mf','eps_u','eps_u_org','eps_u_tur','entr_u','detr_u','dTv_up','wpqp_pbl','wpthp_pbl','wpqp_conv','wpthp_conv','aipcmt','knnd','knlab','wpup_conv','wpup_pbl','wpvp_conv','wpvp_pbl']
+
+
+# Pour convert2p, niveau en hPa
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Pour convert2z, niveau en m
+levoutz = []
+for i in range(0,401):
+  levoutz.append(i*50.)
+levoutz.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_CGILS.py b/UTIL/post.old/config_CGILS.py
new file mode 100644
index 0000000..253316a
--- /dev/null
+++ b/UTIL/post.old/config_CGILS.py
@@ -0,0 +1,18 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['Q1', 'Q2', 'QRad', 'cl', 'cls', 'clt', 'cltc', 'clth', 'cltl', 'cltm', 'cwp', 'hfls', 'hfss', 'hur', 'hurs', 'hus', 'huss', 'iwp', 'lwp', 'pblh', 'pr', 'prc', 'precc', 'precls', 'pres', 'presH', 'prls', 'prw', 'qi', 'ql', 'qsat', 'rho', 'rlds', 'rldscs', 'rldt', 'rldtcs', 'rls', 'rlscs', 'rlt', 'rltcs', 'rlus', 'rluscs', 'rlut', 'rlutcs', 'rsds', 'rsdscs', 'rsdt', 'rsdtcs', 'rss', 'rsscs', 'rst', 'rstcs', 'rsus', 'rsuscs', 'rsut', 'rsutcs', 'snowc', 'snowls', 'ta', 'tas', 'th', 'thl', 'thlv', 'thv', 'tke', 'tnqi', 'tnqic', 'tnql', 'tnqlc', 'tnqr', 'tnqrc', 'tnqsn', 'tnqsnc', 'tnqt', 'tnqtc', 'tnqtd', 'tnqtlscp', 'tnqtpbl', 'tnqvc', 'tnqvd', 'tnqvlscp', 'tnqvpbl', 'tntc', 'tntd', 'tnthl', 'tnthlc', 'tnthld', 'tnthllscp', 'tnthlpbl', 'tntlscp', 'tntpbl', 'tntrlw', 'tntrsw', 'tnuc', 'tnud', 'tnupbl', 'tnvc', 'tnvd', 'tnvpbl', 'ts', 'ua', 'uas', 'va', 'vas', 'wa', 'wap', 'zg', 'zgH','alpha','Mf','Tu','Thu','qvu','qcu','tntrswcs','tntrlwcs','tntadv','tntnudg','tnqadv','tnqnudg']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2003-07-15 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+
+# Pour convert2z, niveau en m 
+levoutz = [100,200,300,400,500,600,700,800,900,1000,1200,1400,1600,1800,2000,2500,3000,3500,4000,4500,5000,6000,7000,8000,9000,10000,11000,12000,13000,140000,15000,16000,17000,18000,19000,20000]
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_CGILS2.py b/UTIL/post.old/config_CGILS2.py
new file mode 100644
index 0000000..4d77f3e
--- /dev/null
+++ b/UTIL/post.old/config_CGILS2.py
@@ -0,0 +1,18 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['cldtot','cldlow','tglwp','precw','tsair','precc','precl','prect','lh','sh','pblh','fsntc','fsnt','flntc','flnt','fsnsc','fsns','flnsc','flns','p','T','qv','ql','cloud','mu','tdt_turb','tdt_cond','tdt_deep','tdt_lw','tdt_sw','tdt_ls','qdt_turb','qdt_cond','qdt_deep','qdt_ls','presH']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 1999-07-15 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+
+# Pour convert2z, niveau en m 
+levoutz = [100,200,300,400,500,600,700,800,900,1000,1200,1400,1600,1800,2000,2500,3000,3500,4000,4500,5000,6000,7000,8000,9000,10000,11000,12000,13000,140000,15000,16000,17000,18000,19000,20000]
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_CINDY-DYNAMO.py b/UTIL/post.old/config_CINDY-DYNAMO.py
new file mode 100644
index 0000000..1590483
--- /dev/null
+++ b/UTIL/post.old/config_CINDY-DYNAMO.py
@@ -0,0 +1,39 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['ta','hus','u','v','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','FORCQINT','PCVGQ_CPPHINP','PCVGQ_CPPHINP0','OMU','OMD','OMEF','hur','Q1','Q2','QRad']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','cltl','cltm','clth','clt','Q11','igs','igs2','sigs','sigs2','omega_up','omega_dn','alpha_up','alpha_dn','rho','mlen','sigs2turb','sigs2conv','igs2turb','igs2conv','Q11min','Q11max','acoef','qlc','qic','qrc','qsnc','tke','lwp','iwp','sigc0','sigc1','cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']#,'ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']
+
+var2save = var2save + ['delta_t','delta_q','d_delta_t_gw',\
+	    'omgb_dth','dp_omgb','dt_KE','dq_KE','dt_PBL','dq_PBL',\
+	    'omg_w','dp_delt_omg','spread_w','delta_th',\
+	    'dt_wake','dq_wake','t_undi','q_undi',\
+	    'd_delta_t','d_delta_q','hw','sigmaw',\
+	    'wake_pe','wake_fip','wake_gfl','Cstar','wdens',\
+	    'dt_dn','dt_up','dq_dn','dq_up','Mf_up','Mf_dn','sigd','omgb',\
+	    't_undi_pcmt','q_undi_pcmt','t_wake_pcmt','q_wake_pcmt',\
+	    'qw_undi','qw_wake','Tw_wake','Tw_undi','qsat_undi','qsat_wake',\
+	    'alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn','cape','T_up','qv_up',\
+            'w_up_bud','dw_buoy','dw_fric','dw_Kd','dw_entr','dw_transp','buoy',\
+            'Mf','eps_u','eps_u_org','eps_u_tur','entr_u','detr_u','dTv_up',\
+            'tnqadv','tnqvpbl','tnqvc','tnqvlscp','tnqvd',\
+            'tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd']
+
+#var2save = ['pres','zg','presH','zgH','ta','hus','hur','ua','va','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','tntadv','tnqadv','tauu','tauv','ustar','Cd','Ce','Ch','rsds','rlds','rsus','rlus','ts','z0','z0h']
+
+
+# Pour convert2p, niveau en hPa
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
+
+levoutz = []
+for i in range(0,50):
+  levoutz.append(10*i)
+for i in range(0,11):
+  levoutz.append(500+100*i)
diff --git a/UTIL/post.old/config_CINDY.wake.py b/UTIL/post.old/config_CINDY.wake.py
new file mode 100644
index 0000000..8a83e90
--- /dev/null
+++ b/UTIL/post.old/config_CINDY.wake.py
@@ -0,0 +1,29 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['ta','hus','u','v','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','FORCQINT','PCVGQ_CPPHINP','PCVGQ_CPPHINP0','OMU','OMD','OMEF','hur','Q1','Q2','QRad']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','delta_t','delta_q','d_delta_t_gw',\
+	    'omgb_dth','dp_omgb','dt_KE','dq_KE','dt_PBL','dq_PBL',\
+	    'omg_w','dp_delt_omg','spread_w','delta_th',\
+	    'dt_wake','dq_wake','t_undi','q_undi',\
+	    'd_delta_t','d_delta_q','hw','sigmaw',\
+	    'wake_pe','wake_fip','wake_gfl','Cstar','wdens',\
+	    'dt_dn','dt_up','dq_dn','dq_up','Mf_up','Mf_dn','sigd','omgb',\
+	    't_undi_pcmt','q_undi_pcmt','t_wake_pcmt','q_wake_pcmt',\
+	    'qw_undi','qw_wake','Tw_wake','Tw_undi','qsat_undi','qsat_wake',\
+	    'alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2011-10-01 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_CINDY_micro.py b/UTIL/post.old/config_CINDY_micro.py
new file mode 100644
index 0000000..e6878f7
--- /dev/null
+++ b/UTIL/post.old/config_CINDY_micro.py
@@ -0,0 +1,20 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['ta','hus','u','v','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','FORCQINT','PCVGQ_CPPHINP','PCVGQ_CPPHINP0','OMU','OMD','OMEF','hur','Q1','Q2','QRad']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','tntcas','tntcs','tntfplcl','tntfplcn','tntfccql','tntfecl','tntfccqn','tntfecn','tntfhimcc','tntfplsl','tntfplsn','tntfcsql','tntfesl','tntfcsqn','tntfesn','Ugr']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2011-10-01 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_CIRC.py b/UTIL/post.old/config_CIRC.py
new file mode 100644
index 0000000..7696125
--- /dev/null
+++ b/UTIL/post.old/config_CIRC.py
@@ -0,0 +1,16 @@
+#saveall = True
+saveall = False
+
+var2save = ['ta','hus','u','v','pres']
+var2save = ['ta','hus','u','v','pres','ZOMEGA','ql','qi','cl','PREC_TOT','PFRSO','PFRTH','WVP']
+var2save = ['ta','hus','ua','va','pres','presH','rsdt','rsut','rlut','rsds','rsus','rlds','rlus','rsutcs','rlutcs','rsdscs','rsuscs','rldscs','ql','qi','cl','prw','rss','rst','rls','rlt','rCO2','rCH4','rN2O','rNO2','rCFC11','rCFC12','rCFC22','rCCL4','rO3','SWd','SWu','SWdcs','SWucs','LWd','LWu','LWdcs','LWucs','SWnet','LWnet','QRad','Q1','tntrsw','tntrlw']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2000-01-01 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_Derbyshire.py b/UTIL/post.old/config_Derbyshire.py
new file mode 100644
index 0000000..24e2d7b
--- /dev/null
+++ b/UTIL/post.old/config_Derbyshire.py
@@ -0,0 +1,26 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','cltl','cltm','clth','clt','Q11','igs','igs2','sigs','sigs2','omega_up','omega_dn','alpha_up','alpha_dn','rho','mlen','sigs2turb','sigs2conv','igs2turb','igs2conv','Q11min','Q11max','acoef','qlc','qic','qrc','qsnc','tke','lwp','iwp','sigc0','sigc1','alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn','cape','T_up','qv_up','omega_ref','w_up_bud','dw_buoy','dw_fric','dw_Kd','dw_entr','dw_transp','buoy','Mf','eps_u','eps_u_org','eps_u_tur','entr_u','detr_u','dTv_up']
+
+
+lfalaf = '/home/roehrig/Logiciels/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2000-01-01 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
+
+levoutz = []
+for i in range(0,50):
+  levoutz.append(10*i)
+for i in range(0,201):
+  levoutz.append(500+100*i)
diff --git a/UTIL/post.old/config_FIRE.py b/UTIL/post.old/config_FIRE.py
new file mode 100644
index 0000000..9872f45
--- /dev/null
+++ b/UTIL/post.old/config_FIRE.py
@@ -0,0 +1,33 @@
+saveall = True
+#saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['th','thl','ta','hus','hur','ua','va','pres','presH','wap',\
+#	    'ql','qi','qr','qsn','qlc','qic','qrc','qsnc',\
+#	    'cl','pr','hfls','hfss','prw',\
+#	    'tnthrsw','tnthrlw','tnthpbl','tnthlscp','tnthc','tnthd',\
+#	    'tnthlrsw','tnthlrlw','tnthlpbl','tnthllscp','tnthlc','tnthld',\
+#	    'tnqtpbl','tnqtlscp','tnqtc','tnqtd',\
+#	    'wpqtp_pbl','wpthlp_pbl','wpqtp_conv','wpthlp_conv',\
+#	    'Q1','Q2','zg','zgH']
+
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','cltl','cltm','clth','clt','Q11','igs','igs2','sigs','sigs2','omega_up','omega_dn','alpha_up','alpha_dn','rho','mlen','sigs2turb','sigs2conv','igs2turb','igs2conv','Q11min','Q11max','acoef','qlc','qic','qrc','qsnc','tke','lwp','iwp','sigc0','sigc1','cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']#,'ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']
+
+lfalaf = '/home/roehrig/Logiciels/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 1987-07-14 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+levoutz = []
+for i in range(0,401):
+  levoutz.append(i*50.)
+levoutz.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_RCE.py b/UTIL/post.old/config_RCE.py
new file mode 100644
index 0000000..3e2f7f0
--- /dev/null
+++ b/UTIL/post.old/config_RCE.py
@@ -0,0 +1,20 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['ta','hus','u','v','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','FORCQINT','PCVGQ_CPPHINP','PCVGQ_CPPHINP0','OMU','OMD','OMEF','hur','Q1','Q2','QRad']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2011-10-01 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_REMEMBER.py b/UTIL/post.old/config_REMEMBER.py
new file mode 100644
index 0000000..a4037c0
--- /dev/null
+++ b/UTIL/post.old/config_REMEMBER.py
@@ -0,0 +1,24 @@
+import numpy
+
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+var2save = ['ta','hus','ua','va','zg','zgH','pres','wap','ql','qi','cl','pr','prls','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','rsdt','rsut','rlut','rlds','rsds','rlus','rsus','qlc','qic','qrc','qsnc','alpha_up','w_up','omega_up','alpha_dn','w_dn','omega_dn','cape','T_up','qv_up','omega_ref']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2002-09-08 16:0:0.0'
+
+# Pour convert2p, niveau en hPa
+levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+#levout = []
+#for i in range(1,41):
+#  levout.append(i*25.)
+#levout.reverse()
+
+levoutz =[0.07213, 0.15048, 0.23783, 0.33677, 0.44973, 0.57889, 0.72629, 0.89375, 1.0829, 1.2952, 1.5319, 1.794, 2.0824, 2.3977, 2.7406, 3.1111, 3.5096, 3.9357, 4.3893, 4.8698, 5.3766, 5.9089, 6.4655, 7.0452, 7.6465, 8.2695, 8.9145, 9.5825, 10.275, 10.993, 11.736, 12.507, 13.305, 14.132, 14.99, 15.878, 16.798, 17.752, 18.741, 19.765]
+levoutz = numpy.array(levoutz,dtype=numpy.float32)*1000.
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_RICO.py b/UTIL/post.old/config_RICO.py
new file mode 100644
index 0000000..7069d81
--- /dev/null
+++ b/UTIL/post.old/config_RICO.py
@@ -0,0 +1,33 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['th','thl','ta','hus','hur','ua','va','pres','presH','wap',\
+#	    'ql','qi','qr','qsn','qlc','qic','qrc','qsnc',\
+#	    'cl','pr','hfls','hfss','prw',\
+#	    'tnthrsw','tnthrlw','tnthpbl','tnthlscp','tnthc','tnthd',\
+#	    'tnthlrsw','tnthlrlw','tnthlpbl','tnthllscp','tnthlc','tnthld',\
+#	    'tnqtpbl','tnqtlscp','tnqtc','tnqtd',\
+#	    'wpqtp_pbl','wpthlp_pbl','wpqtp_conv','wpthlp_conv',\
+#	    'Q1','Q2','zg','zgH']
+
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','qr','qsn','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw','Cd','Ch','Ce','Cdn','Chn','Cen','cltl','cltm','clth','clt','Q11','igs','igs2','sigs','sigs2','omega_up','omega_dn','alpha_up','alpha_dn','rho','mlen','sigs2turb','sigs2conv','igs2turb','igs2conv','Q11min','Q11max','acoef','qlc','qic','qrc','qsnc','tke','lwp','iwp','sigc0','sigc1','cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']#,'ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']
+
+lfalaf = '/home/roehrig/Logiciels/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2004-12-16 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+levoutz = []
+for i in range(0,401):
+  levoutz.append(i*50.)
+levoutz.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_TOGA.py b/UTIL/post.old/config_TOGA.py
new file mode 100644
index 0000000..7b2c6b4
--- /dev/null
+++ b/UTIL/post.old/config_TOGA.py
@@ -0,0 +1,20 @@
+#saveall = True
+saveall = False
+
+#var2save = ['ta','hus','u','v','pres']
+#var2save = ['ta','hus','u','v','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','FORCQINT','PCVGQ_CPPHINP','PCVGQ_CPPHINP0','OMU','OMD','OMEF','hur','Q1','Q2','QRad']
+var2save = ['ta','hus','ua','va','pres','wap','ql','qi','cl','prw','pr','hfls','hfss','prw','qflux','tnqadv','ppr','tnqvpbl','tnqvc','tnqvlscp','tnqvd','tntadv','tntrlw','tntrsw','tntlscp','tntc','tntpbl','tntd','ts','hur','Q1','Q2','QRad','mueff','I0','SWd','rsdt','rsut','rsus','rsds','rsutcs','rsuscs','rsdscs','rlut','rlutcs','rlds','rldscs','rlus','rluscs','alb_ss','qflux','qfluxPr','qfluxEv','dwater','iQadv','iQnud','iQw']
+
+lfalaf = '/home/roehrig/LFA/Romain/bin/lfalaf'
+
+tunits = 'seconds since 2011-10-01 0:0:0.0'
+
+# Pour convert2p, niveau en hPa
+#levout = [1000.,950.,900.,850.,800.,750.,700,650.,600,550.,500.,450.,400.,350.,300.,250.,200.,150.,100.,50.]
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/config_default.py b/UTIL/post.old/config_default.py
new file mode 100644
index 0000000..e7ee296
--- /dev/null
+++ b/UTIL/post.old/config_default.py
@@ -0,0 +1,20 @@
+#saveall = True
+saveall = False
+
+
+var2save = ['th','ta','hus','hur','ua','va','pres','wap','ql','qi','qr','qsn','qlc','qic','qrc','qsnc','cl','tke','prw','pr','hfls','hfss','prw','ts']
+
+
+# Pour convert2p, niveau en hPa
+levout = []
+for i in range(1,41):
+  levout.append(i*25.)
+levout.reverse()
+
+levoutz = []
+for i in range(0,401):
+  levoutz.append(i*50.)
+levoutz.reverse()
+
+# Niveau de print (0, 1 ou 2)
+verbose = 2
diff --git a/UTIL/post.old/convert2p.F90 b/UTIL/post.old/convert2p.F90
new file mode 100644
index 0000000..cf71094
--- /dev/null
+++ b/UTIL/post.old/convert2p.F90
@@ -0,0 +1,39 @@
+!f2py -c convert2p.F90 -m convert2p
+SUBROUTINE convert2p(nt,nlevin,nlevout,levin,levout,datain,dataout,missing)
+
+IMPLICIT NONE
+
+INTEGER, INTENT(IN) :: nt, nlevin, nlevout
+REAL, INTENT(IN) :: levin(nt,nlevin)
+REAL, INTENT(IN) :: levout(nlevout)
+REAL, INTENT(IN) :: datain(nt,nlevin)
+REAL, INTENT(OUT) :: dataout(nt,nlevout)
+REAL, INTENT(OUT) :: missing(nt,nlevout)
+
+!f2py intent(in) nt,nlevin,nlevout,levin,levout,datain
+!f2py intent(out) dataout, missing
+
+integer ilevin, ilevout, ii, it
+real slope
+
+do it=1,nt
+  do ilevout=1,nlevout
+    missing(it,ilevout) = 1.
+    do ilevin=1,nlevin-1
+      if ((levin(it,ilevin).lt.levout(ilevout)) &
+         & .and.(levin(it,ilevin+1).ge.levout(ilevout))) then
+        ii = ilevin
+        missing(it,ilevout) = 0.
+      endif
+    enddo
+    if (missing(it,ilevout) == 0.) then
+      slope = (levout(ilevout)-levin(it,ii))/(levin(it,ii+1)-levin(it,ii))
+
+      dataout(it,ilevout) = datain(it,ii)+slope*(datain(it,ii+1)-datain(it,ii))
+    endif
+  enddo
+enddo
+
+return
+
+END      
diff --git a/UTIL/post.old/convert2p.py b/UTIL/post.old/convert2p.py
new file mode 100644
index 0000000..8e3ceff
--- /dev/null
+++ b/UTIL/post.old/convert2p.py
@@ -0,0 +1,78 @@
+import cdms2
+import MV2
+import sys
+import convert2p
+import config
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+varall = config.saveall
+
+var2save = config.var2save
+
+levout = config.levout
+levout = MV2.array(levout,typecode=MV2.float32)
+nlevout = levout.shape[0]
+
+levout = cdms2.createAxis(levout)
+levout.id = 'lev'
+levout.designateLevel()
+levout.units = 'hPa'
+levout.long_name = 'pressure_level'
+
+missing_value = 1.e20
+
+
+if varall:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save = f.listvariables()
+  f.close
+else:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save0 = f.listvariables()
+  f.close 
+  var2save = set(var2save).intersection(set(var2save0))
+
+f = cdms2.open('netcdf/Out_klevel.nc')
+pres = f('presH')/100.
+presf = f('pres')/100.
+
+time = pres.getTime()
+
+nlev = presf.shape[1]
+nlev1 = pres.shape[1]
+
+g = cdms2.open('netcdf/Out_plevel.nc','w')
+
+for var in var2save:
+  if config.verbose >= 1:	
+    print var	
+  data0 = f(var)
+  if (len(data0.shape) == 2 and data0.shape[1] >= nlev) and var not in ['clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR','parasolRefl','clcalipso2','boxtauisccp','boxptopisccp','VETAF']:
+    if data0.shape[1] == nlev:
+      data,missing = convert2p.convert2p(presf,levout,data0)
+    elif data0.shape[1] == nlev1:
+      data,missing = convert2p.convert2p(pres,levout,data0)
+    else:
+      print 'vertical dimension unexpected for ' + var + ': ' + str(f[var].shape[1])
+      sys.exit()
+
+    data = MV2.array(data,typecode=MV2.float)
+    data = MV2.where(missing == 1, missing_value,data)
+    data = MV2.masked_values(data,missing_value)
+    data.missing_value = missing_value
+    data.setAxis(0,time)
+    data.setAxis(1,levout)
+    data.id = var
+    for att in data0.listattributes():
+      data.setattribute(att,data0.getattribute(att))
+
+    g.write(data)
+  else:
+    g.write(data0)	  
+
+
+f.close()
+g.close()
diff --git a/UTIL/post.old/convert2p.so b/UTIL/post.old/convert2p.so
new file mode 100755
index 0000000..15381ca
Binary files /dev/null and b/UTIL/post.old/convert2p.so differ
diff --git a/UTIL/post.old/convert2z.F90 b/UTIL/post.old/convert2z.F90
new file mode 100644
index 0000000..9c7e2fb
--- /dev/null
+++ b/UTIL/post.old/convert2z.F90
@@ -0,0 +1,42 @@
+!f2py -c convert2z.F90 -m convert2z
+SUBROUTINE convert2z(nt,nlevin,nlevout,levin,levout,datain,dataout,missing)
+
+IMPLICIT NONE
+
+INTEGER, INTENT(IN) :: nt, nlevin, nlevout
+REAL, INTENT(IN) :: levin(nt,nlevin)
+REAL, INTENT(IN) :: levout(nlevout)
+REAL, INTENT(IN) :: datain(nt,nlevin)
+REAL, INTENT(OUT) :: dataout(nt,nlevout)
+REAL, INTENT(OUT) :: missing(nt,nlevout)
+
+!f2py intent(in) nt,nlevin,nlevout,levin,levout,datain
+!f2py intent(out) dataout,missing
+
+integer ilevin, ilevout, ii, it
+real slope
+
+do it=1,nt
+  do ilevout=1,nlevout
+    missing(it,ilevout) = 1.
+    do ilevin=1,nlevin-1
+!      if (it == 1) then
+!        print*, levin(it,ilevin), levin(it,ilevin+1), levout(ilevout)
+!      endif
+      if ((levin(it,ilevin).gt.levout(ilevout)) &
+         & .and.(levin(it,ilevin+1).le.levout(ilevout))) then
+        ii = ilevin
+        missing(it,ilevout) = 0.
+      endif
+    enddo
+    if (missing(it,ilevout) == 0.) then
+      slope = (levout(ilevout)-levin(it,ii))/(levin(it,ii+1)-levin(it,ii))
+
+      dataout(it,ilevout) = datain(it,ii)+slope*(datain(it,ii+1)-datain(it,ii))
+    endif
+  enddo
+enddo
+
+return
+
+END      
diff --git a/UTIL/post.old/convert2z.py b/UTIL/post.old/convert2z.py
new file mode 100644
index 0000000..d637c1b
--- /dev/null
+++ b/UTIL/post.old/convert2z.py
@@ -0,0 +1,77 @@
+import cdms2
+import MV2
+import sys
+import convert2z
+import config
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+varall = config.saveall
+
+var2save = config.var2save
+
+levelz = config.levoutz
+levelz = MV2.array(levelz,typecode=MV2.float32)
+nlevz = levelz.shape[0]
+
+levelz = cdms2.createAxis(levelz/1000.)
+levelz.id = 'level'
+levelz.designateLevel()
+levelz.units = 'km'
+levelz.long_name = 'Altitude'
+
+
+missing_value = 1.e20
+
+if varall:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save = f.listvariables()
+  f.close
+else:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save0 = f.listvariables()
+  f.close 
+  var2save = set(var2save).intersection(set(var2save0))
+
+f = cdms2.open('netcdf/Out_klevel.nc')
+phi = f('zgH')/9.80665/1000.
+phif = f('zg')/9.80665/1000.
+
+time = phi.getTime()
+
+nlev = phif.shape[1]
+nlev1 = phi.shape[1]
+
+g = cdms2.open('netcdf/Out_zlevel.nc','w')
+
+for var in var2save:
+  print var	
+  data0 = f(var)
+  if (len(data0.shape) == 2 and data0.shape[1] >= nlev) and var not in ['clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR','parasolRefl','clcalipso2','boxtauisccp','boxptopisccp','VETAF']:
+    if data0.shape[1] == nlev:
+      data,missing = convert2z.convert2z(phif,levelz,data0)
+    elif data0.shape[1] == nlev1:
+      data,missing = convert2z.convert2z(phi,levelz,data0)
+    else:
+      print 'vertical dimension unexpected for ' + var + ': ' + str(f[var].shape[1])
+      sys.exit()
+  
+    data = MV2.array(data,typecode=MV2.float)
+    data = MV2.where(missing == 1, missing_value,data)
+    data = MV2.masked_values(data,missing_value)
+    data.missing_value = missing_value
+    data.setAxis(0,time)
+    data.setAxis(1,levelz)
+    data.id = var
+    for att in data0.listattributes():
+      data.setattribute(att,data0.getattribute(att))
+
+    g.write(data)
+  else:
+    g.write(data0)	  
+
+
+f.close()
+g.close()
diff --git a/UTIL/post.old/convert2z.so b/UTIL/post.old/convert2z.so
new file mode 100755
index 0000000..f67021b
Binary files /dev/null and b/UTIL/post.old/convert2z.so differ
diff --git a/UTIL/post.old/convertLFA2nc.sh b/UTIL/post.old/convertLFA2nc.sh
new file mode 100755
index 0000000..17675e3
--- /dev/null
+++ b/UTIL/post.old/convertLFA2nc.sh
@@ -0,0 +1,73 @@
+#!/bin/sh
+
+# seems necessary in some circumstances (deep shells?)
+unset PYTHONHOME
+source activate myuvcdat
+alias cdat='python'
+
+convert2p=yes #yes
+convert2z=no #yes
+
+convertkday=no
+convertpday=no
+convertzday=no
+
+convertk1h=no
+convertp1h=no
+convertz1h=no
+
+convertk3h=no # not coded for yes
+convertp3h=no #yes
+convertz3h=no # not coded for yes
+
+if [ ! -d netcdf ] ; then
+  mkdir netcdf
+else
+  rm netcdf/*.nc
+fi
+
+python lfa2nc_part1.py
+cdat lfa2nc_part2.py
+
+mv Out_klevel.nc netcdf/
+
+if [ $convertk1h ==  "yes" ] ; then
+  cdat convertk_to_1hourly.py
+fi
+
+if [ $convertk3h ==  "yes" ] ; then
+  cdat convertk_to_3hourly.py
+fi
+
+if [ $convertkday ==  "yes" ] ; then
+  cdat convertk_to_daily.py
+fi
+
+
+if [ $convert2p == "yes" ] ; then
+  cdat convert2p.py
+  if [ $convertp1h ==  "yes" ] ; then
+    cdat convertp_to_1hourly.py
+  fi
+  if [ $convertp3h ==  "yes" ] ; then
+    cdat convertp_to_3hourly.py
+  fi
+  if [ $convertpday ==  "yes" ] ; then
+    cdat convertp_to_daily.py
+  fi
+fi
+
+if [ $convert2z == "yes" ] ; then
+  cdat convert2z.py
+  if [ $convertz1h ==  "yes" ] ; then
+    cdat convertz_to_1hourly.py
+  fi
+  if [ $convertz3h ==  "yes" ] ; then
+    cdat convertz_to_3hourly.py
+  fi
+  if [ $convertzday ==  "yes" ] ; then
+    cdat convertz_to_daily.py
+  fi
+
+fi
+
diff --git a/UTIL/post.old/convertk_to_1hourly.py b/UTIL/post.old/convertk_to_1hourly.py
new file mode 100644
index 0000000..f515bac
--- /dev/null
+++ b/UTIL/post.old/convertk_to_1hourly.py
@@ -0,0 +1,86 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_klevel.nc')
+
+time0 = f('pres').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/3600)-1
+
+kt = int(3600/dt)
+nt1=kt*nt
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_1hourly_klevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/convertk_to_daily.py b/UTIL/post.old/convertk_to_daily.py
new file mode 100644
index 0000000..a67422c
--- /dev/null
+++ b/UTIL/post.old/convertk_to_daily.py
@@ -0,0 +1,85 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_klevel.nc')
+
+time0 = f('pres').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/86400)-1
+
+kt = int(86400/dt)
+nt1 = kt*nt
+
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Day)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_daily_klevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/convertp_to_1hourly.py b/UTIL/post.old/convertp_to_1hourly.py
new file mode 100644
index 0000000..d743971
--- /dev/null
+++ b/UTIL/post.old/convertp_to_1hourly.py
@@ -0,0 +1,86 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+var = f.listvariables()
+time0 = f(var[0]).getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/3600)-1
+
+kt = int(3600/dt)
+nt1=kt*nt
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_1hourly_plevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/convertp_to_3hourly.py b/UTIL/post.old/convertp_to_3hourly.py
new file mode 100644
index 0000000..40a20c4
--- /dev/null
+++ b/UTIL/post.old/convertp_to_3hourly.py
@@ -0,0 +1,90 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+nt = 100*24/3
+
+unitsTime = 'hours since 2011-10-01 0:0:0.0'
+
+time0 = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = cdtime.comptime(2011,10,1,0,0,0)
+  tt = tt.add(3.*it+1.5,cdtime.Hour)
+  time0[it] = tt.torel(unitsTime).value
+
+time0.designateTime()
+time0.id = 'time'
+time0.units = unitsTime
+time0.calendar = 'gregorian'
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+
+g = cdms2.open(rep0 + '/netcdf/Out_3hourly_plevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+  nt = nt0/(3*4)-1
+  nt0 = nt*3*4+1
+  tmp = tmp[0:nt0]
+
+  for it in range(0,4*3+1):
+    if it == 0:
+      data = data + tmp[0:nt0-1:4*3]/(8*3.)
+      rms = rms + tmp[0:nt0-1:4*3]*tmp[0:nt0-1:4*3]/(8*3.)
+    elif it == 4*3:
+      data = data + tmp[4*3:nt0:4*3]/(8*3.)
+      rms = rms + tmp[4*3:nt0:4*3]*tmp[4*3:nt0:4*3]/(8*3.)
+    else:
+      data = data + tmp[it:nt0-1:4*3]/(4*3.)
+      rms = rms + tmp[it:nt0-1:4*3]*tmp[it:nt0:4*3]/(4*3.)
+
+  time = time0[0:nt]
+  time = cdms2.createAxis(time)
+  time.designateTime()
+  time.id = 'time'
+  time.units = unitsTime
+  time.calendar = 'gregorian'
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/convertp_to_daily.py b/UTIL/post.old/convertp_to_daily.py
new file mode 100644
index 0000000..ebce0d4
--- /dev/null
+++ b/UTIL/post.old/convertp_to_daily.py
@@ -0,0 +1,85 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+
+time0 = f('pres').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/86400)-1
+
+kt = int(86400/dt)
+nt1 = kt*nt
+
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Day)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_daily_plevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 10:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/convertz_to_1hourly.py b/UTIL/post.old/convertz_to_1hourly.py
new file mode 100644
index 0000000..a98d10c
--- /dev/null
+++ b/UTIL/post.old/convertz_to_1hourly.py
@@ -0,0 +1,86 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_zlevel.nc')
+
+time0 = f('pres').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/3600)-1
+
+kt = int(3600/dt)
+nt1=kt*nt
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_1hourly_zlevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/convertz_to_daily.py b/UTIL/post.old/convertz_to_daily.py
new file mode 100644
index 0000000..31d310a
--- /dev/null
+++ b/UTIL/post.old/convertz_to_daily.py
@@ -0,0 +1,85 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_zlevel.nc')
+
+time0 = f('pres').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/86400)-1
+
+kt = int(86400/dt)
+nt1 = kt*nt
+
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_daily_zlevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 10:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post.old/lfa2nc_part1.py b/UTIL/post.old/lfa2nc_part1.py
new file mode 100644
index 0000000..fd43230
--- /dev/null
+++ b/UTIL/post.old/lfa2nc_part1.py
@@ -0,0 +1,236 @@
+import sys
+#print sys.path
+sys.path = ['./'] + sys.path
+
+import lfa
+import netCDF4
+import os
+import string
+import numpy
+
+import variables
+import config
+
+
+saveall = config.saveall
+
+if not(saveall):
+  var2save0 = config.var2save
+  var2save = []
+  for var in var2save0:
+    var2save.append(variables.varnames[var])	 
+
+  var2add = ['NINDAT',\
+             'NSSSSS',\
+             'RSTATI',\
+	     'TSPHY',\
+	     'PAPRS',\
+	     'PAPRSF',\
+	     'PAPHI',\
+	     'PAPHIF']
+
+  for var in var2add:
+    var2save.append(var)
+
+  var2save = set(var2save)
+
+# list of files
+
+os.system('ls LFA/*.lfa > var.tmp')
+
+f = open('var.tmp')
+files = f.readlines()
+f.close()
+os.system('rm var.tmp')
+
+
+nfiles = len(files)
+
+# List of variables and their size and type is retrieved
+
+lfalaf= os.get('REP_EMS') + '/UTIL/Tools/LFA/bin/lfalaf'
+
+os.system(lfalaf + ' ' + files[0].strip() + ' > var.tmp')
+
+f = open('var.tmp')
+line0 = f.readline()
+lines=f.readlines()
+f.close()
+os.system('rm var.tmp')
+
+variables = []
+sizes = {}
+types = {}
+for line in lines:
+  sp = string.split(line,'|')
+#  print sp
+  var = sp[3][1:-1]
+  type = sp[1]
+  tmp = string.split(sp[2])
+  size = int(tmp[1])
+  variables.append(var)
+  sizes[var] = size
+  types[var] = type
+
+lvar4D = {}
+for vv in ['fracout', 'atb532', 'cfadLidarsr532', 'dbze94', 'cfadDbze94', 'clisccp', 'clmodis', 'clMISR']:
+  lvar4D[vv] = False	
+  if vv + '_001' in variables:
+    variables.append(vv)	  
+    lvar4D[vv] = True
+    sizes[vv] = sizes[vv + '_001']
+    types[vv] = types[vv + '_001']
+
+if saveall: 
+  var2save = variables
+  var2save = set(var2save)
+else:
+  variables = set(variables)
+  var2save = variables.intersection(set(var2save))
+
+
+# Getting levels number
+
+klev = int(lfa.readi(files[0].strip(),'KLEV',1))
+lcolumn = False
+try:
+  ncol = int(lfa.readi(files[0].strip(),'NCOLUMNS',1))
+  if not(ncol == 0): lcolumn = True
+except:
+  pass
+
+# Init nectdf file
+
+f = netCDF4.Dataset('global.nc','w',format='NETCDF3_CLASSIC')
+level = f.createDimension('level',klev)
+Hlevel = f.createDimension('Hlevel',klev+1)
+level2 = f.createDimension('level2',klev+2)
+alt40 = f.createDimension('alt40',40)
+temp = f.createDimension('temp',40)
+sza5 = f.createDimension('sza5',5)
+if lcolumn or lvar4D['dbze94'] or lvar4D['atb532'] or lvar4D['fracout']:
+  column = f.createDimension('column',ncol)
+if lvar4D['cfadDbze94']:
+  dbze = f.createDimension('dbze',15)
+if lvar4D['cfadLidarsr532']:
+  sratio = f.createDimension('sratio',15)
+if lvar4D['clisccp'] or lvar4D['clmodis'] or lvar4D['clMISR']:  
+  tau = f.createDimension('tau',7)
+if lvar4D['clisccp'] or lvar4D['clmodis']:  
+  plev7 = f.createDimension('plev7',7)  
+if lvar4D['clMISR']:  
+  cth16 = f.createDimension('cth16',16)
+
+time = f.createDimension('time',None)
+
+data = {}
+ii=0
+for var in var2save:
+  if sizes[var] == 1:
+    axis = ('time')
+  if sizes[var] == 2:
+    axis = ('time','TOASurf')
+    if ii == 0:
+      topdown = f.createDimension('TOASurf',2)
+      ii = 1
+  if sizes[var] == klev and not(var in ['fracout', 'atb532', 'cfadLidarsr532', 'dbze94', 'cfadDbze94', 'clisccp', 'clmodis', 'clMISR']):
+    axis = ('time','level')
+  if sizes[var] == klev+1  and not(var in ['fracout', 'atb532', 'cfadLidarsr532', 'dbze94', 'cfadDbze94', 'clisccp', 'clmodis', 'clMISR']):
+    axis = ('time','Hlevel')
+  if sizes[var] == klev+2:
+    axis = ('time','level2')
+  if var in ['clcalipso','clcalipso2','clcalipsoice','clcalipsoliq','clcalipsoun'] and sizes[var] == 40:
+    axis = ('time','alt40')
+  if var in ['clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun'] and sizes[var] == 40:
+    axis = ('time','temp')
+  if var in ['parasolRefl'] and sizes[var] == 5:
+    axis = ('time','sza5')
+  if lcolumn and var in ['boxtauisccp','boxptopisccp'] and sizes[var] == ncol:
+    axis = ('time','column')	
+  if var in ['fracout', 'atb532', 'dbze94']:
+    axis = ('time','column','level')
+  if var in ['cfadDbze94']:
+    axis = ('time','dbze','alt40')
+  if var in ['cfadLidarsr532']:
+    axis = ('time','sratio','alt40')
+  if var in ['clisccp','clmodis']:
+    axis = ('time','tau','plev7')
+  if var in ['clMISR']:
+    axis = ('time','tau','cth16')
+
+
+
+  if types[var] == 'I4':  	
+    typ = 'i4'
+  if types[var] == 'R4':
+    typ = 'f4'
+  if types[var] == 'C ':
+    typ = 'c'	  
+  
+  if typ <> 'c':
+    data[var] = f.createVariable(var,typ,axis)
+  
+
+it = -1
+for file in files:
+  it = it + 1
+  if config.verbose >= 2:
+    print file.strip()
+  for var in var2save:
+    if var in ['fracout', 'atb532', 'dbze94']:
+      datatmp = numpy.zeros((ncol,klev),dtype=numpy.float)
+      for i in range(0,ncol):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+    elif var in ['cfadDbze94']:
+      datatmp = numpy.zeros((15,40),dtype=numpy.float)
+      for i in range(0,15):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    elif var in ['cfadLidarsr532']:
+      datatmp = numpy.zeros((15,40),dtype=numpy.float)
+      for i in range(0,15):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    elif var in ['clisccp', 'clmodis']:
+      datatmp = numpy.zeros((7,7),dtype=numpy.float)
+      for i in range(0,7):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    elif var in ['clMISR']:
+      datatmp = numpy.zeros((7,16),dtype=numpy.float)
+      for i in range(0,7):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    else:
+      
+#    print var
+      if types[var] <> 'C ':
+        if types[var] == 'I4':
+          tmp = lfa.readi(file.strip(),var,sizes[var])
+          if sizes[var] == 1:
+            tmp = int(tmp)
+        if types[var] == 'R4':
+          tmp = lfa.readr(file.strip(),var,sizes[var])
+          if sizes[var] == 1:
+            tmp = float(tmp)
+
+        data[var][it] = tmp
+
+
+f.close()
+
diff --git a/UTIL/post.old/lfa2nc_part2.py b/UTIL/post.old/lfa2nc_part2.py
new file mode 100644
index 0000000..bf8beb1
--- /dev/null
+++ b/UTIL/post.old/lfa2nc_part2.py
@@ -0,0 +1,329 @@
+import sys, os
+sys.path = ['./'] + sys.path
+import cdms2
+import MV2
+import cdtime
+import string
+
+import variables as vv
+import config
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+saveall = config.saveall
+
+var2save = config.var2save
+if not('pres' in var2save):
+  var2save.append('pres')
+if not('presH' in var2save):
+  var2save.append('presH')
+if not('zg' in var2save):
+  var2save.append('zg')
+if not('zgH' in var2save):
+  var2save.append('zgH')
+varnames = vv.varnames
+names = vv.names
+varunits = vv.units
+
+f = cdms2.open('global.nc')
+
+if saveall:
+  var2save0 = f.listvariables()
+  var2save = []
+  for var in var2save0:
+    if var in vv.varnames.values():
+      for vvar in vv.varnames.keys():
+        if vv.varnames[vvar] == var:	      
+          var2save.append(vvar)
+    else:
+      var2save.append(var)
+      varnames[var] = var
+      names[var] = var
+      varunits[var] = '-'
+else:
+  var2save0 = f.listvariables()
+  var2save1 = []
+  for var in var2save0:
+    if var in vv.varnames.values():
+      for vvar in vv.varnames.keys():
+        if vv.varnames[vvar] == var:	      
+          var2save1.append(vvar)
+    else:
+      var2save1.append(var)
+      varnames[var] = var
+      names[var] = var
+      varunits[var] = '-'
+  var2save = set(var2save).intersection(set(var2save1))
+
+#print var2save
+
+nindat = f('NINDAT')
+nsssss = f('NSSSSS')
+rstati = f('RSTATI')
+step = f('TSPHY')[0]
+
+nt = nindat.shape[0]
+
+time = MV2.array(range(0,nt),typecode=MV2.float32)
+time_bnds = MV2.zeros((nt,2),typecode=MV2.float32)
+#units = config.tunits
+
+year = int(str(nindat[0])[0:4])
+month = int(str(nindat[0])[4:6])
+day = int(str(nindat[0])[6:8])
+units = 'seconds since %(year)4.4i-%(month)2.2i-%(day)2.2i 0:0:0.0'%{"year": year, "month": month, "day": day}
+
+for it in range(0,nt):
+  year = int(str(nindat[it])[0:4])
+  month = int(str(nindat[it])[4:6])
+  day = int(str(nindat[it])[6:8])
+  hour = int((nsssss[it]+rstati[it])/3600)
+  minutes = int((nsssss[it]+rstati[it]-hour*3600)/60)
+  seconds = nsssss[it]+rstati[it]-hour*3600-minutes*60
+
+  lhour = False
+  if hour >= 24:
+    ndays = int(hour/24) 
+    hour = hour - ndays*24
+    lhour = True	
+
+  tt = cdtime.comptime(year,month,day,hour,minutes,seconds)
+  if lhour:
+    tt = tt.add(ndays*24,cdtime.Hour)
+
+  time[it] = float(tt.torel(units).value)
+
+  tt1 = tt.add(-step/2.,cdtime.Second)
+  tt2 = tt.add( step/2.,cdtime.Second)
+  if config.verbose >= 2:
+    print tt.tocomp(), tt1.tocomp(), tt2.tocomp()
+  time_bnds[it,0] = float(tt1.torel(units).value)
+  time_bnds[it,1] = float(tt2.torel(units).value)
+
+
+time = cdms2.createAxis(time,bounds=time_bnds)
+time.designateTime()
+time.id = 'time'
+time.units = units
+time.calendar = 'gregorian'
+
+paprsf = f('PAPRSF')[0,:]
+nlev = paprsf.shape[0]
+
+lalt40 = False
+for var in ['clcalipso','clcalipso2','clcalipsoice','clcalipsoliq','clcalipsoun']:
+  try:
+    tmp = f(var)[0,:]
+    lalt40 = True
+  except:
+    pass
+
+
+ltemp = False
+for var in ['clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun']:
+  try:
+    tmp = f(var)[0,:]
+    ltemp = True
+  except:
+    pass
+
+lsza5 = False
+for var in ['parasolRefl']:
+  try:
+    tmp = f(var)[0,:]
+    lsza5 = True
+  except:
+    pass
+
+
+lcolumn = False
+for var in ['boxtauisccp','boxptopisccp','dbze94','atb532','fracout']:
+  try:
+    tmp = f(var)[0,:]
+    ncol = tmp.shape[0]
+    lcolumn=True
+  except:
+    pass	  
+
+ldbze = False
+for var in ['cfadDbze94']:
+  try:
+    tmp = f(var)[0,:,:]
+    ldbze=True
+    lalt40 = True
+  except:
+    pass
+
+lsratio = False
+for var in ['cfadLidarsr532']:
+  try:
+    tmp = f(var)[0,:,:]
+    lsratio=True
+    lalt40 = True
+  except:
+    pass
+
+ltau = False
+lplev7 = False
+for var in ['clisccp','clmodis']:
+  try:
+    tmp = f(var)[0,:,:]
+    ltau=True
+    lplev7=True
+  except:
+    pass
+
+lmisr = False
+for var in ['clMISR']:
+  try:
+    tmp = f(var)[0,:,:]
+    lmisr=True
+  except:
+    pass
+
+levels = MV2.array(range(0,nlev),typecode=MV2.float32)
+levels = cdms2.createAxis(levels)
+levels.designateLevel()
+levels.id = 'level'
+levels.name = 'Full Pressure Level Number'
+levels.units = '-'
+
+levels0 = MV2.array(range(0,nlev+1),typecode=MV2.float32)
+levels0 = cdms2.createAxis(levels0)
+levels0.designateLevel()
+levels0.id = 'Hlevel'
+levels0.name = 'Half Pressure Level Number'
+levels0.units = '-'
+
+if lalt40:
+  alt40 = [240., 720., 1200., 1680., 2160., 2640., 3120., 3600., 4080., 4560., 5040., 5520., 6000., 6480., 6960., 7440., 7920., 8400., 8880., 9360., 9840., 10320., 10800., 11280., 11760., 12240., 12720., 13200., 13680., 14160., 14640., 15120., 15600., 16080., 16560., 17040., 17520., 18000., 18480., 18960.]
+  alt40 = MV2.array(alt40,typecode=MV2.float32)
+  alt40 = cdms2.createAxis(alt40)
+  alt40.designateLevel()
+  alt40.id = 'alt40'
+  alt40.name = 'altitude'
+  alt40.units = 'm'
+
+if ltemp:
+  temp = [-91.5,-88.5,-85.5,-82.5,-79.5,-76.5,-73.5,-70.5,-67.5,-64.5,-61.5,-58.5,-55.5,-52.5,-49.5,-46.5,-43.5,-40.5,-37.5,-34.5,-31.5,-28.5,-25.5,-22.5,-19.5,-16.5,-13.5,-10.5, -7.5, -4.5,-1.5,  1.5,  4.5,  7.5, 10.5, 13.5, 16.5, 19.5, 22.5, 25.5]
+  temp = MV2.array(temp,typecode=MV2.float32)
+  temp = cdms2.createAxis(temp)
+  temp.designateLevel()
+  temp.id = 'temp'
+  temp.name = 'Temperature'
+  temp.units = 'C'
+
+if lsza5:
+  sza5 = [0., 20., 40., 60., 80.]
+  sza5 = MV2.array(sza5,typecode=MV2.float32)
+  sza5 = cdms2.createAxis(sza5)
+  sza5.id = 'sza5'
+  sza5.name = 'Solar Zenith Angle'
+  sza5.units = 'degree'
+
+if lcolumn:
+  column = MV2.array(range(0,ncol),typecode=MV2.float32)
+  column = cdms2.createAxis(column)
+  column.id = 'column'
+  column.name = 'Column'
+  column.units = '-'
+
+if ldbze:
+  dbze = [-47.5, -42.5, -37.5, -32.5, -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5, 12.5, 17.5, 22.5]
+  dbze = MV2.array(dbze,typecode=MV2.float32)
+  dbze = cdms2.createAxis(dbze)
+  dbze.id = 'dbze'
+  dbze.name = 'CloudSat simulator equivalent radar reflectivity factor'
+  dbze.units = 'dBZ'
+
+if lsratio:
+  sratio = [0.005, 0.605, 2.1, 4., 6., 8.5, 12.5, 17.5, 22.5, 27.5, 35., 45., 55., 70., 50040.]
+  sratio = MV2.array(sratio,typecode=MV2.float32)
+  sratio = cdms2.createAxis(sratio)
+  sratio.id = 'scatratio'
+  sratio.name = 'lidar backscattering ratio'
+  sratio.units = '1'
+
+if ltau:
+  tau = [0.15, 0.8, 2.45, 6.5, 16.2, 41.5, 100.]
+  tau = MV2.array(tau,typecode=MV2.float32)
+  tau = cdms2.createAxis(tau)
+  tau.id = 'tau'
+  tau.name = 'cloud optical depth'
+  tau.units = '1'
+
+if lplev7:
+  plev7 = [90000., 74000., 62000., 50000., 37500., 24500., 9000.]
+  plev7 = MV2.array(plev7,typecode=MV2.float32)
+  plev7 = cdms2.createAxis(plev7)
+  plev7.id = 'plev7'
+  plev7.name = 'pressure'
+  plev7.units = 'Pa'
+
+if lmisr:
+  cth16 = [1000.*x for x in [0., 0.25, 0.75, 1.25, 1.75, 2.25, 2.75, 3.5, 4.5, 6., 8., 10., 12., 14.5, 16., 18.]]
+  cth16 = MV2.array(cth16,typecode=MV2.float32)
+  cth16 = cdms2.createAxis(cth16)
+  cth16.id = 'cth16'
+  cth16.name = 'altitude'
+  cth16.units = 'm'
+
+
+g = cdms2.open('Out_klevel.nc','w')
+for var in var2save:
+  if config.verbose >= 1:
+    print var	
+  data = f(varnames[var])
+  data = MV2.array(data, typecode=MV2.float32)
+  if var in ['cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','fracout', 'atb532', 'dbze94','cfadDbze94','cfadLidarsr532','clisccp', 'clmodis','clMISR']:
+    data = MV2.where(data < -0.5e20, 1.e20,data)
+    data = MV2.masked_values(data,1.e20)
+    data.missing_value = 1.e20
+  data.setAxis(0,time)
+  if data.shape == (nt,nlev):
+    data.setAxis(1,levels)
+  if data.shape == (nt,nlev+1):
+    data.setAxis(1,levels0)
+  if var in ['clcalipso','clcalipso2','clcalipsoice','clcalipsoliq','clcalipsoun'] and data.shape == (nt,40):
+    data.setAxis(1,alt40)
+  if var in ['clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun'] and data.shape == (nt,40):
+    data.setAxis(1,temp)
+  if var in ['parasolRefl'] and data.shape == (nt,5):
+    data.setAxis(1,sza5)
+  if var in ['boxtauisccp','boxptopisccp'] and data.shape == (nt,ncol):
+    data.setAxis(1,column)
+
+  if var in ['fracout', 'atb532', 'dbze94']:
+    data.setAxis(1,column)
+    data.setAxis(2,levels)
+  if var in ['cfadDbze94']:
+    data.setAxis(1,dbze)
+    data.setAxis(2,alt40)
+  if var in ['cfadLidarsr532']:
+    data.setAxis(1,sratio)
+    data.setAxis(2,alt40)
+  if var in ['clisccp', 'clmodis']:
+    data.setAxis(1,tau)
+    data.setAxis(2,plev7)
+  if var in ['clMISR']:
+    data.setAxis(1,tau)
+    data.setAxis(2,cth16)
+
+
+  data.id = var
+  if names.has_key(var):
+    data.long_name = names[var]
+    data.units = varunits[var]
+
+#  if var == 'ZFT':
+#    for ilev in range(0,nlev):
+#      data[:,ilev] = data[:,ilev]*(100000./levels[ilev])**(2./7.)
+#    data.id = 'dthdt_ls'
+#    data.long_name = 'Potential temperature tendency from large-scale forcings'
+
+  g.write(data)
+
+g.close()
+f.close()
diff --git a/UTIL/post.old/variables.py b/UTIL/post.old/variables.py
new file mode 100644
index 0000000..d5081b7
--- /dev/null
+++ b/UTIL/post.old/variables.py
@@ -0,0 +1,1570 @@
+#pres et presH joue un role particulier donc doivent etre definies
+varnames = {}
+names = {}
+units = {}
+
+#---------------------------------------------------------------------------------------------------
+#                        Variable in ARPEGE/MUSC
+#---------------------------------------------------------------------------------------------------
+
+# 1. Variables dynamiques et thermodynamiques
+#      pres, presH, zg, zgH, rho, ta, hus, hur, ql, qi, qr, qsn, tke, th, thv, thl, thlv, qsat,
+#      ua, va, wa, wap
+#      qlc, qic, qrc, qsnc, qlshc, qishc, qrshc, qsnshc
+# 2. Variables nuageuses
+#      cl, cls, clt, cltc, cltl, cltm, clth
+# 3. Variables pluies
+#      precls, snowls, precc, snowc, pr, prls, prc, ppr, pprls, pprc    
+# 4. Variables rayonnement
+#      rsdt, rsdtcs, rldt, rldtcs, rsut, rsutcs, rlut, rlutcs, rst, rstcs, rlt, rltcs
+#      rsds, rsdscs, rsus, rsuscs, rlds, rldscs, rlus, rluscs, rss, rsscs, rls, rlscs
+#      SWd, SWu, SWdcs, SWucs, SWnet, LWd, LWu, LWdcs, LWucs, LWnet
+#      mu1, mueff, I0, alb_ss
+# 5. Variables flux de surface
+#      hfss, hfls, hflsn
+#      evap, evapi, evapn
+#      tauu, tauv, ustar
+#      Cd, Ch, Ce, Cdn, Chn, Cen
+#      Ugr
+#      z0, z0h, zref, tsurf, qsurf
+# 6. Variables integrees sur la colonne
+#      prw, lwp, iwp, cwp
+# 7. Variables en surface
+#      tas, huss, hurs, uas, vas, pblh, ts
+# 8.1 Tendances de la physique
+#      Q1, Q2, Qrad
+#      tnthl, tnqt
+#      tntrswn tntrlw, tntrswcs, tntrlwcs, tntpbl, tntlscp, tntc, tntshc, tntd
+#      tnthrswn tnthrlw, tnthrswcs, tnthrlwcs, tnthpbl, tnthlscp, tnthc, tnthshc, tnthd
+#      tnqvpbl, tnqvlscp, tnqvc, tnqvshc, tnqvd
+#      tnupbl, tnuc, tnushc, tnud, tnvpbl, tnvc, tnvshc, tnvd
+#      tnthlrswn tnthlrlw, tnthlrswcs, tnthlrlwcs, tnthlpbl, tnthllscp, tnthlc, tnthlshc, tnthld
+#      tnqtpbl, tnqtlscp, tnqtc, tnqtshc, tnqtd
+#      tnql, tnqi, tnqr, tnqsn
+#      tnqlc, tnqic, tnqrc, tnqsnc
+#      tnqlshc, tnqishc, tnqrshc, tnqsnc
+#      tntcas, tntcs, tntfplcl, tntfplcn, tntfccql, tntfecl, tntfccqn, tntfecn, tntfhimcc
+#      tntfplsl, tntfplsn, tntfcsql, tntfesl, tntfcsqn, tntfesn
+# 8.2 Flux de la physique
+#      wpqp_pbl, wpthp_pbl, wpqp_conv, wpthp_conv, wpqtp_pbl, wpthlp_pbl, wpqtp_conv, wpthlp_conv
+#      wpup_pbl, wpvp_pbl, wpup_conv, wpvp_conv
+# 9. Tendances liees au forcages
+#      tntadv, tntnudg, tnqadv, tnqnudg
+# 10. Divers
+#      Cp, Lv
+# 11. Bilan eau et energie
+#      qflux, qfluxPr, qfluxEv, dwater, efluxTOA, efluxSfc, denergy
+#      RMSE9, RMSE0, RMSE1, RDMSE, msefluxSfc
+#      iQadv, iQnud, iTadv, iTnud, iUadv, iUnud, iVadv, iVnud, iEadv, iEnud
+#      efluxSfcRad, efluxSfcTurb, efluxSfcConv, efluxSfcAdj, efluxSfcPrSen, efluxSfcPrLat
+#      iMSEadv, iMSEnud, iQw, iEw
+# 12. Especes Gazeuses
+#      rCO2, rCH4, rN2O, rNO2, rCFC11, rCFC12, rCFC22, rCCL4, rO3
+# 13. Variables du schema de convection Bougeault 1985
+#      alpha, Mf, Tu, Thu, qvu, qcu
+# 14. Variables du schema PCMT
+#      alpha_up, w_up, omega_up, alpha_dn, w_dn, omega_dn, cape, T_up, qv_up, omega_ref
+#      w_up_bud, dw_buoy, dw_fric, dw_Kd, dw_entr, dw_transp, buoy, Mf, eps_u, eps_u_org, eps_u_tur, entr_u, detr_u, dTv_up
+#      aipcmt, knnd, knlab
+# 15. Variables pour le wake
+#      delta_t, delta_q, d_delta_t_gw, omgb_dth, omgb, dt_KE, dq_KE, dt_PBL, dq_PBL
+#      omg_w, dp_delt_omg, spread_w, delta_th, dt_wake, dq_wake, t_undi, q_undi, 
+#      d_delta_t, d_delta_q,
+#      hw, sigmaw, wake_pe, wake_fip, wake_gfl, Cstar, wdens
+#      dt_dn, dt_up, dq_dn, dq_up, Mf_dn, Mf_up, sigd, omgb
+#      t_undi_pcmt, q_undi_pcmt, t_wake_pcmt, q_wake_pcmt
+#      qw_undi, qw_wake, Tw_wake, Tw_undi, qsat_undi, qsat_wake
+# 16. Variables pour la turbulence
+#      Q11, igs, igs2, igs2turb, igs2conv, sigs, sigs2, sigs2turb, sigs2conv, mlen
+#      Q11min, Q11max, acoef, sigc0, sigc1
+# 17. Variables COSP
+#      frac_out
+#      cltcalipso, cllcalipso, clmcalipso, clhcalipso, clcalipso
+#      cllcalipsoice, clmcalipsoice, clhcalipsoice, cltcalipsoice
+#      cllcalipsoliq, clmcalipsoliq, clhcalipsoliq, cltcalipsoliq
+#      cllcalipsoun, clmcalipsoun, clhcalipsoun, cltcalipsoun
+#      clcalipso, lidarBetaMol532
+#      clcalipsoice, clcalipsoliq, clcalipsoun, 
+#      clcalipsotmp, clcalipsotmpice, clcalipsotmpliq, clcalipsotmpun
+#      parasolRefl
+#      atb532, cfadLidarsr532
+#      dbze94, cfadDbze94
+#      cltlidarradar, clcalipso2
+#      cltisccp, pctisccp, tauisccp, albisccp, meantbisccp, meantbclrisccp, 
+#      boxtauisccp, boxptopisccp
+#      clisccp
+#      cltmodis, clwmodis, climodis, clhmodis, clmmodis, cllmodis
+#      tautmodis, tauwmodis, tauimodis, tautlogmodis, tauwlogmodis, tauilogmodis
+#      reffclwmodis, reffclimodis
+#      pctmodis, lwpmodis, iwpmodis
+#      clmodis
+#      clMISR
+#      COSP input : 
+#      'ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP',
+#      'ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP',
+#      'ZU_COSP','ZV_COSP',
+#      'ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP',
+#      'ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP',
+#      'ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP',
+#      'ZRADLP_COSP','ZRADIP_COSP',
+#      'ZTAUSW_COSP','ZEMILW_COSP'
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+varnames['pres']  = 'PAPRSF'
+varnames['presH'] = 'PAPRS'
+
+varnames['zg']    = 'PAPHIF'
+varnames['zgH']   = 'PAPHI'
+
+varnames['rho']   = 'RHO'
+varnames['ta']    = 'PT'
+varnames['hus']   = 'PQ'
+varnames['hur']   = 'PRH'
+varnames['ql']    = 'PQLI'
+varnames['qi']    = 'PQICE'
+varnames['qr']    = 'PQR'
+varnames['qsn']   = 'PQSN'
+
+varnames['qlc']   = 'PQLCONV'
+varnames['qic']   = 'PQICONV'
+varnames['qrc']   = 'PQRCONV'
+varnames['qsnc']  = 'PQSCONV'
+
+varnames['qlshc'] = 'PQLSHCONV'
+varnames['qishc'] = 'PQISHCONV'
+varnames['qrshc'] = 'PQRSHCONV'
+varnames['qsnshc']= 'PQSSHCONV'
+
+varnames['tke']   = 'PECT'
+
+varnames['th']    = 'THETA'
+varnames['thv']   = 'THETAV'
+varnames['thl']   = 'THETAL'
+varnames['thlv']  = 'THETAVL'
+
+varnames['qsat']  = 'PQSAT'
+
+varnames['ua']    = 'PU'
+varnames['va']    = 'PV'
+varnames['wa']    = 'ZW'
+varnames['wap']   = 'ZOMEGA'
+
+##########################################
+# 2. Variables nuageuses
+
+varnames['cl']    = 'PNEB'
+varnames['cls']   = 'ZNEBS'
+varnames['clt']   = 'PCLCT'
+varnames['cltc']  = 'PCLCC'
+varnames['cltl']  = 'PCLCL'
+varnames['cltm']  = 'PCLCM'
+varnames['clth']  = 'PCLCH'
+
+##########################################
+# 3. Variables pluies
+
+varnames['precls']= 'PFPLSL'
+varnames['snowls']= 'PFPLSN'
+varnames['precc'] = 'PFPLCL'
+varnames['snowc'] = 'PFPLCN'
+
+varnames['pr']    = 'PRECS_TOT'
+varnames['prls']  = 'PRECS_LS'
+varnames['prc']   = 'PRECS_CONV'
+varnames['ppr']   = 'PREC_TOT'
+varnames['pprls'] = 'PREC_LS'
+varnames['pprc']  = 'PREC_C'
+
+##########################################
+# 4. Variables rayonnement
+
+varnames['rsdt']  = 'SW_TOA_dn'
+varnames['rsdtcs']= 'SW_TOA_cs_dn'
+varnames['rldt']  = 'LW_TOA_dn'
+varnames['rldtcs']= 'LW_TOA_cs_dn'
+varnames['rsut']  = 'SW_TOA_up'
+varnames['rsutcs']= 'SW_TOA_cs_up'
+varnames['rlut']  = 'LW_TOA_up'
+varnames['rlutcs']= 'LW_TOA_cs_up'
+varnames['rst']   = 'SW_TOA'
+varnames['rstcs'] = 'SW_TOA_cs'
+varnames['rlt']   = 'LW_TOA'
+varnames['rltcs'] = 'LW_TOA_cs'
+
+varnames['rsds']  = 'SW_Surf_dn'
+varnames['rsdscs']= 'SW_Surf_cs_dn'
+varnames['rsus']  = 'SW_Surf_up'
+varnames['rsuscs']= 'SW_Surf_cs_up'
+varnames['rlds']  = 'LW_Surf_dn'
+varnames['rldscs']= 'LW_Surf_cs_dn'
+varnames['rlus']  = 'LW_Surf_up'
+varnames['rluscs']= 'LW_Surf_cs_up'
+varnames['rss']   = 'SW_Surf'
+varnames['rsscs'] = 'SW_Surf_cs'
+varnames['rls']   = 'LW_Surf'
+varnames['rlscs'] = 'LW_Surf_cs'
+
+varnames['SWd'] = 'SWd'
+varnames['SWu'] = 'SWu'
+varnames['SWdcs'] = 'SWdcs'
+varnames['SWucs'] = 'SWucs'
+varnames['SWnet'] = 'PFRSO'
+
+varnames['LWd'] = 'LWd'
+varnames['LWu'] = 'LWu'
+varnames['LWdcs'] = 'LWdcs'
+varnames['LWucs'] = 'LWucs'
+varnames['LWnet'] = 'PFRTH'
+
+varnames['mu1'] = 'ZMU0'
+varnames['mueff'] = 'ZMU0EFF'
+varnames['I0'] = 'ZI0'
+varnames['daydur'] = 'Day duration'
+
+varnames['alb_ss'] = 'SW_ALB'
+
+##########################################
+# 5. Variables flux de surface
+
+varnames['hfls']  = 'PFCLL'
+varnames['hfss']  = 'PFCS'
+varnames['hflsn'] = 'PFCLN'
+
+varnames['evap'] = 'PFEVL'
+varnames['evapi'] = 'PFEVI'
+varnames['evapn'] = 'PFEVN'
+
+varnames['tauu']  = 'PSFU'
+varnames['tauv']  = 'PSFV'
+varnames['ustar']  = 'ZUSTAR'
+
+varnames['Cd'] = 'ZCD'
+varnames['Ch'] = 'ZCH'
+varnames['Ce'] = 'ZCE'
+
+varnames['Cdn'] = 'ZCDN'
+varnames['Chn'] = 'ZCHN'
+varnames['Cen'] = 'ZCEN'
+
+varnames['Ugr'] = 'UGR'
+
+varnames['z0']  = 'PZ0'
+varnames['z0h']  = 'PZ0H'
+varnames['zref'] = 'PZREF'
+
+varnames['tsurf'] = 'PTSURF'
+varnames['qsurf'] = 'PQSURF'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+varnames['prw']   = 'WVP'
+varnames['lwp']   = 'LWP'
+varnames['iwp']   = 'IWP'
+varnames['cwp']   = 'CWP'
+
+##########################################
+# 7. Variables en surface
+
+varnames['tas']   = 'PTCLS'
+varnames['huss']  = 'PQCLS'
+varnames['hurs']  = 'PRHCLS'
+varnames['uas']   = 'PUCLS'
+varnames['vas']   = 'PVCLS'
+
+varnames['pblh']  = 'HCLA'
+
+varnames['ts']    = 'PTS'
+
+##########################################
+# 8.1 Tendances de la physique
+
+varnames['Q1']    = 'Q1'
+varnames['Q2']    = 'Q2'
+varnames['QRad']  = 'QRad'
+
+varnames['tnth'] = 'TENDTHETA'
+varnames['tnthl'] = 'TENDTHETAL'
+varnames['tnqt']  = 'TENDQT'
+
+varnames['tntrsw']= 'TENDSWT'
+varnames['tntrlw']= 'TENDLWT'
+varnames['tntrswcs']= 'TENDSWTCS'
+varnames['tntrlwcs']= 'TENDLWTCS'
+varnames['tntpbl']= 'TENDTT'
+varnames['tntlscp'] = 'TENDST'
+varnames['tntc']  = 'TENDCT'
+varnames['tntshc']  = 'TENDSHCT'
+varnames['tntd']  = 'TENDMT'
+
+varnames['tnthrsw']= 'TENDSWTH'
+varnames['tnthrlw']= 'TENDLWTH'
+varnames['tnthrswcs']= 'TENDSWTHCS'
+varnames['tnthrlwcs']= 'TENDLWTHCS'
+varnames['tnthpbl']= 'TENDTTH'
+varnames['tnthlscp'] = 'TENDSTH'
+varnames['tnthc']  = 'TENDCTH'
+varnames['tnthshc']  = 'TENDSHCTH'
+varnames['tnthd']  = 'TENDMTH'
+
+varnames['tnqvpbl'] = 'TENDTQ'
+varnames['tnqvlscp'] = 'TENDSQ'
+varnames['tnqvc'] = 'TENDCQ'
+varnames['tnqvshc'] = 'TENDSHCQ'
+varnames['tnqvd'] = 'TENDMQ'
+
+varnames['tnupbl']= 'TENDTU'
+varnames['tnuc']  = 'TENDCU'
+varnames['tnushc']  = 'TENDSHCU'
+varnames['tnud']  = 'TENDMU'
+
+varnames['tnvpbl']= 'TENDTV'
+varnames['tnvc']  = 'TENDCV'
+varnames['tnvshc']  = 'TENDSHCV'
+varnames['tnvd']  = 'TENDMV'
+
+varnames['tnthlrsw']= 'TENDSWTHL'
+varnames['tnthlrlw']= 'TENDLWTHL'
+varnames['tnthlrswcs']= 'TENDSWTHLCS'
+varnames['tnthlrlwcs']= 'TENDLWTHLCS'
+varnames['tnthlpbl'] = 'TENDTTHL'
+varnames['tnthllscp'] = 'TENDSTHL'
+varnames['tnthlc']= 'TENDCTHL'
+varnames['tnthlshc']= 'TENDSHCTHL'
+varnames['tnthld']= 'TENDMTHL'
+
+varnames['tnqtpbl'] = 'TENDTQT'
+varnames['tnqtlscp'] = 'TENDSQT'
+varnames['tnqtc'] = 'TENDCQT'
+varnames['tnqtshc'] = 'TENDSHCQT'
+varnames['tnqtd'] = 'TENDMQT'
+
+varnames['tnql']  = 'TENDQL'
+varnames['tnqi']  = 'TENDQI'
+varnames['tnqr']  = 'TENDQR'
+varnames['tnqsn']  = 'TENDQS'
+
+varnames['tnqlc'] = 'TENDQLCONV'
+varnames['tnqic'] = 'TENDQICONV'
+varnames['tnqrc'] = 'TENDQRCONV'
+varnames['tnqsnc'] = 'TENDQSCONV'
+
+varnames['tnqlshc'] = 'TENDQLSHCONV'
+varnames['tnqishc'] = 'TENDQISHCONV'
+varnames['tnqrshc'] = 'TENDQRSHCONV'
+varnames['tnqsnshc'] = 'TENDQSSHCONV'
+
+varnames['tntcas'] = 'TENDTCAS'
+varnames['tntcs'] = 'TENDTCS'
+varnames['tntfplcl'] = 'TENDTFPLCL'
+varnames['tntfplcn'] = 'TENDTFPLCN'
+varnames['tntfccql'] = 'TENDTFCCQL'
+varnames['tntfecl'] = 'TENDTFECL'
+varnames['tntfccqn'] = 'TENDTFCCQN'
+varnames['tntfecn'] = 'TENDTFECN'
+varnames['tntfhimcc'] = 'TENDTFHIMCC'
+
+varnames['tntfplsl'] = 'TENDTFPLSL'
+varnames['tntfplsn'] = 'TENDTFPLSN'
+varnames['tntfcsql'] = 'TENDTFCSQL'
+varnames['tntfesl'] = 'TENDTFESL'
+varnames['tntfcsqn'] = 'TENDTFCSQN'
+varnames['tntfesn'] = 'TENDTFESN'
+
+
+##########################################
+# 8.2 Flux de la physique
+
+varnames['wpqp_pbl'] = 'WPQP_TU'
+varnames['wpthp_pbl'] = 'WPTHP_TU'
+varnames['wpup_pbl'] = 'WPUP_TU'
+varnames['wpvp_pbl'] = 'WPVP_TU'
+varnames['wpqp_conv'] = 'WPQP_CV'
+varnames['wpthp_conv'] = 'WPTHP_CV'
+varnames['wpup_conv'] = 'WPUP_CV'
+varnames['wpvp_conv'] = 'WPVP_CV'
+varnames['wpqtp_pbl'] = 'ZWPQT_tur'
+varnames['wpthlp_pbl'] = 'WTHL_tur'
+varnames['wpqtp_conv'] = 'ZWPQT_dee'
+varnames['wpthlp_conv'] = 'WTHL_dee'
+
+##########################################
+# 9. Tendances liees au forcages
+
+varnames['tntadv'] = 'ZFT_ADV'
+varnames['tntnudg'] = 'ZFT_NUDG'
+varnames['tnqadv'] = 'ZFQ_ADV'
+varnames['tnqnudg'] = 'ZFQ_NUDG'
+
+##########################################
+# 10. Divers
+
+varnames['Cp'] = 'PCP'
+varnames['Lv'] = 'PLH'
+
+##########################################
+# 11. Bilan eau et energie
+
+varnames['qflux'] = 'WATERFLUX'
+varnames['qfluxEv'] = 'WATERFLUXE'
+varnames['qfluxPr'] = 'WATERFLUXP'
+varnames['dwater'] = 'RDWATER'
+varnames['efluxTOA'] = 'EFLUXTOA'
+varnames['efluxSfc'] = 'EFLUXSFC'
+varnames['denergy'] = 'RDENERGY'
+varnames['RMSE9'] = 'RMSE9'
+varnames['RMSE0'] = 'RMSE0'
+varnames['RMSE1'] = 'RMSE1'
+varnames['RDMSE'] = 'RDMSE'
+varnames['msefluxSfc'] = 'MSEFLUXSFC'
+varnames['iQadv'] = 'TOTFORCQADV'
+varnames['iQnud'] = 'TOTFORCQNUD'
+varnames['iTadv'] = 'TOTFORCTADV'
+varnames['iTnud'] = 'TOTFORCTNUD'
+varnames['iUadv'] = 'TOTFORCUADV'
+varnames['iUnud'] = 'TOTFORCUNUD'
+varnames['iVadv'] = 'TOTFORCVADV'
+varnames['iVnud'] = 'TOTFORCVNUD'
+varnames['iEadv'] = 'TOTFORCEADV'
+varnames['iEnud'] = 'TOTFORCENUD'
+varnames['efluxSfcRad'] = 'EFLUXSFCRAD'
+varnames['efluxSfcTurb'] = 'EFLUXSFCTS'
+varnames['efluxSfcConv'] = 'EFLUXSFCCS'
+varnames['efluxSfcAdj'] = 'EFLUXSFCCAS'
+varnames['efluxSfcPrSen'] = 'EFLUXSFC1'
+varnames['efluxSfcPrLat'] = 'EFLUXSFC2'
+varnames['iMSEadv'] = 'MSEADV'
+varnames['iMSEnud'] = 'MSENUD'
+varnames['iMSEw'] = 'MSEW'
+varnames['iQw'] = 'WATERW'
+varnames['iEw'] = 'ENERGYW'
+
+##########################################
+# 12. Especes Gazeuses
+
+varnames['rCO2'] = 'ZCO2'
+varnames['rCH4'] = 'ZCH4'
+varnames['rN2O'] = 'ZN2O'
+varnames['rNO2'] = 'ZNO2'
+varnames['rCFC11'] = 'ZC11'
+varnames['rCFC12'] = 'ZC12'
+varnames['rCFC22'] = 'ZC22'
+varnames['rCCL4'] = 'ZCL4'
+varnames['rO3'] = 'ZOZN'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+varnames['alpha'] = 'ZALF'
+varnames['Mf'] = 'ZFORM2'
+varnames['Tu'] = 'ZTN'
+varnames['Thu'] = 'ZTHN'
+varnames['qvu'] = 'ZQN'
+varnames['qcu'] = 'ZLN'
+
+##########################################
+# 14. Variables du schema PCMT
+
+varnames['alpha_up'] = 'PUDAL'
+varnames['w_up'] = 'ZUDW' #'ZUDW_ACPCMT' #'PUDW'
+varnames['omega_up'] = 'PUDOM'
+varnames['alpha_dn'] = 'PDDAL'
+varnames['w_dn'] = 'ZDDW' #'ZDDW_ACPCMT' #'PDDW'
+varnames['omega_dn'] = 'PDDOM'
+varnames['cape'] = 'PCAPE'
+varnames['T_up'] = 'PTU'
+varnames['qv_up'] = 'PQU'
+varnames['omega_ref'] = 'ZVVREF'
+varnames['w_up_bud'] = 'BILOM'
+varnames['dw_buoy'] = 'BILOM+TBUOY'
+varnames['dw_fric'] = 'BILOM+TFRIC'
+varnames['dw_Kd'] = 'BILOM+TKD'
+varnames['dw_entr'] = 'BILOM+TENTR'
+varnames['dw_transp'] = 'BILOM+TTRANSP'
+varnames['buoy'] = 'ZBUO_W'
+varnames['Mf'] = 'MF'
+varnames['eps_u'] = 'ZEPSILON_U'
+varnames['eps_u_org'] = 'ZEPS_ORG'
+varnames['eps_u_tur'] = 'ZEPS_TUR'
+varnames['entr_u'] = 'ZENTR_U'
+varnames['detr_u'] = 'ZDETR_U'
+varnames['dTv_up'] = 'TVUD-TVENV'
+varnames['aipcmt'] = 'AIPCMT'
+varnames['knnd'] = 'KNND'
+varnames['knlab'] = 'KNLAB'
+
+##########################################
+# 15. Variables pour le wake
+
+varnames['delta_t'] = 'PWAKEDELTAT'
+varnames['delta_q'] = 'PWAKEDELTAQ'
+varnames['d_delta_t_gw'] = 'PWAKEDDELTATGW'
+varnames['omgb_dth'] = 'PWAKEOMGBDTH'
+varnames['dp_omgb'] = 'PWAKEDPOMGB'
+varnames['dt_KE'] = 'PWAKEDTKE'
+varnames['dq_KE'] = 'PWAKEDQKE'
+varnames['dt_PBL'] = 'PWAKEDTPBL'
+varnames['dq_PBL'] = 'PWAKEDQPBL'
+varnames['omg_w'] = 'PWAKEOMG'
+varnames['dp_delt_omg'] = 'PWAKEDPDELTOMG'
+varnames['spread_w'] = 'PWAKESPREAD'
+varnames['delta_th'] = 'PWAKEDTH'
+varnames['dt_wake'] = 'PDTWAKE'
+varnames['dq_wake'] = 'PDQWAKE'
+varnames['t_undi'] = 'PTUNDI'
+varnames['q_undi'] = 'PQUNDI'
+varnames['d_delta_t'] = 'PWAKEDDELTAT'
+varnames['d_delta_q'] = 'PWAKEDDELTAQ'
+varnames['hw'] = 'PWAKEH'
+varnames['sigmaw'] = 'PWAKES'
+varnames['wake_pe'] = 'PWAKEPE'
+varnames['wake_fip'] = 'PWAKEFIP'
+varnames['wake_gfl'] = 'PWAKEGFL'
+varnames['Cstar'] = 'PWAKECSTAR'
+varnames['wdens'] = 'PWAKEDENS'
+varnames['dt_dn'] = 'ZDTDWN'
+varnames['dt_up'] = 'ZDTA'
+varnames['dq_dn'] = 'ZDQDWN'
+varnames['dq_up'] = 'ZDQA'
+varnames['Mf_dn'] = 'ZMDWN'
+varnames['Mf_up'] = 'ZMUP'
+varnames['sigd'] = 'ZSIGD'
+varnames['omgb'] = 'POMGB'
+varnames['t_undi_pcmt'] = 'ZTUNDI'
+varnames['q_undi_pcmt'] = 'ZQUNDI'
+varnames['t_wake_pcmt'] = 'ZTWAKE'
+varnames['q_wake_pcmt'] = 'ZQWAKE'
+varnames['qw_undi'] = 'ZQWUNDI'
+varnames['qw_wake'] = 'ZQWWAKE'
+varnames['Tw_wake'] = 'ZTWWAKE'
+varnames['Tw_undi'] = 'ZTWUNDI'
+varnames['qsat_undi'] = 'ZQSATUNDI'
+varnames['qsat_wake'] = 'ZQSATWAKE'
+
+##########################################
+# 16. Variables pour la turbulence
+
+varnames['Q11'] = 'ZQ11'
+varnames['Q11min'] = 'ZQ1MIN'
+varnames['Q11max'] = 'ZQ1MAX'
+varnames['igs'] = 'ZIGMAS'
+varnames['igs2'] = 'ZIGMAS2'
+varnames['igs2turb'] = 'ZIGMAS2TURB'
+varnames['igs2conv'] = 'ZIGMAS2CONV'
+varnames['sigs'] = 'ZSIGMAS'
+varnames['sigs2'] = 'ZSIGMAS2'
+varnames['sigs2turb'] = 'ZSIGMAS2TURB'
+varnames['sigs2conv'] = 'ZSIGMAS2CONV'
+varnames['mlen'] = 'ZZLMF'
+varnames['acoef'] = 'ZAA'
+varnames['sigc0'] = 'PSIGCLOUD0'
+varnames['sigc1'] = 'PSIGCLOUD1'
+
+##########################################
+# 17. Variables COSP
+
+for vv in ['cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']:
+  varnames[vv] = vv
+
+for vv in ['ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']:
+  varnames[vv] = vv
+
+#---------------------------------------------------------------------------------------------------
+#                        Long name of variables
+#---------------------------------------------------------------------------------------------------
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+names['pres']  = 'Pressure on Full Levels'
+names['presH'] = 'Pressure on Half Levels'
+
+names['zg']    = 'Geopotential on Full Levels'
+names['zgH']   = 'Geopotential on Half Levels'
+
+names['rho']   = 'Air Volumic Mass'
+names['ta']    = 'Air Temperature'
+names['hus']   = 'Specific Humidity'
+names['hur']   = 'Relative Humidity'
+names['ql']    = 'Specific Mass of Cloud Liquid Water'
+names['qi']    = 'Specific Mass of Cloud Ice Water'
+names['qr']    = 'Specific Mass of Rain'
+names['qsn']   = 'Specific Mass of Snow'
+
+names['qlc']   = 'Specific Mass of Convective Liquid Water'
+names['qic']   = 'Specific Mass of Convective Ice Water'
+names['qrc']   = 'Specific Mass of Convective Rain'
+names['qsnc']  = 'Specific Mass of Convective Snow'
+
+names['qlshc'] = 'Specific Mass of Shallow Convection Liquid Water'
+names['qishc'] = 'Specific Mass of Shallow Convection Ice Water'
+names['qrshc'] = 'Specific Mass of Shallow Convection Rain'
+names['qsnshc']= 'Specific Mass of Shallow Convection Snow'
+
+names['tke']   = 'Turbulent Kinetic Energy'
+
+names['th']    = 'Potential Temperature'
+names['thv']    = 'Virtual Potential Temperature'
+names['thl']    = 'Liquid Potential Temperature'
+names['thlv']    = 'Virtual Potential Temperature'
+
+names['qsat']  = 'Specific Humidity at Saturation'
+
+names['ua']    = 'Zonal Wind'
+names['va']    = 'Meridional Wind'
+names['wa']    = 'Vertical Velocity'
+names['wap']   = 'Vertical Pressure Velocity'
+
+##########################################
+# 2. Variables nuageuses
+
+names['cl']    = 'Cloud Fraction'
+names['cls']   = 'Stratiform Cloud Fraction'
+names['clt']   = 'Total Cloud Fraction'
+names['cltc']  = 'Total Convective Cloud Fraction'
+names['cltl']  = 'Total Low Cloud Fraction'
+names['cltm']  = 'Total Mid Cloud Fraction'
+names['clth']  = 'Total High Cloud Fraction'
+
+##########################################
+# 3. Variables pluies
+
+names['precls']= 'Large-Scale Precipitation Flux'
+names['snowls']= 'Large-Scale Snow Flux'
+names['precc'] = 'Convective Precipitation Flux'
+names['snowc'] = 'Convective Snow Flux'
+
+names['pr']    = 'Surface Precipitation'
+names['prls']  = 'Surface Large-Scale Precipitation'
+names['prc']   = 'Surface Convective Precipitation'
+names['ppr']   = 'Total Precipitation Profile'
+names['pprls'] = 'Large-Scale Precipitation Profile'
+names['pprc']  = 'Convective Precipitation Profile'
+
+##########################################
+# 4. Variables rayonnement
+
+names['rsdt']  = 'Downward SW Radiation at TOA'
+names['rsdtcs']= 'Clear-sky Downward SW Radiation at TOA'
+names['rldt']  = 'Downward LW Radiation at TOA'
+names['rldtcs']= 'Clear-sky Downward LW Radiation at TOA'
+names['rsut']  = 'Upward SW Radiation at TOA'
+names['rsutcs']= 'Clear-sky Upward SW Radiation at TOA'
+names['rlut']  = 'Upward LW Radiation at TOA'
+names['rlutcs']= 'Clear-sky Upward LW Radiation at TOA'
+names['rst']   = 'SW Radiation at TOA'
+names['rstcs'] = 'Clear-sky SW Radiation at TOA'
+names['rlt']   = 'LW Radiation at TOA'
+names['rltcs'] = 'Clear-sky LW Radiation at TOA'
+
+names['rsds']  = 'Downward SW Radiation at Surface'
+names['rsdscs']= 'Clear-sky Downward SW Radiation at Surface'
+names['rsus']  = 'Upward SW Radiation at Surface'
+names['rsuscs']= 'Clear-sky Upward SW Radiation at Surface'
+names['rlds']  = 'Downward LW Radiation at Surface'
+names['rldscs']= 'Clear-sky Downward LW Radiation at Surface'
+names['rlus']  = 'Upward LW Radiation at Surface'
+names['rluscs']= 'Clear-sky Upward LW Radiation at Surface'
+names['rss']   = 'SW Radiation at Surface'
+names['rsscs'] = 'Clear-sky SW Radiation at Surface'
+names['rls']   = 'LW Radiation at Surface'
+names['rlscs'] = 'Clear-sky LW Radiation at Surface'
+
+names['SWd'] = 'Downward SW Flux'
+names['SWu'] = 'Upward SW Flux'
+names['SWdcs'] = 'CS Downward SW Flux'
+names['SWucs'] = 'CS Upward SW Flux'
+names['SWnet'] = 'Net SW Flux'
+
+names['LWd'] = 'Downward LW Flux'
+names['LWu'] = 'Upward LW Flux'
+names['LWdcs'] = 'CS Downward LW Flux'
+names['LWucs'] = 'CS Upward LW Flux'
+names['LWnet'] = 'Net LW Flux'
+
+names['mu1'] = 'Sinus of zenith angle'
+names['mueff'] = 'Sinus of effective zenith angle'
+names['I0'] = 'Solar irradiance'
+names['daydur'] = 'Day duration'
+
+names['alb_ss'] = 'SW Surface Albedo'
+
+##########################################
+# 5. Variables flux de surface
+
+names['hfls']  = 'Surface Latent Heat Flux'
+names['hfss']  = 'Surface Sensible Heat Flux'
+names['hflsn'] = 'Surface Latent Heat Flux over Snow or Ice'
+
+names['evap']  = 'Evaporation over liquid water (or wet soil)'
+names['evapi'] = 'Evaporation over frozen soil'
+names['evapn'] = 'Evaporation over snow (or ice) and frozen soil'
+
+names['tauu']  = 'Surface zonal stress'
+names['tauv']  = 'Surface meridional stress'
+names['ustar']  = 'ustar'
+
+names['Cd'] = 'Surface Exchange Coefficient for Wind'
+names['Ch'] = 'Surface Exchange Coefficient for Heat'
+names['Ce'] = 'Surface Exchange Coefficient for Water Vapor'
+
+names['Cdn'] = 'Surface Exchange Neutral Coefficient for Wind'
+names['Chn'] = 'Surface Exchange Neutral Coefficient for Heat'
+names['Cen'] = 'Surface Exchange Neutral Coefficient for Water Vapor'
+
+names['Ugr'] = 'Wind gustiness due to precipitation'
+
+names['z0']  = 'z0'
+names['z0h']  = 'z0h'
+names['zref'] = 'Altitude of the first atmospheric level'
+
+names['tsurf'] = 'Surface temperature (SST)'
+names['qsurf'] = 'Surface saturated specific humidity (qsat(SST))'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+names['prw']   = 'Precipitable Water'
+names['lwp']   = 'Liquid Water Path'
+names['iwp']   = 'Ice Water Path'
+names['cwp']   = 'Cloud Water Path'
+
+##########################################
+# 7. Variables en surface
+
+names['tas']   = '2-meter Air Temperature'
+names['huss']  = '2-meter Specific Humidity'
+names['hurs']  = '2-meter Relative Humidity'
+names['uas']   = '10-meter Zonal Wind'
+names['vas']   = '10-meter Meridional Wind'
+
+names['pblh']  = 'Planetary Boundary Layer Height'
+
+names['ts']    = 'Surface Temperature'
+
+##########################################
+# 8.1 Tendances de la physique
+
+names['Q1']    = 'Apparent Heat Source'
+names['Q2']    = 'Apparent Moisture Sink'
+names['QRad']  = 'Radiative Heating Rate'
+
+names['tnthl'] = 'Liquid Potential Temperature Tendency due to Physics'
+names['tnqt'] = 'Total Water Tendency due to Physics'
+
+names['tntrsw'] = 'Temperature Tendency due to SW Radiation'
+names['tntrlw'] = 'Temperature Tendency due to LW Radiation'
+names['tntrswcs'] = 'Temperature Tendency due to Clear-sky SW Radiation'
+names['tntrlwcs'] = 'Temperature Tendency due to Clear-sky LW Radiation'
+names['tntpbl'] = 'Temperature Tendency due to Turbulence'
+names['tntlscp'] = 'Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tntc'] = 'Temperature Tendency due to Convection'
+names['tntshc'] = 'Temperature Tendency due to Shallow Convection'
+names['tntd'] = 'Temperature Tendency due to Other Processes'
+
+names['tnthrsw'] = 'Potential Temperature Tendency due to SW Radiation'
+names['tnthrlw'] = 'Potential Temperature Tendency due to LW Radiation'
+names['tnthrswcs'] = 'Potential Temperature Tendency due to Clear-sky SW Radiation'
+names['tnthrlwcs'] = 'Potential Temperature Tendency due to Clear-sky LW Radiation'
+names['tnthpbl'] = 'Potential Temperature Tendency due to Turbulence'
+names['tnthlscp'] = 'Potential Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tnthc'] = 'Potential Temperature Tendency due to Convection'
+names['tnthshc'] = 'Potential Temperature Tendency due to Shallow Convection'
+names['tnthd'] = 'Potential Temperature Tendency due to Other Processes'
+
+names['tnqvpbl'] = 'Specific Humidity Tendency due to Turbulence'
+names['tnqvlscp'] = 'Specific Humidity Tendency due to Large-scale Condensation and Precipitation'
+names['tnqvc'] = 'Specific Humidity Tendency due to Convection'
+names['tnqvshc'] = 'Specific Humidity Tendency due to Shallow Convection'
+names['tnqvd'] = 'Specific Humidity Tendency due to Other Processes'
+
+names['tnupbl'] = 'Zonal Wind Tendency due to Turbulence'
+names['tnuc'] = 'Zonal Wind Tendency due to Convection'
+names['tnushc'] = 'Zonal Wind Tendency due to Shallow Convection'
+names['tnud'] = 'Zonal Wind Tendency due to Other Processes'
+
+names['tnvpbl'] = 'Meridional Wind Tendency due to Turbulence'
+names['tnvc'] = 'Meridional Wind Tendency due to Convection'
+names['tnvshc'] = 'Meridional Wind Tendency due to Shallow Convection'
+names['tnvd'] = 'Meridional Wind Tendency due to Other Processes'
+
+names['tnthlrsw'] = 'Liquid Potential Temperature Tendency due to SW Radiation'
+names['tnthlrlw'] = 'Liquid Potential Temperature Tendency due to LW Radiation'
+names['tnthlrswcs'] = 'Liquid Potential Temperature Tendency due to Clear-sky SW Radiation'
+names['tnthlrlwcs'] = 'Liquid Potential Temperature Tendency due to Clear-sky LW Radiation'
+names['tnthlpbl'] = 'Liquid Potential Temperature Tendency due to Turbulence'
+names['tnthllscp'] = 'Liquid Potential Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tnthlc'] = 'Liquid Potential Temperature Tendency due to Convection'
+names['tnthlshc'] = 'Liquid Potential Temperature Tendency due to Shallow Convection'
+names['tnthld'] = 'Liquid Potential Temperature Tendency due to Other Processes'
+
+names['tnqtpbl'] = 'Total Water Tendency due to Turbulence'
+names['tnqtlscp'] = 'Total Water Tendency due to Large-scale Condensation and Precipitation'
+names['tnqtc'] = 'Total Water Tendency due to Convection'
+names['tnqtshc'] = 'Total Water Tendency due to Shallow Convection'
+names['tnqtd'] = 'Total Water Tendency due to Other Processes'
+
+names['tnql'] = 'Liquid Water Tendency due to Physics'
+names['tnqi'] = 'Ice Water Tendency due to Physics'
+names['tnqr'] = 'Rain Tendency due to Physics'
+names['tnqsn'] = 'Snow Tendency due to Physics'
+
+names['tnqlc'] = 'Convective Liquid Water Tendency due to Physics'
+names['tnqic'] = 'Convective Ice Water Tendency due to Physics'
+names['tnqrc'] = 'Convective Rain Tendency due to Physics'
+names['tnqsnc'] = 'Convective Snow Tendency due to Physics'
+
+names['tnqlshc'] = 'Shallow Convection Liquid Water Tendency due to Physics'
+names['tnqishc'] = 'Shallow Convection Ice Water Tendency due to Physics'
+names['tnqrshc'] = 'Shallow Convection Rain Tendency due to Physics'
+names['tnqsnshc'] = 'Shallow Convection Snow Tendency due to Physics'
+
+names['tntcas'] = 'Temperature Tendency due to Dry Convective Adjustment'
+names['tntcs'] = 'Temperature Tendency due to Convective Eddies'
+names['tntfplcl'] = 'Temperature Tendency due to Convective Liquid Precipitation'
+names['tntfplcn'] = 'Temperature Tendency due to Convective Solid Precipitation'
+names['tntfccql'] = 'Temperature Tendency due to Convective Liquid Precipitation Generation'
+names['tntfecl'] = 'Temperature Tendency due to Convective Liquid Precipitation Evaporation'
+names['tntfccqn'] = 'Temperature Tendency due to Convective Solid Precipitation Generation'
+names['tntfecn'] = 'Temperature Tendency due to Convective Solid Precipitation Evaporation'
+names['tntfhimcc'] = 'Temperature Tendency due to Convective Melting/Icing'
+
+names['tntfplsl'] = 'Temperature Tendency due to Stratiform Liquid Precipitation'
+names['tntfplsn'] = 'Temperature Tendency due to Stratiform Solid Precipitation'
+names['tntfcsql'] = 'Temperature Tendency due to Stratiform Liquid Precipitation Generation'
+names['tntfesl'] = 'Temperature Tendency due to Stratiform Liquid Precipitation Evaporation'
+names['tntfcsqn'] = 'Temperature Tendency due to Stratiform Solid Precipitation Generation'
+names['tntfesn'] = 'Temperature Tendency due to Stratiform Solid Precipitation Evaporation'
+
+##########################################
+# 8.2 Flux de la physique
+
+names['wpqp_pbl'] = 'Water Vapor Water Flux due to Turbulence'
+names['wpthp_pbl'] = 'Potential Temperature Flux due to Turbulence'
+names['wpup_pbl'] = 'Zonal Wind Flux due to Turbulence'
+names['wpvp_pbl'] = 'Meridional Wind Flux due to Turbulenve'
+names['wpqp_conv'] = 'Water Vapor Water Flux due to Convection'
+names['wpthp_conv'] = 'Potential Temperature Flux due to Convection'
+names['wpup_conv'] = 'Zonal Wind Flux due to Convection'
+names['wpvp_conv'] = 'Meridional Wind Flux due to Convection'
+names['wpqtp_pbl'] = 'Total Water Flux due to Turbulence'
+names['wpthlp_pbl'] = 'Liquid Potential Temperature Flux due to Turbulence'
+names['wpqtp_conv'] = 'Total Water flux due to Convection'
+names['wpthlp_conv'] = 'Liquid Potential Temperature Flux due to Convection'
+
+##########################################
+# 9. Tendances liees au forcages
+
+names['tntadv'] = 'Temperature Tendency due to Horizontal Advection'
+names['tntnudg'] = 'Temperature Tendency due to Nudging'
+names['tnqadv'] = 'Specific Humidity Tendency due to Horizontal Advection'
+names['tnqnudg'] = 'Specific Humidity Tendency due to Nudging'
+
+##########################################
+# 10. Divers
+
+names['Cp'] = 'Heat Capacity of Air'
+names['Lv'] = 'Latent Heat of Vaporization'
+
+##########################################
+# 11. Bilan eau et energie
+
+names['qflux'] = 'Net Flux of water in the atmosphere'
+names['qfluxPr'] = 'Net Flux of water at Surface due to Precipitation'
+names['qfluxEv'] = 'Net Flux of water at Surface due to Evaporation'
+names['dwater'] = 'RDWATER'
+names['efluxTOA'] = 'Net Enthalpy Flux at TOA'
+names['efluxSfc'] = 'Net Enthalpy Flux at Surface'
+names['denergy'] = 'RDENERGY'
+
+names['RMSE9'] = 'RMSE9'
+names['RMSE0'] = 'RMSE0'
+names['RMSE1'] = 'RMSE1'
+names['RDMSE'] = 'RDMSE'
+names['msefluxSfc'] = 'Net Moist Static Energy Flux at Surface'
+names['iQadv'] = 'Horizontal Advection of moisture integrated over the atmospheric column'
+names['iQnud'] = 'Moisture Tendency due to nudging integrated over the atmospheric column'
+names['iTadv'] = 'Horizontal Advection of temperature integrated over the atmospheric column'
+names['iTnud'] = 'Temperature Tendency due to nudging integrated over the atmospheric column'
+names['iUadv'] = 'Horizontal Advection of zonal wind integrated over the atmospheric column'
+names['iUnud'] = 'Zonal Wind Tendency due to nudging integrated over the atmospheric column'
+names['iVadv'] = 'Horizontal Advection of meridional wind integrated over the atmospheric column'
+names['iVnud'] = 'Meridional Wind Tendency due to nudging integrated over the atmospheric column'
+names['iEadv'] = 'Horizontal Advection of enthalpy integrated over the atmospheric column'
+names['iEnud'] = 'Enthalpy Tendency due to nudging integrated over the atmospheric column'
+
+names['efluxSfcRad'] = 'Surface Enthalpy Flux due to radiation'
+names['efluxSfcTurb'] = 'Surface Enthalpy Flux due to turbulence'
+names['efluxSfcConv'] = 'Surface Enthalpy Flux due to convective eddies'
+names['efluxSfcAdj'] = 'Surface Enthalpy Flux due to dry adjustment'
+names['efluxSfcPrSen'] = 'Surface Enthalpy Flux due to sensible heat of precipitation'
+names['efluxSfcPrLat'] = 'Surface Enthalpy Flux due to latent heat of precipitation'
+names['iMSEadv'] = 'Horizontal Advection of moist static energy integrated over the atmospheric column'
+names['iMSEnud'] = 'Moist Static Energy Tendency due to nudging integrated over the atmospheric column'
+names['iMSEw'] = 'Vertical Advection of moist static energy integrated over the atmospheric column'
+names['iQw'] = 'Vertical Advection of specific humidity integrated over the atmospheric column'
+names['iEw'] = 'Vertical Advection of enthalpy integrated over the atmospheric column'
+
+##########################################
+# 12. Especes Gazeuses
+
+names['rCO2'] = 'CO2 Mixing Ratio'
+names['rCH4'] = 'CH4 Mixing Ratio'
+names['rN2O'] = 'N2O Mixing Ratio'
+names['rNO2'] = 'NO2 Mixing Ratio'
+names['rCFC11'] = 'CFC11 Mixing Ratio'
+names['rCFC12'] = 'CFC12 Mixing Ratio'
+names['rCFC22'] = 'CFC22 Mixing Ratio'
+names['rCCL4'] = 'CCL4 Mixing Ratio'
+names['rO3'] = 'O3 Mixing Ratio'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+names['alpha'] = 'Closure coefficient'
+names['Mf'] = 'Mass Flux'
+names['Tu'] = 'Updraft Temperature'
+names['Thu'] = 'Updraft Potential Temperature'
+names['qvu'] = 'Updraft Specific Humidity'
+names['qcu'] = 'Updraft Condensed Water'
+
+##########################################
+# 14. Variables du schema PCMT
+
+names['alpha_up'] = 'Convective Updraft Fraction'
+names['w_up'] = 'Convective Updraft Velocity'
+names['omega_up'] = 'Convective Updraft Pressure Velocity'
+names['alpha_dn'] = 'Convective Downdraft Fraction'
+names['w_dn'] = 'Convective Downdraft Velocity'
+names['omega_dn'] = 'Convective Downdraft Pressure Velocity'
+names['cape'] = 'CAPE'
+names['T_up'] = 'Convective Updraft Temperature'
+names['qv_up'] = 'Convective Updraft Specific Humidity'
+names['omega_ref'] = 'Reference Vertical Velocity'
+names['w_up_bud'] = 'Updraft Vertical Velocity used in Budget Equation'
+names['dw_buoy'] = 'Updraft Vertical Velocity Tendency due to Vertical Buoyancy'
+names['dw_fric'] = 'Updraft Vertical Velocity Tendency due to Friction'
+names['dw_Kd'] = 'Updraft Vertical Velocity Tendency due to Aerodynamic Drag'
+names['dw_entr'] = 'Updraft Vertical Velocity Tendency due to Entrainment'
+names['dw_transp'] = 'Updraft Vertical Velocity Tendency due to Vertical Transport'
+names['buoy'] = 'Convection Buoyancy used in Updraft Vertical Velocity Budget'
+names['Mf'] = 'Convective Mass Flux'
+names['eps_u'] = 'Fractional Convective Updraft Entrainment'
+names['eps_u_org'] = 'Fractional Organised Convective Updraft Entrainment'
+names['eps_u_tur'] = 'Fractional Turbulent Convective Updraft Entrainment'
+names['entr_u'] = 'Convective Updraft Entrainment'
+names['detr_u'] = 'Convective Updraft Detrainment'
+names['dTv_up'] = 'Tv_updraft-Tv_env'
+names['aipcmt'] = 'Activity index of PCMT'
+names['knnd'] = 'KNND'
+names['knlab'] = 'KNLAB'
+
+##########################################
+# 15. Variables pour le wake
+
+names['delta_t'] = 'delta T'
+names['delta_q'] = 'delta q'
+names['d_delta_t_gw'] = ' delta T tendency due to GW'
+names['omgb_dth'] = 'flux of delta_theta transported by LS omega'
+names['dp_omgb'] = 'vertical gradient of large scale omega'
+names['dt_KE'] = 'differential heating (wake-unperturbed) CONV'
+names['dq_KE'] = 'differential moistening (wake-unperturbed) CONV'
+names['dt_PBL'] = 'differential heating (wake-unperturbed) PBL'
+names['dq_PBL'] = 'differential moistening (wake-unperturbed) PBL'
+names['omg_w'] = 'Wake verticale velocity'
+names['dp_delt_omg'] = 'vertical gradient of wake_omg'
+names['spread_w'] = 'Spreading term in wake_delt'
+names['delta_th'] = 'Potential Temperature Difference'
+names['dt_wake'] = 'T tendency due to wake'
+names['dq_wake'] = 'q tendency due to wake'
+names['t_undi'] = 'Temperature in unperturbed area'
+names['q_undi'] = 'Specific humidity in unperturbed area'
+names['d_delta_t'] = 'delta T tendency'
+names['d_delta_q'] = 'delta q tendency'
+names['hw'] = 'Wake depth'
+names['sigmaw'] = 'wake fractional area'
+names['wake_pe'] = 'Wake Potential Energy (WAPE)'
+names['wake_fip'] = 'wake ALP'
+names['wake_gfl'] = 'Wake Gust Front Length'
+names['Cstar'] = 'Wake spreading velocity'
+names['wdens'] = 'Wake density'
+names['dt_dn'] = 'T tendendy due to downdrafts'
+names['dt_up'] = 'T tendency due to updrafts'
+names['dq_dn'] = 'qv tendendy due to downdrafts'
+names['dq_up'] = 'qv tendency due to updrafts'
+names['Mf_dn'] = 'Downdraft Mass flux'
+names['Mf_up'] = 'Updraft Mass flux'
+names['sigd'] = 'Downdraft area fraction'
+names['omgb'] = 'LS Vertical Velocity'
+names['t_undi_pcmt'] = 'Temperature in undisturbed area (PCMT)'
+names['q_undi_pcmt'] = 'Specific Humidity in undisturbed area (PCMT)'
+names['t_wake_pcmt'] = 'Temperature in wake (PCMT)'
+names['q_wake_pcmt'] = 'Specific Humidity in wake (PCMT)'
+names['qw_undi'] = 'Wet-bulb Specific Humidity in undisturbed area'
+names['qw_wake'] = 'Wet-bulb Specific Humidity in wake'
+names['Tw_wake'] = 'Wet-bulb Temperature in wake'
+names['Tw_undi'] = 'Wet-bulb Temperature in undisturbed area'
+names['qsat_undi'] = 'Saturation Specific Humidity in undisturbed area'
+names['qsat_wake'] = 'Saturation Specific Humidity in wake'
+
+##########################################
+# 16. Variables pour la turbulence
+
+names['Q11'] = 'Normalized saturation deficit'
+names['Q11min'] = 'Minimum Normalized saturation deficit'
+names['Q11max'] = 'Maximum Normalized saturation deficit'
+names['igs'] = 'Subgrid Standard Deviation of s'
+names['igs2'] = 'Subgrid Variance of s'
+names['igs2conv'] = 'Convective Subgrid Variance of s'
+names['igs2turb'] = 'Turbulent Subgrid Variance of s'
+names['sigs'] = 'Subgrid Standard Deviation of s (LNEBECT)'
+names['sigs2'] = 'Subgrid Variance of s (LNEBECT)'
+names['sigs2conv'] = 'Convective Subgrid Variance of s (LNEBECT)'
+names['sigs2turb'] = 'Turbulent Subgrid Variance of s (LNEBECT)'
+names['mlen'] = 'Mixing Length*g'
+names['acoef'] = 'a Coefficient'
+names['sigc0'] = 'PSIGCLOUD0'
+names['sigc1'] = 'PSIGCLOUD1'
+
+##########################################
+# 17. Variables COSP
+
+for vv in ['cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']:
+  names[vv] = vv
+
+for vv in ['ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']:
+  names[vv] = vv	
+
+#---------------------------------------------------------------------------------------------------
+#                        Units
+#---------------------------------------------------------------------------------------------------
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+units['pres']  = 'Pa'
+units['presH'] = 'Pa'
+
+units['zg']    = 'm2/s2'
+units['zgH']   = 'm2/s2'
+
+units['rho']   = 'kg/m3'
+units['ta']    = 'K'
+units['hus']   = 'kg/kg'
+units['hur']   = '-'
+units['ql']    = 'kg/kg'
+units['qi']    = 'kg/kg'
+units['qr']    = 'kg/kg'
+units['qsn']   = 'kg/kg'
+
+units['qlc']   = 'kg/kg'
+units['qic']   = 'kg/kg'
+units['qrc']   = 'kg/kg'
+units['qsnc']  = 'kg/kg'
+
+units['qlshc'] = 'kg/kg'
+units['qishc'] = 'kg/kg'
+units['qrshc'] = 'kg/kg'
+units['qsnshc']= 'kg/kg'
+
+
+units['tke']   = 'm2/s2'
+
+units['th']    = 'K'
+units['thv']    = 'K'
+units['thl']    = 'K'
+units['thlv']    = 'K'
+
+units['qsat']  = 'kg/kg'
+
+units['ua']    = 'm/s'
+units['va']    = 'm/s'
+units['wa']    = 'm/s'
+units['wap']   = 'Pa/s'
+
+##########################################
+# 2. Variables nuageuses
+
+units['cl']    = '-'
+units['cls']   = '-'
+units['clt']   = '-'
+units['cltc']  = '-'
+units['cltl']  = '-'
+units['cltm']  = '-'
+units['clth']  = '-'
+
+##########################################
+# 3. Variables pluies
+
+units['precls']= 'kg/m2/s'
+units['snowls']= 'kg/m2/s'
+units['precc'] = 'kg/m2/s'
+units['snowc'] = 'kg/m2/s'
+
+units['pr']  = 'kg/m2/s'
+units['prls']  = 'kg/m2/s'
+units['prc']  = 'kg/m2/s'
+units['ppr'] = 'kg/m2/s'
+units['pprls'] = 'kg/m2/s'
+units['pprc'] = 'kg/m2/s'
+
+##########################################
+# 4. Variables rayonnement
+
+units['rsdt']  = 'W/m2'
+units['rsdtcs']= 'W/m2'
+units['rldt']  = 'W/m2'
+units['rldtcs']= 'W/m2'
+units['rsut']  = 'W/m2'
+units['rsutcs']= 'W/m2'
+units['rlut']  = 'W/m2'
+units['rlutcs']= 'W/m2'
+units['rst']   = 'W/m2'
+units['rstcs'] = 'W/m2'
+units['rlt']   = 'W/m2'
+units['rltcs'] = 'W/m2'
+
+units['rsds']  = 'W/m2'
+units['rsdscs']= 'W/m2'
+units['rsus']  = 'W/m2'
+units['rsuscs']= 'W/m2'
+units['rlds']  = 'W/m2'
+units['rldscs']= 'W/m2'
+units['rlus']  = 'W/m2'
+units['rluscs']= 'W/m2'
+units['rss']   = 'W/m2'
+units['rsscs'] = 'W/m2'
+units['rls']   = 'W/m2'
+units['rlscs'] = 'W/m2'
+
+units['SWd'] = 'W/m2'
+units['SWu'] = 'W/m2'
+units['SWdcs'] = 'W/m2'
+units['SWucs'] = 'W/m2'
+units['SWnet'] = 'W/m2'
+
+units['LWd'] = 'W/m2'
+units['LWu'] = 'W/m2'
+units['LWdcs'] = 'W/m2'
+units['LWucs'] = 'W/m2'
+units['LWnet'] = 'W/m2'
+
+units['mu1'] = '-'
+units['mueff'] = '-'
+units['I0'] = 'W/m2'
+units['daydur'] = 's'
+
+units['alb_ss'] = '-'
+
+##########################################
+# 5. Variables flux de surface
+
+units['hfls']  = 'W/m2'
+units['hfss']  = 'W/m2'
+units['hflsn'] = 'W/m2'
+
+units['evap'] = 'kg/m2/s'
+units['evapi'] = 'kg/m2/s'
+units['evapn'] = 'kg/m2/s'
+
+units['tauu']  = 'kg m-1 s-2'
+units['tauv']  = 'kg m-1 s-2'
+units['ustar']  = 'm/s'
+
+units['Cd'] = '-'
+units['Ch'] = '-'
+units['Ce'] = '-'
+
+units['Cdn'] = '-'
+units['Chn'] = '-'
+units['Cen'] = '-'
+
+units['Ugr'] = 'm/s'
+
+units['z0']  = 'm'
+units['z0h']  = 'm'
+units['zref'] = 'm'
+
+units['tsurf'] = 'K'
+units['qsurf'] = 'kg/kg'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+units['prw']   = 'kg/m2'
+units['lwp']   = 'kg/m2'
+units['iwp']   = 'kg/m2'
+units['cwp']   = 'kg/m2'
+
+##########################################
+# 7. Variables en surface
+
+units['tas']   = 'K'
+units['huss']  = 'kg/kg'
+units['hurs']  = '-'
+units['uas']   = 'm/s'
+units['vas']   = 'm/s'
+
+units['pblh']  = 'm'
+
+units['ts']    = 'K'
+
+##########################################
+# 8.1 Tendances de la physique
+
+units['Q1']    = 'K/s'
+units['Q2']    = 'K/s'
+units['QRad']  = 'K/s'
+
+units['tnthl'] = 'K/s'
+units['tnqt'] = 'kg/kg/s'
+
+units['tntrsw'] = 'K/s'
+units['tntrlw'] = 'K/s'
+units['tntrswcs'] = 'K/s'
+units['tntrlwcs'] = 'K/s'
+units['tntpbl'] = 'K/s'
+units['tntlscp'] = 'K/s'
+units['tntc'] = 'K/s'
+units['tntshc'] = 'K/s'
+units['tntd'] = 'K/s'
+
+units['tnthrsw'] = 'K/s'
+units['tnthrlw'] = 'K/s'
+units['tnthrswcs'] = 'K/s'
+units['tnthrlwcs'] = 'K/s'
+units['tnthpbl'] = 'K/s'
+units['tnthlscp'] = 'K/s'
+units['tnthc'] = 'K/s'
+units['tnthshc'] = 'K/s'
+units['tnthd'] = 'K/s'
+
+units['tnqvpbl'] = 'kg/kg/s'
+units['tnqvlscp'] = 'kg/kg/s'
+units['tnqvc'] = 'kg/kg/s'
+units['tnqvshc'] = 'kg/kg/s'
+units['tnqvd'] = 'kg/kg/s'
+
+units['tnupbl'] = 'm/s2'
+units['tnuc'] = 'm/s2'
+units['tnushc'] = 'm/s2'
+units['tnud'] = 'm/s2'
+
+units['tnvpbl'] = 'm/s2'
+units['tnvc'] = 'm/s2'
+units['tnvshc'] = 'm/s2'
+units['tnvd'] = 'm/s2'
+
+units['tnthlrsw'] = 'K/s'
+units['tnthlrlw'] = 'K/s'
+units['tnthlrswcs'] = 'K/s'
+units['tnthlrlwcs'] = 'K/s'
+units['tnthlpbl'] = 'K/s'
+units['tnthllscp'] = 'K/s'
+units['tnthlc'] = 'K/s'
+units['tnthlshc'] = 'K/s'
+units['tnthld'] = 'K/s'
+
+units['tnqtpbl'] = 'kg/kg/s'
+units['tnqtlscp'] = 'kg/kg/s'
+units['tnqtc'] = 'kg/kg/s'
+units['tnqtshc'] = 'kg/kg/s'
+units['tnqtd'] = 'kg/kg/s'
+
+units['tnql'] = 'kg/kg/s'
+units['tnqi'] = 'kg/kg/s'
+units['tnqr'] = 'kg/kg/s'
+units['tnqsn'] = 'kg/kg/s'
+
+units['tnqlc'] = 'kg/kg/s'
+units['tnqic'] = 'kg/kg/s'
+units['tnqrc'] = 'kg/kg/s'
+units['tnqsnc'] = 'kg/kg/s'
+
+units['tnqlshc'] = 'kg/kg/s'
+units['tnqishc'] = 'kg/kg/s'
+units['tnqrshc'] = 'kg/kg/s'
+units['tnqsnshc'] = 'kg/kg/s'
+
+units['tntcas'] = 'K/s'
+units['tntcs'] = 'K/s'
+units['tntfplcl'] = 'K/s'
+units['tntfplcn'] = 'K/s'
+units['tntfccql'] = 'K/s'
+units['tntfecl'] = 'K/s'
+units['tntfccqn'] = 'K/s'
+units['tntfecn'] = 'K/s'
+units['tntfhimcc'] = 'K/s'
+
+units['tntfplsl'] = 'K/s'
+units['tntfplsn'] = 'K/s'
+units['tntfcsql'] = 'K/s'
+units['tntfesl'] = 'K/s'
+units['tntfcsqn'] = 'K/s'
+units['tntfesn'] = 'K/s'
+
+
+##########################################
+# 8.2 Flux de la physique
+
+units['wpqp_pbl'] = 'kg kg-1 m s-1'
+units['wpthp_pbl'] = 'K m s-1'
+units['wpup_pbl'] = 'm2 s-2'
+units['wpvp_pbl'] = 'm2 s-2'
+units['wpqp_conv'] = 'kg kg-1 m s-1'
+units['wpthp_conv'] = 'K m s-1'
+units['wpup_conv'] = 'm2 s-2'
+units['wpvp_conv'] = 'm2 s-2'
+units['wpqtp_pbl'] = 'kg kg-1 m s-1'
+units['wpthlp_pbl'] = 'K m s-1'
+units['wpqtp_conv'] = 'kg kg-1 m s-1'
+units['wpthlp_conv'] = 'K m s-1'
+
+##########################################
+# 9. Tendances liees au forcages
+
+units['tntadv'] = 'K/s'
+units['tntnudg'] = 'K/s'
+units['tnqadv'] = 'kg/kg/s'
+units['tnqnudg'] = 'kg/kg/s'
+
+##########################################
+# 10. Divers
+
+units['Cp'] = 'J/K/kg'
+units['Lv'] = 'J/kg'
+
+##########################################
+# 11. Bilan eau et energie
+
+units['qflux'] = 'kg/m2/s'
+units['qfluxPr'] = 'kg/m2/s'
+units['qfluxEv'] = 'kg/m2/s'
+units['dwater'] = 'kg/m2'
+units['efluxTOA'] = 'W/m2'
+units['efluxSfc'] = 'W/m2'
+units['denergy'] = 'J/kg'
+
+units['RMSE9'] = '-'
+units['RMSE0'] = '-'
+units['RMSE1'] = '-'
+units['RDMSE'] = '-'
+units['msefluxSfc'] = 'W/m2'
+units['iQadv'] = 'kg/m2/s'
+units['iQnud'] = 'kg/m2/s'
+units['iTadv'] = 'K kg/m2/s'
+units['iTnud'] = 'K kg/m2/s'
+units['iUadv'] = 'm2/s2'
+units['iUnud'] = 'm2/s2'
+units['iVadv'] = 'm2/s2'
+units['iVnud'] = 'm2/s2'
+units['iEadv'] = 'W/m2'
+units['iEnud'] = 'W/m2'
+
+units['efluxSfcRad'] = 'W/m2'
+units['efluxSfcTurb'] = 'W/m2'
+units['efluxSfcConv'] = 'W/m2'
+units['efluxSfcAdj'] = 'W/m2'
+units['efluxSfcPrSen'] = 'W/m2'
+units['efluxSfcPrLat'] = 'W/m2'
+
+units['iMSEadv'] = 'W/m2'
+units['iMSEnud'] = 'W/m2'
+units['iMSEw'] = 'W/m2'
+units['iQw'] = 'kg/m2/s'
+units['iEw'] = 'W/m2'
+
+##########################################
+# 12. Especes Gazeuses
+
+units['rCO2'] = 'kg/kg'
+units['rCH4'] = 'kg/kg'
+units['rN2O'] = 'kg/kg'
+units['rNO2'] = 'kg/kg'
+units['rCFC11'] = 'kg/kg'
+units['rCFC12'] = 'kg/kg'
+units['rCFC22'] = 'kg/kg'
+units['rCCL4'] = 'kg/kg'
+units['rO3'] = 'kg/kg'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+units['alpha'] = '-'
+units['Mf'] = 'kg/m2/s'
+units['Tu'] = 'K'
+units['Thu'] = 'K'
+units['qvu'] = 'kg/kg'
+units['qcu'] = 'kg/kg'
+
+##########################################
+# 14. Variables du schema PCMT
+
+units['alpha_up'] = '-'
+units['w_up'] = 'm/s'
+units['omega_up'] = 'Pa/s'
+units['alpha_dn'] = '-'
+units['w_dn'] = 'm/s'
+units['omega_dn'] = 'Pa/s'
+units['cape'] = 'J/kg'
+units['T_up'] = 'K'
+units['qv_up'] = 'kg/kg'
+units['omega_ref'] = 'Pa/s'
+units['w_up_bud'] = 'Pa s-1'
+units['dw_buoy'] = 'Pa s-2'
+units['dw_fric'] = 'Pa s-2'
+units['dw_Kd'] = 'Pa s-2'
+units['dw_entr'] = 'Pa s-2'
+units['dw_transp'] = 'Pa s-2'
+units['buoy'] = 'm s-2'
+units['Mf'] = 'kg m-2 s-1'
+units['eps_u'] = 'm-1'
+units['eps_u_org'] = 'm-1'
+units['eps_u_tur'] = 'm-1'
+units['entr_u'] = 's-1'
+units['detr_u'] = 's-1'
+units['dTv_up'] = 'K'
+units['aipcmt'] = '-'
+units['knnd'] = '-'
+units['knlab'] = '-'
+
+##########################################
+# 15. Variables pour le wake
+
+units['delta_t'] = 'K'
+units['delta_q'] = 'kg/kg'
+units['d_delta_t_gw'] = 'K/s'
+units['omgb_dth'] = 'K/s'
+units['dp_omgb'] = '/s'
+units['dt_KE'] = 'K/s'
+units['dq_KE'] = 'kg/kg/s'
+units['dt_PBL'] = 'K/s'
+units['dq_PBL'] = 'kg/kg/S'
+units['omg_w'] = 'Pa/s'
+units['dp_delt_omg'] = '/s'
+units['spread_w'] = 'K/s'
+units['delta_th'] = 'K'
+units['dt_wake'] = 'K/s'
+units['dq_wake'] = 'K_s'
+units['t_undi'] = 'K'
+units['q_undi'] = 'kg/kg'
+units['d_delta_t'] = 'K/s'
+units['d_delta_q'] = 'kg/kg/s'
+units['hw'] = 'm'
+units['sigmaw'] = '-'
+units['wake_pe'] = 'J/kg'
+units['wake_fip'] = 'W/m2'
+units['wake_gfl'] = 'm'
+units['Cstar'] = 'm/s'
+units['wdens'] = '/m2'
+units['dt_dn'] = 'K/s'
+units['dt_up'] = 'K/s'
+units['dq_dn'] = 'kg/kg/s'
+units['dq_up'] = 'kg/kg/s'
+units['Mf_dn'] = 'kg/m2/s'
+units['Mf_up'] = 'kg/m2/s'
+units['sigd'] = '-'
+units['omgb'] = 'Pa/s'
+units['t_undi_pcmt'] = 'K'
+units['q_undi_pcmt'] = 'kg/kg'
+units['t_wake_pcmt'] = 'K'
+units['q_wake_pcmt'] = 'kg/kg'
+units['qw_undi'] = 'kg/kg'
+units['qw_wake'] = 'kg/kg'
+units['Tw_wake'] = 'K'
+units['Tw_undi'] = 'K'
+units['qsat_undi'] = 'kg/kg'
+units['qsat_wake'] = 'kg/kg'
+
+##########################################
+# 16. Variables pour la turbulence
+
+units['Q11'] = '-'
+units['Q11min'] = '-'
+units['Q11max'] = '-'
+units['igs'] = 'kg/kg'
+units['igs2'] = '(kg/kg)^2'
+units['igs2turb'] = '(kg/kg)^2'
+units['igs2conv'] = '(kg/kg)^2'
+units['sigs'] = 'kg/kg'
+units['sigs2'] = '(kg/kg)^2'
+units['sigs2turb'] = '(kg/kg)^2'
+units['sigs2conv'] = '(kg/kg)^2'
+units['mlen'] = 'm2 s-2'
+units['acoef'] = '-'
+units['sigc0'] = 'kg/kg'
+units['sigc1'] = 'kg/kg'
+
+##########################################
+# 17. Variables COSP
+
+units['cltcalipso'] = '%'
+units['cllcalipso'] = '%'
+units['clmcalipso'] = '%'
+units['clhcalipso'] = '%'
+units['clcalipso'] = '%'
+units['cllcalipsoice'] = '%'
+units['clmcalipsoice'] = '%'
+units['clhcalipsoice'] = '%'
+units['cltcalipsoice'] = '%'
+units['cllcalipsoliq'] = '%'
+units['clmcalipsoliq'] = '%'
+units['clhcalipsoliq'] = '%'
+units['cltcalipsoliq'] = '%'
+units['cllcalipsoun'] = '%'
+units['clmcalipsoun'] = '%'
+units['clhcalipsoun'] = '%'
+units['cltcalipsoun'] = '%'
+units['lidarBetaMol532'] = 'm-1 sr-1'
+units['clcalipsoice'] = '%'
+units['clcalipsoliq'] = '%'
+units['clcalipsoun'] = '%'
+units['clcalipsotmp'] = '%'
+units['clcalipsotmpice'] = '%'
+units['clcalipsotmpliq'] = '%'
+units['clcalipsotmpun'] = '%'
+units['parasolRefl'] = '1'
+units['cltlidarradar'] = '%'
+units['clcalipso2'] = '%'
+units['cltisccp'] = '%'
+units['pctisccp'] = 'Pa'
+units['tauisccp'] = '1'
+units['albisccp'] = '1'
+units['meantbisccp'] = 'K'
+units['meantbclrisccp'] = 'K'
+units['boxtauisccp'] = '1'
+units['boxptopisccp'] = 'Pa'
+units['cltmodis'] = '%'
+units['clwmodis'] = '%'
+units['climodis'] = '%'
+units['clhmodis'] = '%'
+units['clmmodis'] = '%'
+units['cllmodis'] = '%'
+units['tautmodis'] = '1'
+units['tauwmodis'] = '1'
+units['tauimodis'] = '1'
+units['tautlogmodis'] = '1'
+units['tauwlogmodis'] = '1'
+units['tauilogmodis'] = '1'
+units['reffclwmodis'] = 'm'
+units['reffclimodis'] = 'm'
+units['pctmodis'] = 'Pa'
+units['lwpmodis'] = 'kg m-2'
+units['iwpmodis'] = 'kg m-2'
+units['toffset'] = 'day'
+units['fracout'] = '1'
+units['atb532'] = 'm-1 sr-1'
+units['cfadLidarsr532'] = '1'
+units['dbze94'] = '1'
+units['cfadDbze94'] = '1'
+units['clisccp'] = '%'
+units['clmodis'] = '%'
+units['clMISR'] = '%'
+
+for vv in ['ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']:
+  units[vv] = '-'
+
+
+
diff --git a/UTIL/post.old/variables.py.old b/UTIL/post.old/variables.py.old
new file mode 100644
index 0000000..293a111
--- /dev/null
+++ b/UTIL/post.old/variables.py.old
@@ -0,0 +1,1063 @@
+#pres et presH joue un role particulier donc doivent etre definies
+varnames = {}
+names = {}
+units = {}
+
+varnames['KNLAB'] = 'KNLAB'
+varnames['ZUPWP_dee'] = 'ZUPWP_dee'
+varnames['PFRSODS'] = 'PFRSODS'
+varnames['PFRTHC'] = 'PFRTHC'
+varnames['TENDQSCONV'] = 'TENDQSCONV'
+varnames['TENDQLCONV'] = 'TENDQLCONV'
+varnames['THETAVL'] = 'THETAVL'
+varnames['ZQN'] = 'ZQN'
+varnames['PDIFCS'] = 'PDIFCS'
+varnames['TENDTQT'] = 'TENDTQT'
+varnames['PFCCQN'] = 'PFCCQN'
+varnames['ZWT_tur'] = 'ZWT_tur'
+varnames['rsdt'] = 'SW_TOA_dn'
+varnames['ZWRV_dee'] = 'ZWRV_dee'
+varnames['SAT_DEF_1.4-3'] = 'SAT_DEF_1.4-3'
+varnames['PCLPH'] = 'PCLPH'
+varnames['PALB'] = 'PALB'
+varnames['PAPHIF'] = 'PAPHIF'
+varnames['RVF'] = 'RVF'
+varnames['SW_ALB'] = 'SW_ALB'
+varnames['KSGST'] = 'KSGST'
+varnames['ZLMO'] = 'ZLMO'
+varnames['ZFV_NUDG'] = 'ZFV_NUDG'
+varnames['ZVPWP_dee'] = 'ZVPWP_dee'
+varnames['ZNEBS'] = 'ZNEBS'
+varnames['TENDMQ'] = 'TENDMQ'
+varnames['TENDMV'] = 'TENDMV'
+varnames['rlutcs'] = 'LW_TOA_cs_up'
+varnames['TENDMT'] = 'TENDMT'
+varnames['TENDMU'] = 'TENDMU'
+varnames['RL'] = 'RL'
+varnames['ZSENV'] = 'ZSENV'
+varnames['RHO_flux'] = 'RHO_flux'
+varnames['rldt'] = 'LW_TOA_dn'
+varnames['PSTRMU'] = 'PSTRMU'
+varnames['rsdtcs'] = 'SW_TOA_cs_dn'
+varnames['VAH'] = 'VAH'
+varnames['PFRMQ'] = 'PFRMQ'
+varnames['ZWPQP_tur'] = 'ZWPQP_tur'
+varnames['KCSS'] = 'KCSS'
+varnames['PFCSQL'] = 'PFCSQL'
+varnames['PFCSQN'] = 'PFCSQN'
+varnames['PFRTHDS'] = 'PFRTHDS'
+varnames['PFPEVPSN'] = 'PFPEVPSN'
+varnames['ZFPL'] = 'ZFPL'
+varnames['PTW'] = 'PTW'
+varnames['rldtcs'] = 'LW_TOA_cs_dn'
+varnames['rsdscs'] = 'SW_Surf_cs_dn'
+varnames['PFCQING'] = 'PFCQING'
+varnames['ZOMEGA'] = 'ZOMEGA'
+varnames['PFRMH'] = 'PFRMH'
+varnames['PCLON'] = 'PCLON'
+varnames['PFPEVPCN'] = 'PFPEVPCN'
+varnames['rsuscs'] = 'SW_Surf_cs_up'
+varnames['PVENT'] = 'PVENT'
+varnames['THETAL_KE'] = 'THETAL_KE'
+varnames['ZCP_flux'] = 'ZCP_flux'
+varnames['PEMTD'] = 'PEMTD'
+varnames['INDICE EXPERIENCE'] = 'INDICE EXPERIENCE'
+varnames['PALPH'] = 'PALPH'
+varnames['ppr'] = 'PREC_TOT'
+varnames['pprls'] = 'PREC_LS'
+varnames['pprc'] = 'PREC_C'
+varnames['rsutcs'] = 'SW_TOA_cs_up'
+varnames['rst'] = 'SW_TOA'
+varnames['PCVGQ_APLPAR'] = 'PCVGQ_APLPAR'
+varnames['PQS'] = 'PQS'
+varnames['RHO'] = 'RHO'
+varnames['ZWPQT_dee'] = 'ZWPQT_dee'
+varnames['PDIFTQI'] = 'PDIFTQI'
+varnames['PFCQLNG'] = 'PFCQLNG'
+varnames['TENDLWT'] = 'TENDLWT'
+varnames['hfls'] = 'PFCLL'
+varnames['pres'] = 'PAPRSF'
+varnames['PCP'] = 'PCP'
+varnames['ZLN'] = 'ZLN'
+varnames['ZFORM'] = 'ZFORM'
+varnames['ZWPQPS'] = 'ZWPQPS'
+varnames['rsds'] = 'SW_Surf_dn'
+varnames['PFCQSNG'] = 'PFCQSNG'
+varnames['PTCLS'] = 'PTCLS'
+varnames['PFCCQL'] = 'PFCCQL'
+varnames['ZVPWP_tur'] = 'ZVPWP_tur'
+varnames['RLF'] = 'RLF'
+varnames['rlus'] = 'LW_Surf_up'
+varnames['PFCHOZ'] = 'PFCHOZ'
+varnames['PR'] = 'PR'
+varnames['hus'] = 'PQ'
+varnames['v'] = 'PV'
+varnames['ta'] = 'PT'
+varnames['u'] = 'PU'
+varnames['SAT_DEF_QV_2.5-4.5'] = 'SAT_DEF_QV_2.5-4.5'
+varnames['ZWRV_tur'] = 'ZWRV_tur'
+varnames['prw'] = 'WVP'
+varnames['PSLON'] = 'PSLON'
+varnames['PFPLCL'] = 'PFPLCL'
+varnames['PFPLCN'] = 'PFPLCN'
+varnames['PDIFCQL'] = 'PDIFCQL'
+varnames['PFCQLNG_01'] = 'PFCQLNG_01'
+varnames['PDIFCQI'] = 'PDIFCQI'
+varnames['PSTRMV'] = 'PSTRMV'
+varnames['WTHL_tur'] = 'WTHL_tur'
+varnames['ZFQ_ADV'] = 'ZFQ_ADV'
+varnames['SAT_DEF_1-15'] = 'SAT_DEF_1-15'
+varnames['PTS'] = 'PTS'
+varnames['PFCQVNG'] = 'PFCQVNG'
+varnames['TENDSWTHL'] = 'TENDSWTHL'
+varnames['RSTATI'] = 'RSTATI'
+varnames['ZH'] = 'ZH'
+varnames['PEMTU'] = 'PEMTU'
+varnames['PFCQRNG'] = 'PFCQRNG'
+varnames['presH'] = 'PAPRS'
+varnames['ZMAXFRAC'] = 'ZMAXFRAC'
+varnames['PSTRDU'] = 'PSTRDU'
+varnames['PVCLS'] = 'PVCLS'
+varnames['TENDMTHL'] = 'TENDMTHL'
+varnames['qsat'] = 'PQSAT'
+varnames['ZLH_flux'] = 'ZLH_flux'
+varnames['rls'] = 'LW_Surf'
+varnames['TENDCQT'] = 'TENDCQT'
+varnames['PCLCH'] = 'PCLCH'
+varnames['PDIRVENT'] = 'PDIRVENT'
+varnames['ZW'] = 'ZW'
+varnames['ZWPQT_tur'] = 'ZWPQT_tur'
+varnames['SAT_DEF_QV_0-15'] = 'SAT_DEF_QV_0-15'
+varnames['NINDAT'] = 'NINDAT'
+varnames['TENDSQT'] = 'TENDSQT'
+varnames['TENDTQ'] = 'TENDTQ'
+varnames['PDIFTQ'] = 'PDIFTQ'
+varnames['TENDTU'] = 'TENDTU'
+varnames['TENDTT'] = 'TENDTT'
+varnames['hflsn'] = 'PFCLN'
+varnames['TENDTV'] = 'TENDTV'
+varnames['NSSSSS'] = 'NSSSSS'
+varnames['rsut'] = 'SW_TOA_up'
+varnames['PDELP'] = 'PDELP'
+varnames['SWd'] = 'SWd'
+varnames['SWu'] = 'SWu'
+varnames['SWdcs'] = 'SWdcs'
+varnames['SWucs'] = 'SWucs'
+varnames['SWnet'] = 'PFRSO'
+varnames['TENDLWTHL'] = 'TENDLWTHL'
+varnames['VBH'] = 'VBH'
+varnames['THETAL_BS'] = 'THETAL_BS'
+varnames['PSTRDV'] = 'PSTRDV'
+varnames['huss'] = 'PQCLS'
+varnames['PGEMU'] = 'PGEMU'
+varnames['ZTHN'] = 'ZTHN'
+varnames['ZWTHETAV_dee'] = 'ZWTHETAV_dee'
+varnames['ZFU_NUDG'] = 'ZFU_NUDG'
+varnames['ZHEATS'] = 'ZHEATS'
+varnames['PVERVEL'] = 'PVERVEL'
+varnames['ZBLHG'] = 'ZBLHG'
+varnames['ZALF'] = 'ZALF'
+varnames['TENDQT'] = 'TENDQT'
+varnames['TENDQR'] = 'TENDQR'
+varnames['TENDQS'] = 'TENDQS'
+varnames['HCLA_AY1996'] = 'HCLA_AY1996'
+varnames['rluscs'] = 'LW_Surf_cs_up'
+varnames['ZFLUXBASE'] = 'ZFLUXBASE'
+varnames['ZKUO1'] = 'ZKUO1'
+varnames['ZKUO2'] = 'ZKUO2'
+varnames['TENDQL'] = 'TENDQL'
+varnames['TVF'] = 'TVF'
+varnames['rlds'] = 'LW_Surf_dn'
+varnames['WTHL_dee'] = 'WTHL_dee'
+varnames['TENDQI'] = 'TENDQI'
+varnames['rsscs'] = 'SW_Surf_cs'
+varnames['THETAS'] = 'THETAS'
+varnames['ZFTH_ADV'] = 'ZFTH_ADV'
+varnames['ZTN'] = 'ZTN'
+varnames['THETAV'] = 'THETAV'
+varnames['DIRCLS'] = 'DIRCLS'
+varnames['iwp'] = 'IWP'
+varnames['KGL2'] = 'KGL2'
+varnames['SAT_DEF_QV_1.4-3'] = 'SAT_DEF_QV_1.4-3'
+varnames['TENDSTHL'] = 'TENDSTHL'
+varnames['KGL1'] = 'KGL1'
+varnames['rstcs'] = 'SW_TOA_cs'
+varnames['PFPFPSL'] = 'PFPFPSL'
+varnames['RV'] = 'RV'
+varnames['PCLCT'] = 'PCLCT'
+varnames['rldscs'] = 'LW_Surf_cs_dn'
+varnames['SAT_DEF_2.5-4.5'] = 'SAT_DEF_2.5-4.5'
+varnames['THETA'] = 'THETA'
+varnames['PDIFTQL'] = 'PDIFTQL'
+varnames['PFPLSL'] = 'PFPLSL'
+varnames['THETAL'] = 'THETAL'
+varnames['PFPLSN'] = 'PFPLSN'
+varnames['ql'] = 'PQLI'
+varnames['rlt'] = 'LW_TOA_cs'
+varnames['QRad'] = 'QRad'
+varnames['QVF'] = 'QVF'
+varnames['PCVGQ_CPPHINP'] = 'PCVGQ_CPPHINP'
+varnames['ZFT_ADV'] = 'ZFT_ADV'
+varnames['TENDSWT'] = 'TENDSWT'
+varnames['PDIFTS'] = 'PDIFTS'
+varnames['PCLCC'] = 'PCLCC'
+varnames['qi'] = 'PQICE'
+varnames['KLEV'] = 'KLEV'
+varnames['PCLCM'] = 'PCLCM'
+varnames['PCLCL'] = 'PCLCL'
+varnames['PFRSOC'] = 'PFRSOC'
+varnames['PLH'] = 'PLH'
+varnames['Q1'] = 'Q1'
+varnames['TSPHY'] = 'TSPHY'
+varnames['rss'] = 'SW_Surf'
+varnames['Q2'] = 'Q2'
+varnames['TENDQRCONV'] = 'TENDQRCONV'
+varnames['KCLPH'] = 'KCLPH'
+varnames['PFPEVPSL'] = 'PFPEVPSL'
+varnames['VENTCLS'] = 'VENTCLS'
+varnames['lwp'] = 'LWP'
+varnames['TENDMQT'] = 'TENDMQT'
+varnames['ZCLDTOP'] = 'ZCLDTOP'
+varnames['SAT_DEF_0-15'] = 'SAT_DEF_0-15'
+varnames['PAPHI'] = 'PAPHI'
+varnames['PRHCLS'] = 'PRHCLS'
+varnames['TENDCQ'] = 'TENDCQ'
+varnames['HCLA'] = 'HCLA'
+varnames['PFCQVNG_01'] = 'PFCQVNG_01'
+varnames['TENDCT'] = 'TENDCT'
+varnames['TENDCU'] = 'TENDCU'
+varnames['TENDCV'] = 'TENDCV'
+varnames['PGELAM'] = 'PGELAM'
+varnames['ZSN'] = 'ZSN'
+varnames['PDIFCQ'] = 'PDIFCQ'
+varnames['TENDQICONV'] = 'TENDQICONV'
+varnames['rlut'] = 'LW_TOA_up'
+varnames['TENDSQ'] = 'TENDSQ'
+varnames['TENDST'] = 'TENDST'
+varnames['TV'] = 'TV'
+varnames['ZFPLS'] = 'ZFPLS'
+varnames['ZWT_dee'] = 'ZWT_dee'
+varnames['ZFORM2'] = 'ZFORM2'
+varnames['PSTRTV'] = 'PSTRTV'
+varnames['ZFORM1'] = 'ZFORM1'
+varnames['PTRSO'] = 'PTRSO'
+varnames['hfss'] = 'PFCS'
+varnames['ZUPWP_tur'] = 'ZUPWP_tur'
+varnames['ZWPQP_dee'] = 'ZWPQP_dee'
+varnames['ZHEAT_tur'] = 'ZHEAT_tur'
+varnames['PFPEVPCL'] = 'PFPEVPCL'
+varnames['PRDELP'] = 'PRDELP'
+varnames['ZFPLC'] = 'ZFPLC'
+varnames['TENDCTHL'] = 'TENDCTHL'
+varnames['LWd'] = 'LWd'
+varnames['LWu'] = 'LWu'
+varnames['LWdcs'] = 'LWdcs'
+varnames['LWucs'] = 'LWucs'
+varnames['LWnet'] = 'PFRTH'
+varnames['hur'] = 'PRH'
+varnames['CWP'] = 'CWP'
+varnames['PSTRTU'] = 'PSTRTU'
+varnames['ZCLDBAS'] = 'ZCLDBAS'
+varnames['rlt'] = 'LW_TOA'
+varnames['PMU0'] = 'PMU0'
+varnames['PMU0SFX'] = 'PMU0SFX'
+varnames['PSTRCV'] = 'PSTRCV'
+varnames['PUCLS'] = 'PUCLS'
+varnames['PSTRCU'] = 'PSTRCU'
+varnames['SAT_DEF_QV_1-15'] = 'SAT_DEF_QV_1-15'
+varnames['KSTEP'] = 'KSTEP'
+varnames['TENDTTHL'] = 'TENDTTHL'
+varnames['PFTKE'] = 'PFTKE'
+varnames['rlscs'] = 'LW_Surf_cs'
+varnames['TENDTHETAL'] = 'TENDTHETAL'
+varnames['ZUSTAR'] = 'ZUSTAR'
+varnames['PLNPR'] = 'PLNPR'
+varnames['ZWTHETAV_tur'] = 'ZWTHETAV_tur'
+varnames['rsus'] = 'SW_Surf_up'
+varnames['PITM'] = 'PITM'
+varnames['THETAF'] = 'THETAF'
+varnames['cl'] = 'PNEB'
+varnames['PCVGQ'] = 'PCVGQ'
+varnames['ZHEAT_dee'] = 'ZHEAT_dee'
+varnames['pr'] = 'PRECS_TOT'
+varnames['prls'] = 'PRECS_LS'
+varnames['prc'] = 'PRECS_C'
+varnames['ZFT_FIXRAD'] = 'ZFT_FIXRAD'
+varnames['evap'] = 'PFEVL'
+varnames['evapi'] = 'PFEVI'
+varnames['evapn'] = 'PFEVN'
+varnames['ZBUDTH'] = 'ZBUDTH'
+varnames['ZBUDSO'] = 'ZBUDSO'
+varnames['WATERFLUX'] = 'WATERFLUX'
+varnames['EFLUXTOA'] = 'EFLUXTOA'
+varnames['EFLUXSFC'] = 'EFLUXSFC'
+varnames['TOTWATER'] = 'TOTWATER'
+varnames['TOTENERGY'] = 'TOTENERGY'
+varnames['GFLUX'] = 'GFLUX'
+varnames['ENERGY'] = 'ENERGY'
+varnames['TENDU'] = 'TENDU'
+varnames['TENDV'] = 'TENDV'
+varnames['TOTPHI'] = 'TOTPHI'
+varnames['TOTEC'] = 'TOTEC'
+varnames['CPTOT'] = 'CPTOT'
+varnames['LHTOT'] = 'LHTOT'
+varnames['TOTMSE'] = 'TOTMSE'
+varnames['MSE'] = 'MSE'
+varnames['TOTLVWAT'] = 'TOTLVWAT'
+varnames['ZFRSO'] = 'ZFRSO'
+varnames['ZFRTH'] = 'ZFRTH'
+varnames['PFRMH'] = 'PFRMH'
+varnames['PDIFTS'] = 'PDIFTS'
+varnames['PDIFCAS'] = 'PDIFCAS'
+varnames['PDIFCS'] = 'PDIFCS'
+varnames['PFCCQL'] = 'PFCCQL'
+varnames['PFCSQL'] = 'PFCSQL'
+varnames['PFESL'] = 'PFESL'
+varnames['PFECL'] = 'PFECL'
+varnames['PFCCQN'] = 'PFCCQN'
+varnames['PFCSQN'] = 'PFCSQN'
+varnames['PFESN'] = 'PFESN'
+varnames['PFECN'] = 'PFECN'
+varnames['ZFHIMCC'] = 'ZFHIMCC'
+varnames['ZTMP1'] = 'ZTMP1'
+varnames['ZTMP2'] = 'ZTMP2'
+varnames['RWATER0'] = 'RWATER0'
+varnames['RWATER1'] = 'RWATER1'
+varnames['RENERGY0'] = 'RENERGY0'
+varnames['RENERGY1'] = 'RENERGY1'
+varnames['RDWATER'] = 'RDWATER'
+varnames['RDENERGY'] = 'RDENERGY'
+varnames['RDWATERP'] = 'RDWATERP'
+varnames['RDENERGYP'] = 'RDENERGYP'
+varnames['ZJTOT'] = 'ZJTOT'
+varnames['ECDISSIP'] = 'ECDISSIP'
+varnames['RVENTU0'] = 'RVENTU0'
+varnames['RVENTV0'] = 'RVENTV0'
+varnames['RVENTU1'] = 'RVENTU1'
+varnames['RVENTV1'] = 'RVENTV1'
+varnames['RDVENTU'] = 'RDVENTU'
+varnames['RDVENTV'] = 'RDVENTV'
+varnames['RDVENTUP'] = 'RDVENTUP'
+varnames['RDVENTVP'] = 'RDVENTVP'
+varnames['rCO2'] = 'ZCO2'
+varnames['rCH4'] = 'ZCH4'
+varnames['rN2O'] = 'ZN2O'
+varnames['rNO2'] = 'ZNO2'
+varnames['rCFC11'] = 'ZC11'
+varnames['rCFC12'] = 'ZC12'
+varnames['rCFC22'] = 'ZC22'
+varnames['rCCL4'] = 'ZCL4'
+varnames['rO3'] = 'ZOZN'
+varnames['PCVGQ_CPPHINP'] = 'PCVGQ_CPPHINP'
+varnames['PCVGQ_CPPHINP0'] = 'PCVGQ_CPPHINP0'
+varnames['PCVGQ_APLPAR'] = 'PCVGQ_APLPAR'
+varnames['FORCQINT'] = 'FORCQINT'
+varnames['OMU'] = 'OMU'
+varnames['OMD'] = 'OMD'
+varnames['OMEF'] = 'OMEF'
+
+names['KNLAB'] = 'KNLAB'
+names['ZUPWP_dee'] = 'ZUPWP_dee'
+names['PFRSODS'] = 'PFRSODS'
+names['PFRTHC'] = 'PFRTHC'
+names['TENDQSCONV'] = 'TENDQSCONV'
+names['TENDQLCONV'] = 'TENDQLCONV'
+names['THETAVL'] = 'THETAVL'
+names['ZQN'] = 'ZQN'
+names['PDIFCS'] = 'PDIFCS'
+names['TENDTQT'] = 'TENDTQT'
+names['PFCCQN'] = 'PFCCQN'
+names['ZWT_tur'] = 'ZWT_tur'
+names['rsdt'] = 'Downwelling SW Radiation at TOA'
+names['ZWRV_dee'] = 'ZWRV_dee'
+names['SAT_DEF_1.4-3'] = 'SAT_DEF_1.4-3'
+names['PCLPH'] = 'PCLPH'
+names['PALB'] = 'PALB'
+names['PAPHIF'] = 'PAPHIF'
+names['RVF'] = 'RVF'
+names['SW_ALB'] = 'SW_ALB'
+names['KSGST'] = 'KSGST'
+names['ZLMO'] = 'ZLMO'
+names['ZFV_NUDG'] = 'ZFV_NUDG'
+names['ZVPWP_dee'] = 'ZVPWP_dee'
+names['ZNEBS'] = 'ZNEBS'
+names['TENDMQ'] = 'TENDMQ'
+names['TENDMV'] = 'TENDMV'
+names['rlutcs'] = 'Clear-Sky Upwelling LW Radiation at TOA'
+names['TENDMT'] = 'TENDMT'
+names['TENDMU'] = 'TENDMU'
+names['RL'] = 'RL'
+names['ZSENV'] = 'ZSENV'
+names['RHO_flux'] = 'RHO_flux'
+names['rldt'] = 'Downwelling LW Radiation at TOA'
+names['PSTRMU'] = 'PSTRMU'
+names['rsdtcs'] = 'Clear-Sky Downwelling SW Radiation at TOA'
+names['VAH'] = 'VAH'
+names['PFRMQ'] = 'PFRMQ'
+names['ZWPQP_tur'] = 'ZWPQP_tur'
+names['KCSS'] = 'KCSS'
+names['PFCSQL'] = 'PFCSQL'
+names['PFCSQN'] = 'PFCSQN'
+names['PFRTHDS'] = 'PFRTHDS'
+names['PFPEVPSN'] = 'PFPEVPSN'
+names['ZFPL'] = 'ZFPL'
+names['PTW'] = 'PTW'
+names['rldtcs'] = 'Clear-Sky Downwelling LW Radiation at TOA'
+names['rsdscs'] = 'Clear-Sky Downwelling SW Radiation at Surface'
+names['PFCQING'] = 'PFCQING'
+names['ZOMEGA'] = 'ZOMEGA'
+names['PFRMH'] = 'PFRMH'
+names['PCLON'] = 'PCLON'
+names['PFPEVPCN'] = 'PFPEVPCN'
+names['rsuscs'] = 'Clear-Sky Upwelling SW Radiation at Surface'
+names['PVENT'] = 'PVENT'
+names['THETAL_KE'] = 'THETAL_KE'
+names['ZCP_flux'] = 'ZCP_flux'
+names['PEMTD'] = 'PEMTD'
+names['INDICE EXPERIENCE'] = 'INDICE EXPERIENCE'
+names['PALPH'] = 'PALPH'
+names['ppr'] = 'Total Precipitation Profile'
+names['pprls'] = 'Large-Scale Precipitation Profile'
+names['pprc'] = 'Convective Precipitation Profile'
+names['rsutcs'] = 'Clear-Sky Upwelling SW Radiation at TOA'
+names['rst'] = 'Net SW Radiation at TOA'
+names['PCVGQ_APLPAR'] = 'PCVGQ_APLPAR'
+names['PQS'] = 'PQS'
+names['RHO'] = 'RHO'
+names['ZWPQT_dee'] = 'ZWPQT_dee'
+names['PDIFTQI'] = 'PDIFTQI'
+names['PFCQLNG'] = 'PFCQLNG'
+names['TENDLWT'] = 'TENDLWT'
+names['hfls'] = 'Surface Latent Heat Flux'
+names['pres'] = 'Full Level Pressure'
+names['PCP'] = 'PCP'
+names['ZLN'] = 'ZLN'
+names['ZFORM'] = 'ZFORM'
+names['ZWPQPS'] = 'ZWPQPS'
+names['rsds'] = 'Downwelling SW Radiation at Surface'
+names['PFCQSNG'] = 'PFCQSNG'
+names['PTCLS'] = 'PTCLS'
+names['PFCCQL'] = 'PFCCQL'
+names['ZVPWP_tur'] = 'ZVPWP_tur'
+names['RLF'] = 'RLF'
+names['rlus'] = 'Upwelling LW Radiation at Surface'
+names['PFCHOZ'] = 'PFCHOZ'
+names['PR'] = 'PR'
+names['hus'] = 'Air Specific Humidity'
+names['v'] = 'Meridional Wind'
+names['ta'] = 'Air Temperature'
+names['u'] = 'Zonal Wind'
+names['SAT_DEF_QV_2.5-4.5'] = 'SAT_DEF_QV_2.5-4.5'
+names['ZWRV_tur'] = 'ZWRV_tur'
+names['prw'] = 'Precipitable Wate'
+names['PSLON'] = 'PSLON'
+names['PFPLCL'] = 'PFPLCL'
+names['PFPLCN'] = 'PFPLCN'
+names['PDIFCQL'] = 'PDIFCQL'
+names['PFCQLNG_01'] = 'PFCQLNG_01'
+names['PDIFCQI'] = 'PDIFCQI'
+names['PSTRMV'] = 'PSTRMV'
+names['WTHL_tur'] = 'WTHL_tur'
+names['ZFQ_ADV'] = 'ZFQ_ADV'
+names['SAT_DEF_1-15'] = 'SAT_DEF_1-15'
+names['PTS'] = 'PTS'
+names['PFCQVNG'] = 'PFCQVNG'
+names['TENDSWTHL'] = 'TENDSWTHL'
+names['RSTATI'] = 'RSTATI'
+names['ZH'] = 'ZH'
+names['PEMTU'] = 'PEMTU'
+names['PFCQRNG'] = 'PFCQRNG'
+names['presH'] = 'Half Level Pressure'
+names['ZMAXFRAC'] = 'ZMAXFRAC'
+names['PSTRDU'] = 'PSTRDU'
+names['PVCLS'] = 'PVCLS'
+names['TENDMTHL'] = 'TENDMTHL'
+names['qsat'] = 'Air Specific Humidity at Saturation'
+names['ZLH_flux'] = 'ZLH_flux'
+names['rls'] = 'Net LW Radiation at Surface'
+names['TENDCQT'] = 'TENDCQT'
+names['PCLCH'] = 'PCLCH'
+names['PDIRVENT'] = 'PDIRVENT'
+names['ZW'] = 'ZW'
+names['ZWPQT_tur'] = 'ZWPQT_tur'
+names['SAT_DEF_QV_0-15'] = 'SAT_DEF_QV_0-15'
+names['NINDAT'] = 'NINDAT'
+names['TENDSQT'] = 'TENDSQT'
+names['TENDTQ'] = 'TENDTQ'
+names['PDIFTQ'] = 'PDIFTQ'
+names['TENDTU'] = 'TENDTU'
+names['TENDTT'] = 'TENDTT'
+names['hflsn'] = 'Surface Latent Heat Flux over Snow or Ice'
+names['TENDTV'] = 'TENDTV'
+names['NSSSSS'] = 'NSSSSS'
+names['rsut'] = 'Upwelling SW Radiation at TOA'
+names['PDELP'] = 'PDELP'
+names['SWd'] = 'Downward SW Flux'
+names['SWu'] = 'Upward SW Flux'
+names['SWdcs'] = 'CS Downward SW Flux'
+names['SWucs'] = 'CS Upward SW Flux'
+names['SWnet'] = 'Net SW Flux'
+names['TENDLWTHL'] = 'TENDLWTHL'
+names['VBH'] = 'VBH'
+names['THETAL_BS'] = 'THETAL_BS'
+names['PSTRDV'] = 'PSTRDV'
+names['huss'] = '2m Specific Humidity'
+names['PGEMU'] = 'PGEMU'
+names['ZTHN'] = 'ZTHN'
+names['ZWTHETAV_dee'] = 'ZWTHETAV_dee'
+names['ZFU_NUDG'] = 'ZFU_NUDG'
+names['ZHEATS'] = 'ZHEATS'
+names['PVERVEL'] = 'PVERVEL'
+names['ZBLHG'] = 'ZBLHG'
+names['ZALF'] = 'ZALF'
+names['TENDQT'] = 'TENDQT'
+names['TENDQR'] = 'TENDQR'
+names['TENDQS'] = 'TENDQS'
+names['HCLA_AY1996'] = 'HCLA_AY1996'
+names['rluscs'] = 'Clear-Sky Upwelling LW Radiation at Surface'
+names['ZFLUXBASE'] = 'ZFLUXBASE'
+names['ZKUO1'] = 'ZKUO1'
+names['ZKUO2'] = 'ZKUO2'
+names['TENDQL'] = 'TENDQL'
+names['TVF'] = 'TVF'
+names['rlds'] = 'Downwelling LW Radiation at Surface'
+names['WTHL_dee'] = 'WTHL_dee'
+names['TENDQI'] = 'TENDQI'
+names['rsscs'] = 'Clear-Sky Net SW Radiation at Surface'
+names['THETAS'] = 'THETAS'
+names['ZFTH_ADV'] = 'ZFTH_ADV'
+names['ZTN'] = 'ZTN'
+names['THETAV'] = 'THETAV'
+names['DIRCLS'] = 'DIRCLS'
+names['iwp'] = 'Ice Water Path'
+names['KGL2'] = 'KGL2'
+names['SAT_DEF_QV_1.4-3'] = 'SAT_DEF_QV_1.4-3'
+names['TENDSTHL'] = 'TENDSTHL'
+names['KGL1'] = 'KGL1'
+names['rstcs'] = 'Net SW Radiation at TOA'
+names['PFPFPSL'] = 'PFPFPSL'
+names['RV'] = 'RV'
+names['PCLCT'] = 'PCLCT'
+names['rldscs'] = 'Clear-Sky Downwelling LW Radiation at Surface'
+names['SAT_DEF_2.5-4.5'] = 'SAT_DEF_2.5-4.5'
+names['THETA'] = 'THETA'
+names['PDIFTQL'] = 'PDIFTQL'
+names['PFPLSL'] = 'PFPLSL'
+names['THETAL'] = 'THETAL'
+names['PFPLSN'] = 'PFPLSN'
+names['ql'] = 'Liquid water'
+names['rltcs'] = 'Net LW Radiation at TOA'
+names['QRad'] = 'QRad'
+names['QVF'] = 'QVF'
+names['PCVGQ_CPPHINP'] = 'PCVGQ_CPPHINP'
+names['ZFT_ADV'] = 'ZFT_ADV'
+names['TENDSWT'] = 'TENDSWT'
+names['PDIFTS'] = 'PDIFTS'
+names['PCLCC'] = 'PCLCC'
+names['qi'] = 'Ice Water'
+names['KLEV'] = 'KLEV'
+names['PCLCM'] = 'PCLCM'
+names['PCLCL'] = 'PCLCL'
+names['PFRSOC'] = 'PFRSOC'
+names['PLH'] = 'PLH'
+names['Q1'] = 'Q1'
+names['TSPHY'] = 'TSPHY'
+names['rss'] = 'NEt SW Radiation at Surface'
+names['Q2'] = 'Q2'
+names['TENDQRCONV'] = 'TENDQRCONV'
+names['KCLPH'] = 'KCLPH'
+names['PFPEVPSL'] = 'PFPEVPSL'
+names['VENTCLS'] = 'VENTCLS'
+names['lwp'] = 'Liquid Water Path'
+names['TENDMQT'] = 'TENDMQT'
+names['ZCLDTOP'] = 'ZCLDTOP'
+names['SAT_DEF_0-15'] = 'SAT_DEF_0-15'
+names['PAPHI'] = 'PAPHI'
+names['PRHCLS'] = 'PRHCLS'
+names['TENDCQ'] = 'TENDCQ'
+names['HCLA'] = 'HCLA'
+names['PFCQVNG_01'] = 'PFCQVNG_01'
+names['TENDCT'] = 'TENDCT'
+names['TENDCU'] = 'TENDCU'
+names['TENDCV'] = 'TENDCV'
+names['PGELAM'] = 'PGELAM'
+names['ZSN'] = 'ZSN'
+names['PDIFCQ'] = 'PDIFCQ'
+names['TENDQICONV'] = 'TENDQICONV'
+names['rlut'] = 'Upwelling LW Radiation at TOA'
+names['TENDSQ'] = 'TENDSQ'
+names['TENDST'] = 'TENDST'
+names['TV'] = 'TV'
+names['ZFPLS'] = 'ZFPLS'
+names['ZWT_dee'] = 'ZWT_dee'
+names['ZFORM2'] = 'ZFORM2'
+names['PSTRTV'] = 'PSTRTV'
+names['ZFORM1'] = 'ZFORM1'
+names['PTRSO'] = 'PTRSO'
+names['hfss'] = 'Surface Sensible Heat Flux'
+names['ZUPWP_tur'] = 'ZUPWP_tur'
+names['ZWPQP_dee'] = 'ZWPQP_dee'
+names['ZHEAT_tur'] = 'ZHEAT_tur'
+names['PFPEVPCL'] = 'PFPEVPCL'
+names['PRDELP'] = 'PRDELP'
+names['ZFPLC'] = 'ZFPLC'
+names['TENDCTHL'] = 'TENDCTHL'
+names['LWd'] = 'Downward LW Flux'
+names['LWu'] = 'Upward LW Flux'
+names['LWdcs'] = 'CS Downward LW Flux'
+names['LWucs'] = 'CS Upward LW Flux'
+names['LWnet'] = 'Net LW Flux'
+names['hur'] = 'Relative Humidity'
+names['CWP'] = 'CWP'
+names['PSTRTU'] = 'PSTRTU'
+names['ZCLDBAS'] = 'ZCLDBAS'
+names['rlt'] = 'Net LW Radiation at TOA'
+names['PMU0'] = 'PMU0'
+names['PMU0SFX'] = 'PMU0SFX'
+names['PSTRCV'] = 'PSTRCV'
+names['PSTRCU'] = 'PSTRCU'
+names['SAT_DEF_QV_1-15'] = 'SAT_DEF_QV_1-15'
+names['KSTEP'] = 'KSTEP'
+names['TENDTTHL'] = 'TENDTTHL'
+names['PFTKE'] = 'PFTKE'
+names['rlscs'] = 'Clear-Sky Net LW Radiation at Surface'
+names['TENDTHETAL'] = 'TENDTHETAL'
+names['ZUSTAR'] = 'ZUSTAR'
+names['PLNPR'] = 'PLNPR'
+names['ZWTHETAV_tur'] = 'ZWTHETAV_tur'
+names['rsus'] = 'Upwelling SW Radiation at Surface'
+names['PITM'] = 'PITM'
+names['THETAF'] = 'THETAF'
+names['cl'] = 'Cloud Fraction'
+names['PCVGQ'] = 'PCVGQ'
+names['ZHEAT_dee'] = 'ZHEAT_dee'
+names['pr'] = 'Surface Total Precipitaiton'
+names['prls'] = 'Surface Large-Scale Precipitation'
+names['prc'] = 'Surface Convective Precipitation'
+names['ZFT_FIXRAD'] = 'ZFT_FIXRAD'
+names['evap'] = 'Evaporation over liquid water (or wet soil)'
+names['evapi'] = 'Evaporation over frozen soil'
+names['evapn'] = 'Evaporation over snow (or ice) and frozen soil'
+names['ZBUDTH'] = 'ZBUDTH'
+names['ZBUDSO'] = 'ZBUDSO'
+names['WATERFLUX'] = 'WATERFLUX'
+names['EFLUXTOA'] = 'EFLUXTOA'
+names['EFLUXSFC'] = 'EFLUXSFC'
+names['TOTWATER'] = 'TOTWATER'
+names['TOTENERGY'] = 'TOTENERGY'
+names['GFLUX'] = 'GFLUX'
+names['ENERGY'] = 'ENERGY'
+names['TENDU'] = 'TENDU'
+names['TENDV'] = 'TENDV'
+names['TOTPHI'] = 'TOTPHI'
+names['TOTEC'] = 'TOTEC'
+names['CPTOT'] = 'CPTOT'
+names['LHTOT'] = 'LHTOT'
+names['TOTMSE'] = 'TOTMSE'
+names['MSE'] = 'MSE'
+names['TOTLVWAT'] = 'TOTLVWAT'
+names['ZFRSO'] = 'ZFRSO'
+names['ZFRTH'] = 'ZFRTH'
+names['PFRMH'] = 'PFRMH'
+names['PDIFTS'] = 'PDIFTS'
+names['PDIFCAS'] = 'PDIFCAS'
+names['PDIFCS'] = 'PDIFCS'
+names['PFCCQL'] = 'PFCCQL'
+names['PFCSQL'] = 'PFCSQL'
+names['PFESL'] = 'PFESL'
+names['PFECL'] = 'PFECL'
+names['PFCCQN'] = 'PFCCQN'
+names['PFCSQN'] = 'PFCSQN'
+names['PFESN'] = 'PFESN'
+names['PFECN'] = 'PFECN'
+names['ZFHIMCC'] = 'ZFHIMCC'
+names['ZTMP1'] = 'ZTMP1'
+names['ZTMP2'] = 'ZTMP2'
+names['RWATER0'] = 'RWATER0'
+names['RWATER1'] = 'RWATER1'
+names['RENERGY0'] = 'RENERGY0'
+names['RENERGY1'] = 'RENERGY1'
+names['RDWATER'] = 'RDWATER'
+names['RDENERGY'] = 'RDENERGY'
+names['RDWATERP'] = 'RDWATERP'
+names['RDENERGYP'] = 'RDENERGYP'
+names['ZJTOT'] = 'ZJTOT'
+names['ECDISSIP'] = 'ECDISSIP'
+names['RVENTU0'] = 'RVENTU0'
+names['RVENTV0'] = 'RVENTV0'
+names['RVENTU1'] = 'RVENTU1'
+names['RVENTV1'] = 'RVENTV1'
+names['RDVENTU'] = 'RDVENTU'
+names['RDVENTV'] = 'RDVENTV'
+names['RDVENTUP'] = 'RDVENTUP'
+names['RDVENTVP'] = 'RDVENTVP'
+names['rCO2'] = 'CO2 Mixing Ratio'
+names['rCH4'] = 'CH4 Mixing Ratio'
+names['rN2O'] = 'N2O Mixing Ratio'
+names['rNO2'] = 'NO2 Mixing Ratio'
+names['rCFC11'] = 'CFC11 Mixing Ratio'
+names['rCFC12'] = 'CFC12 Mixing Ratio'
+names['rCFC22'] = 'CFC22 Mixing Ratio'
+names['rCCL4'] = 'CCL4 Mixing Ratio'
+names['rO3'] = 'O3 Mixing Ratio'
+names['PCVGQ_CPPHINP'] = 'PCVGQ_CPPHINP'
+names['PCVGQ_CPPHINP0'] = 'PCVGQ_CPPHINP0'
+names['PCVGQ_APLPAR'] = 'PCVGQ_APLPAR'
+names['FORCQINT'] = 'FORCQINT'
+names['OMU'] = 'OMU'
+names['OMD'] = 'OMD'
+names['OMEF'] = 'OMEF'
+
+units['KNLAB'] = '-'
+units['ZUPWP_dee'] = '-'
+units['PFRSODS'] = '-'
+units['PFRTHC'] = '-'
+units['TENDQSCONV'] = '-'
+units['TENDQLCONV'] = '-'
+units['THETAVL'] = '-'
+units['ZQN'] = '-'
+units['PDIFCS'] = '-'
+units['TENDTQT'] = '-'
+units['PFCCQN'] = '-'
+units['ZWT_tur'] = '-'
+units['rsdt'] = 'W/m2'
+units['ZWRV_dee'] = '-'
+units['SAT_DEF_1.4-3'] = '-'
+units['PCLPH'] = '-'
+units['PALB'] = '-'
+units['PAPHIF'] = '-'
+units['RVF'] = '-'
+units['SW_ALB'] = '-'
+units['KSGST'] = '-'
+units['ZLMO'] = '-'
+units['ZFV_NUDG'] = '-'
+units['ZVPWP_dee'] = '-'
+units['ZNEBS'] = '-'
+units['TENDMQ'] = '-'
+units['TENDMV'] = '-'
+units['rlutcs'] = 'W/m2'
+units['TENDMT'] = '-'
+units['TENDMU'] = '-'
+units['RL'] = '-'
+units['ZSENV'] = '-'
+units['RHO_flux'] = '-'
+units['rldt'] = 'W/m2'
+units['PSTRMU'] = '-'
+units['rsdtcs'] = 'W/m2'
+units['VAH'] = '-'
+units['PFRMQ'] = '-'
+units['ZWPQP_tur'] = '-'
+units['KCSS'] = '-'
+units['PFCSQL'] = '-'
+units['PFCSQN'] = '-'
+units['PFRTHDS'] = '-'
+units['PFPEVPSN'] = '-'
+units['ZFPL'] = '-'
+units['PTW'] = '-'
+units['rldtcsn'] = 'W/m2'
+units['rsdscs'] = 'W/m2'
+units['PFCQING'] = '-'
+units['ZOMEGA'] = '-'
+units['PFRMH'] = '-'
+units['PCLON'] = '-'
+units['PFPEVPCN'] = '-'
+units['rsuscs'] = 'W/m2'
+units['PVENT'] = '-'
+units['THETAL_KE'] = '-'
+units['ZCP_flux'] = '-'
+units['PEMTD'] = '-'
+units['INDICE EXPERIENCE'] = '-'
+units['PALPH'] = '-'
+units['ppr'] = 'kg/m2/s'
+units['pprls'] = 'kg/m2/s'
+units['pprc'] = 'kg/m2/s'
+units['rsutcs'] = 'W/m2'
+units['rst'] = 'W/m2'
+units['PCVGQ_APLPAR'] = '-'
+units['PQS'] = '-'
+units['RHO'] = '-'
+units['ZWPQT_dee'] = '-'
+units['PDIFTQI'] = '-'
+units['PFCQLNG'] = '-'
+units['TENDLWT'] = '-'
+units['hfls'] = 'W/m2'
+units['pres'] = 'Pa'
+units['PCP'] = '-'
+units['ZLN'] = '-'
+units['ZFORM'] = '-'
+units['ZWPQPS'] = '-'
+units['rsds'] = 'W/m2'
+units['PFCQSNG'] = '-'
+units['PTCLS'] = '-'
+units['PFCCQL'] = '-'
+units['ZVPWP_tur'] = '-'
+units['RLF'] = '-'
+units['rlus'] = 'W/m2'
+units['PFCHOZ'] = '-'
+units['PR'] = '-'
+units['hus'] = 'kg/kg'
+units['v'] = 'm/s'
+units['ta'] = 'K'
+units['u'] = 'm/s'
+units['SAT_DEF_QV_2.5-4.5'] = '-'
+units['ZWRV_tur'] = '-'
+units['prw'] = 'kg/m2'
+units['PSLON'] = '-'
+units['PFPLCL'] = '-'
+units['PFPLCN'] = '-'
+units['PDIFCQL'] = '-'
+units['PFCQLNG_01'] = '-'
+units['PDIFCQI'] = '-'
+units['PSTRMV'] = '-'
+units['WTHL_tur'] = '-'
+units['ZFQ_ADV'] = '-'
+units['SAT_DEF_1-15'] = '-'
+units['PTS'] = '-'
+units['PFCQVNG'] = '-'
+units['TENDSWTHL'] = '-'
+units['RSTATI'] = '-'
+units['ZH'] = '-'
+units['PEMTU'] = '-'
+units['PFCQRNG'] = '-'
+units['presH'] = 'Pa'
+units['ZMAXFRAC'] = '-'
+units['PSTRDU'] = '-'
+units['PVCLS'] = '-'
+units['TENDMTHL'] = '-'
+units['qsat'] = 'kg/kg'
+units['ZLH_flux'] = '-'
+units['rls'] = 'W/m2'
+units['TENDCQT'] = '-'
+units['PCLCH'] = '-'
+units['PDIRVENT'] = '-'
+units['ZW'] = '-'
+units['ZWPQT_tur'] = '-'
+units['SAT_DEF_QV_0-15'] = '-'
+units['NINDAT'] = '-'
+units['TENDSQT'] = '-'
+units['TENDTQ'] = '-'
+units['PDIFTQ'] = '-'
+units['TENDTU'] = '-'
+units['TENDTT'] = '-'
+units['hflsn'] = 'W/m2'
+units['TENDTV'] = '-'
+units['NSSSSS'] = '-'
+units['rsut'] = 'W/m2'
+units['PDELP'] = '-'
+units['SWd'] = 'W/m2'
+units['SWu'] = 'W/m2'
+units['SWdcs'] = 'W/m2'
+units['SWucs'] = 'W/m2'
+units['SWnet'] = 'W/m2'
+units['TENDLWTHL'] = '-'
+units['VBH'] = '-'
+units['THETAL_BS'] = '-'
+units['PSTRDV'] = '-'
+units['huss'] = 'kg/kg'
+units['PGEMU'] = '-'
+units['ZTHN'] = '-'
+units['ZWTHETAV_dee'] = '-'
+units['ZFU_NUDG'] = '-'
+units['ZHEATS'] = '-'
+units['PVERVEL'] = '-'
+units['ZBLHG'] = '-'
+units['ZALF'] = '-'
+units['TENDQT'] = '-'
+units['TENDQR'] = '-'
+units['TENDQS'] = '-'
+units['HCLA_AY1996'] = '-'
+units['rluscs'] = 'W/m2'
+units['ZFLUXBASE'] = '-'
+units['ZKUO1'] = '-'
+units['ZKUO2'] = '-'
+units['TENDQL'] = '-'
+units['TVF'] = '-'
+units['rlds'] = 'W/m2'
+units['WTHL_dee'] = '-'
+units['TENDQI'] = '-'
+units['rsscs'] = 'W/m2'
+units['THETAS'] = '-'
+units['ZFTH_ADV'] = '-'
+units['ZTN'] = '-'
+units['THETAV'] = '-'
+units['DIRCLS'] = '-'
+units['iwp'] = 'kg/m2'
+units['KGL2'] = '-'
+units['SAT_DEF_QV_1.4-3'] = '-'
+units['TENDSTHL'] = '-'
+units['KGL1'] = '-'
+units['rstcs'] = 'W/m2'
+units['PFPFPSL'] = '-'
+units['RV'] = '-'
+units['PCLCT'] = '-'
+units['rldscs'] = 'W/m2'
+units['SAT_DEF_2.5-4.5'] = '-'
+units['THETA'] = '-'
+units['PDIFTQL'] = '-'
+units['PFPLSL'] = '-'
+units['THETAL'] = '-'
+units['PFPLSN'] = '-'
+units['ql'] = 'kg/kg'
+units['rltcs'] = 'W/m2'
+units['QRad'] = '-'
+units['QVF'] = '-'
+units['PCVGQ_CPPHINP'] = '-'
+units['ZFT_ADV'] = '-'
+units['TENDSWT'] = '-'
+units['PDIFTS'] = '-'
+units['PCLCC'] = '-'
+units['qi'] = 'kg/kg'
+units['KLEV'] = '-'
+units['PCLCM'] = '-'
+units['PCLCL'] = '-'
+units['PFRSOC'] = '-'
+units['PLH'] = '-'
+units['Q1'] = '-'
+units['TSPHY'] = '-'
+units['rss'] = 'W/m2'
+units['Q2'] = '-'
+units['TENDQRCONV'] = '-'
+units['KCLPH'] = '-'
+units['PFPEVPSL'] = '-'
+units['VENTCLS'] = '-'
+units['lwp'] = 'kg/m2'
+units['TENDMQT'] = '-'
+units['ZCLDTOP'] = '-'
+units['SAT_DEF_0-15'] = '-'
+units['PAPHI'] = '-'
+units['PRHCLS'] = '-'
+units['TENDCQ'] = '-'
+units['HCLA'] = '-'
+units['PFCQVNG_01'] = '-'
+units['TENDCT'] = '-'
+units['TENDCU'] = '-'
+units['TENDCV'] = '-'
+units['PGELAM'] = '-'
+units['ZSN'] = '-'
+units['PDIFCQ'] = '-'
+units['TENDQICONV'] = '-'
+units['rlut'] = 'W/m2'
+units['TENDSQ'] = '-'
+units['TENDST'] = '-'
+units['TV'] = '-'
+units['ZFPLS'] = '-'
+units['ZWT_dee'] = '-'
+units['ZFORM2'] = '-'
+units['PSTRTV'] = '-'
+units['ZFORM1'] = '-'
+units['PTRSO'] = '-'
+units['hfss'] = 'W/m2'
+units['ZUPWP_tur'] = '-'
+units['ZWPQP_dee'] = '-'
+units['ZHEAT_tur'] = '-'
+units['PFPEVPCL'] = '-'
+units['PRDELP'] = '-'
+units['ZFPLC'] = '-'
+units['TENDCTHL'] = '-'
+units['LWd'] = 'W/m2'
+units['LWu'] = 'W/m2'
+units['LWdcs'] = 'W/m2'
+units['LWucs'] = 'W/m2'
+units['LWnet'] = 'W/m2'
+units['hur'] = '-'
+units['CWP'] = '-'
+units['PSTRTU'] = '-'
+units['ZCLDBAS'] = '-'
+units['rlt'] = 'W/m2'
+units['PMU0'] = '-'
+units['PMU0SFX'] = '-'
+units['PSTRCV'] = '-'
+units['PUCLS'] = '-'
+units['PSTRCU'] = '-'
+units['SAT_DEF_QV_1-15'] = '-'
+units['KSTEP'] = '-'
+units['TENDTTHL'] = '-'
+units['PFTKE'] = '-'
+units['rlscs'] = 'W/m2'
+units['TENDTHETAL'] = '-'
+units['ZUSTAR'] = '-'
+units['PLNPR'] = '-'
+units['ZWTHETAV_tur'] = '-'
+units['rsus'] = 'W/m2'
+units['PITM'] = '-'
+units['THETAF'] = '-'
+units['cl'] = '-'
+units['PCVGQ'] = '-'
+units['ZHEAT_dee'] = '-'
+units['pr'] = 'kg/m2/s'
+units['prls'] = 'kg/m2/s'
+units['prc'] = 'kg/m2/s'
+units['ZFT_FIXRAD'] = 'K/s'
+units['evap'] = 'kg/m2/s'
+units['evapi'] = 'kg/m2/s'
+units['evapn'] = 'kg/m2/s'
+units['ZBUDTH'] = 'W/m2'
+units['ZBUDSO'] = 'W/m2'
+units['WATERFLUX'] = 'kg/m2/s'
+units['EFLUXTOA'] = 'W/m2'
+units['EFLUXSFC'] = 'W/m2'
+units['TOTWATER'] = 'kg/m2'
+units['TOTENERGY'] = 'J/m2'
+units['GFLUX'] = 'W/m2'
+units['ENERGY'] = 'J/kg'
+units['TENDU'] = 'm/s2'
+units['TENDV'] = 'm/s2'
+units['TOTPHI'] = 'J/m2'
+units['TOTEC'] = 'J/m2'
+units['CPTOT'] = 'J/K/kg'
+units['LHTOT'] = 'J/kg'
+units['TOTMSE'] = 'J/m2'
+units['MSE'] = 'J/kg'
+units['TOTLVWAT'] = 'J/m2'
+units['ZFRSO'] = '-'
+units['ZFRTH'] = '-'
+units['PFRMH'] = '-'
+units['PDIFTS'] = '-'
+units['PDIFCAS'] = '-'
+units['PDIFCS'] = '-'
+units['PFCCQL'] = '-'
+units['PFCSQL'] = '-'
+units['PFESL'] = '-'
+units['PFECL'] = '-'
+units['PFCCQN'] = '-'
+units['PFCSQN'] = '-'
+units['PFESN'] = '-'
+units['PFECN'] = '-'
+units['ZFHIMCC'] = '-'
+units['ZTMP1'] = '-'
+units['ZTMP2'] = '-'
+units['RWATER0'] = '-'
+units['RWATER1'] = '-'
+units['RENERGY0'] = '-'
+units['RENERGY1'] = '-'
+units['RDWATER'] = '-'
+units['RDENERGY'] = '-'
+units['RDWATERP'] = '-'
+units['RDENERGYP'] = '-'
+units['ZJTOT'] = '-'
+units['ECDISSIP'] = '-'
+units['RVENTU0'] = '-'
+units['RVENTV0'] = '-'
+units['RVENTU1'] = '-'
+units['RVENTV1'] = '-'
+units['RDVENTU'] = '-'
+units['RDVENTV'] = '-'
+units['RDVENTUP'] = '-'
+units['RDVENTVP'] = '-'
+units['rCO2'] = 'kg/kg'
+units['rCH4'] = 'kg/kg'
+units['rN2O'] = 'kg/kg'
+units['rNO2'] = 'kg/kg'
+units['rCFC11'] = 'kg/kg'
+units['rCFC12'] = 'kg/kg'
+units['rCFC22'] = 'kg/kg'
+units['rCCL4'] = 'kg/kg'
+units['rO3'] = 'kg/kg'
+units['PCVGQ_CPPHINP'] = '-'
+units['PCVGQ_CPPHINP0'] = '-'
+units['PCVGQ_APLPAR'] = '-'
+units['FORCQINT'] = '-'
+units['OMU'] = '-'
+units['OMD'] = '-'
+units['OMEF'] = '-'
+
diff --git a/UTIL/post.old/variables_CGILS2.py b/UTIL/post.old/variables_CGILS2.py
new file mode 100644
index 0000000..8c3915e
--- /dev/null
+++ b/UTIL/post.old/variables_CGILS2.py
@@ -0,0 +1,1217 @@
+#pres et presH joue un role particulier donc doivent etre definies
+varnames = {}
+names = {}
+units = {}
+
+#---------------------------------------------------------------------------------------------------
+#                        Variable in ARPEGE/MUSC
+#---------------------------------------------------------------------------------------------------
+
+# 1. Variables dynamiques et thermodynamiques
+#      pres, presH, zg, zgH, rho, T, qv, hur, ql, qi, qr, qsn, tke, th, thv, thl, thlv, qsat,
+#      ua, va, wa, wap
+#      qlc, qic, qrc, qsnc, qlshc, qishc, qrshc, qsnshc
+# 2. Variables nuageuses
+#      cl, cls, cldtot, cltc, cldlow, cltm, clth
+# 3. Variables pluies
+#      precls, snowls, precc, snowc, prect, precl, precc, ppr, pprls, pprc    
+# 4. Variables rayonnement
+#      rsdt, rsdtcs, rldt, rldtcs, rsut, rsutcs, flnt, flntc, fsnt, fsntc, rlt, rltcs
+#      rsds, rsdscs, rsus, rsuscs, rlds, rldscs, rlus, rluscs, fsns, fsnsc, flns, flnsc
+#      SWd, SWu, SWdcs, SWucs, SWnet, LWd, LWu, LWdcs, LWucs, LWnet
+#      mu1, mueff, I0, alb_ss
+# 5. Variables flux de surface
+#      sh, lh, hflsn
+#      evap, evapi, evapn
+#      Cd, Ch, Ce, Cdn, Chn, Cen
+# 6. Variables integrees sur la colonne
+#      precw, tglwp, iwp, cwp
+# 7. Variables en surface
+#      tsair, huss, hurs, uas, vas, pblh, ts
+# 8.1 Tendances de la physique
+#      Q1, Q2, Qrad
+#      tnthl, tnqt
+#      tdt_sw, tdt_lw, tntrswcs, tntrlwcs, tdt_turb, tdt_cond, tdt_deep, tntshc, tntd
+#      tnthrswn tnthrlw, tnthrswcs, tnthrlwcs, tnthpbl, tnthlscp, tnthc, tnthshc, tnthd
+#      qdt_turb, qdt_cond, qdt_deep, tnqvshc, tnqvd
+#      tnupbl, tnuc, tnushc, tnud, tnvpbl, tnvc, tnvshc, tnvd
+#      tnthlrswn tnthlrlw, tnthlrswcs, tnthlrlwcs, tnthlpbl, tnthllscp, tnthlc, tnthlshc, tnthld
+#      tnqtpbl, tnqtlscp, tnqtc, tnqtshc, tnqtd
+#      tnql, tnqi, tnqr, tnqsn
+#      tnqlc, tnqic, tnqrc, tnqsnc
+#      tnqlshc, tnqishc, tnqrshc, tnqsnc
+# 8.2 Flux de la physique
+#      wpqtp_pbl, wpthlp_pbl, wpqtp_conv, wpthlp_conv
+# 9. Tendances liees au forcages
+#      tdt_ls, tntnudg, qdt_ls, tnqnudg
+# 10. Divers
+#      Cp, Lv
+# 11. Bilan eau et energie
+#      qflux, qfluxPr, qfluxEv, dwater, efluxTOA, efluxSfc, denergy
+#      RMSE9, RMSE0, RMSE1, RDMSE, msefluxSfc
+#      iQadv, iQnud, iTadv, iTnud, iUadv, iUnud, iVadv, iVnud, iEadv, iEnud
+#      efluxSfcRad, efluxSfcTurb, efluxSfcConv, efluxSfcAdj, efluxSfcPrSen, efluxSfcPrLat
+#      iMSEadv, iMSEnud, iQw, iEw
+# 12. Especes Gazeuses
+#      rCO2, rCH4, rN2O, rNO2, rCFC11, rCFC12, rCFC22, rCCL4, rO3
+# 13. Variables du schema de convection Bougeault 1985
+#      alpha, Mf, Tu, Thu, qvu, qcu
+# 14. Variables du schema PCMT
+#      alpha_up, w_up, omega_up, alpha_dn, w_dn, omega_dn, cape, T_up, qv_up
+# 15. Variables pour le wake
+#      delta_t, delta_q, d_delta_t_gw, omgb_dth, omgb, dt_KE, dq_KE, dt_PBL, dq_PBL
+#      omg_w, dp_delt_omg, spread_w, delta_th, dt_wake, dq_wake, t_undi, q_undi, 
+#      d_delta_t, d_delta_q,
+#      hw, sigmaw, wake_pe, wake_fip, wake_gfl, Cstar, wdens
+#      dt_dn, dt_up, dq_dn, dq_up, Mf_dn, Mf_up, sigd, omgb
+#      t_undi_pcmt, q_undi_pcmt, t_wake_pcmt, q_wake_pcmt
+#      qw_undi, qw_wake, Tw_wake, Tw_undi, qsat_undi, qsat_wake
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+varnames['pres']  = 'PAPRSF'
+varnames['p']  = 'PAPRSF'
+varnames['presH'] = 'PAPRS'
+
+varnames['zg']    = 'PAPHIF'
+varnames['zgH']   = 'PAPHI'
+
+varnames['rho']   = 'RHO'
+varnames['T']    = 'PT'
+varnames['qv']   = 'PQ'
+varnames['hur']   = 'PRH'
+varnames['ql']    = 'PQLI'
+varnames['qi']    = 'PQICE'
+varnames['qr']    = 'PQR'
+varnames['qsn']   = 'PQSN'
+
+varnames['qlc']   = 'PQLCONV'
+varnames['qic']   = 'PQICONV'
+varnames['qrc']   = 'PQRCONV'
+varnames['qsnc']  = 'PQSCONV'
+
+varnames['qlshc'] = 'PQLSHCONV'
+varnames['qishc'] = 'PQISHCONV'
+varnames['qrshc'] = 'PQRSHCONV'
+varnames['qsnshc']= 'PQSSHCONV'
+
+varnames['tke']   = 'PECT'
+
+varnames['th']    = 'THETA'
+varnames['thv']   = 'THETAV'
+varnames['thl']   = 'THETAL'
+varnames['thlv']  = 'THETAVL'
+
+varnames['qsat']  = 'PQSAT'
+
+varnames['ua']    = 'PU'
+varnames['va']    = 'PV'
+varnames['wa']    = 'ZW'
+varnames['wap']   = 'ZOMEGA'
+
+##########################################
+# 2. Variables nuageuses
+
+varnames['cloud']    = 'PNEB'
+varnames['cls']   = 'ZNEBS'
+varnames['cldtot']   = 'PCLCT'
+varnames['cltc']  = 'PCLCC'
+varnames['cldlow']  = 'PCLCL'
+varnames['cltm']  = 'PCLCM'
+varnames['clth']  = 'PCLCH'
+
+##########################################
+# 3. Variables pluies
+
+#varnames['precls']= 'PFPLSL'
+#varnames['snowls']= 'PFPLSN'
+#varnames['precc'] = 'PFPLCL'
+#varnames['snowc'] = 'PFPLCN'
+
+varnames['prect']    = 'PRECS_TOT'
+varnames['precl']  = 'PRECS_LS'
+varnames['precc']   = 'PRECS_C'
+varnames['ppr']   = 'PREC_TOT'
+varnames['pprls'] = 'PREC_LS'
+varnames['pprc']  = 'PREC_C'
+
+##########################################
+# 4. Variables rayonnement
+
+varnames['rsdt']  = 'SW_TOA_dn'
+varnames['rsdtcs']= 'SW_TOA_cs_dn'
+varnames['rldt']  = 'LW_TOA_dn'
+varnames['rldtcs']= 'LW_TOA_cs_dn'
+varnames['rsut']  = 'SW_TOA_up'
+varnames['rsutcs']= 'SW_TOA_cs_up'
+varnames['flnt']  = 'LW_TOA_up'
+varnames['flntc']= 'LW_TOA_cs_up'
+varnames['fsnt']   = 'SW_TOA'
+varnames['fsntc'] = 'SW_TOA_cs'
+varnames['rlt']   = 'LW_TOA'
+varnames['rltcs'] = 'LW_TOA_cs'
+
+varnames['rsds']  = 'SW_Surf_dn'
+varnames['rsdscs']= 'SW_Surf_cs_dn'
+varnames['rsus']  = 'SW_Surf_up'
+varnames['rsuscs']= 'SW_Surf_cs_up'
+varnames['rlds']  = 'LW_Surf_dn'
+varnames['rldscs']= 'LW_Surf_cs_dn'
+varnames['rlus']  = 'LW_Surf_up'
+varnames['rluscs']= 'LW_Surf_cs_up'
+varnames['fsns']   = 'SW_Surf'
+varnames['fsnsc'] = 'SW_Surf_cs'
+varnames['flns']   = 'LW_Surf'
+varnames['flnsc'] = 'LW_Surf_cs'
+
+varnames['SWd'] = 'SWd'
+varnames['SWu'] = 'SWu'
+varnames['SWdcs'] = 'SWdcs'
+varnames['SWucs'] = 'SWucs'
+varnames['SWnet'] = 'PFRSO'
+
+varnames['LWd'] = 'LWd'
+varnames['LWu'] = 'LWu'
+varnames['LWdcs'] = 'LWdcs'
+varnames['LWucs'] = 'LWucs'
+varnames['LWnet'] = 'PFRTH'
+
+varnames['mu1'] = 'ZMU0'
+varnames['mueff'] = 'ZMU0EFF'
+varnames['I0'] = 'ZI0'
+varnames['daydur'] = 'Day duration'
+
+varnames['alb_ss'] = 'SW_ALB'
+
+##########################################
+# 5. Variables flux de surface
+
+varnames['lh']  = 'PFCLL'
+varnames['sh']  = 'PFCS'
+varnames['hflsn'] = 'PFCLN'
+
+varnames['evap'] = 'PFEVL'
+varnames['evapi'] = 'PFEVI'
+varnames['evapn'] = 'PFEVN'
+
+varnames['Cd'] = 'PCD'
+varnames['Ch'] = 'PCH'
+varnames['Ce'] = 'PCE'
+
+varnames['Cdn'] = 'PCDN'
+varnames['Chn'] = 'ZCHN'
+varnames['Cen'] = 'ZCEN'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+varnames['precw']   = 'WVP'
+varnames['tglwp']   = 'LWP'
+varnames['iwp']   = 'IWP'
+varnames['cwp']   = 'CWP'
+
+##########################################
+# 7. Variables en surface
+
+varnames['tsair']   = 'PTCLS'
+varnames['huss']  = 'PQCLS'
+varnames['hurs']  = 'PRHCLS'
+varnames['uas']   = 'PUCLS'
+varnames['vas']   = 'PVCLS'
+
+varnames['pblh']  = 'HCLA'
+
+varnames['ts']    = 'PTS'
+
+##########################################
+# 8.1 Tendances de la physique
+
+varnames['Q1']    = 'Q1'
+varnames['Q2']    = 'Q2'
+varnames['QRad']  = 'QRad'
+
+varnames['tnth'] = 'TENDTHETA'
+varnames['tnthl'] = 'TENDTHETAL'
+varnames['tnqt']  = 'TENDQT'
+
+varnames['tdt_sw']= 'TENDSWT'
+varnames['tdt_lw']= 'TENDLWT'
+varnames['tntrswcs']= 'TENDSWTCS'
+varnames['tntrlwcs']= 'TENDLWTCS'
+varnames['tdt_turb']= 'TENDTT'
+varnames['tdt_cond'] = 'TENDST'
+varnames['tdt_deep']  = 'TENDCT'
+varnames['tntshc']  = 'TENDSHCT'
+varnames['tntd']  = 'TENDMT'
+
+varnames['tnthrsw']= 'TENDSWTH'
+varnames['tnthrlw']= 'TENDLWTH'
+varnames['tnthrswcs']= 'TENDSWTHCS'
+varnames['tnthrlwcs']= 'TENDLWTHCS'
+varnames['tnthpbl']= 'TENDTTH'
+varnames['tnthlscp'] = 'TENDSTH'
+varnames['tnthc']  = 'TENDCTH'
+varnames['tnthshc']  = 'TENDSHCTH'
+varnames['tnthd']  = 'TENDMTH'
+
+varnames['qdt_turb'] = 'TENDTQ'
+varnames['qdt_cond'] = 'TENDSQ'
+varnames['qdt_deep'] = 'TENDCQ'
+varnames['tnqvshc'] = 'TENDSHCQ'
+varnames['tnqvd'] = 'TENDMQ'
+
+varnames['tnupbl']= 'TENDTU'
+varnames['tnuc']  = 'TENDCU'
+varnames['tnushc']  = 'TENDSHCU'
+varnames['tnud']  = 'TENDMU'
+
+varnames['tnvpbl']= 'TENDTV'
+varnames['tnvc']  = 'TENDCV'
+varnames['tnvshc']  = 'TENDSHCV'
+varnames['tnvd']  = 'TENDMV'
+
+varnames['tnthlrsw']= 'TENDSWTHL'
+varnames['tnthlrlw']= 'TENDLWTHL'
+varnames['tnthlrswcs']= 'TENDSWTHLCS'
+varnames['tnthlrlwcs']= 'TENDLWTHLCS'
+varnames['tnthlpbl'] = 'TENDTTHL'
+varnames['tnthllscp'] = 'TENDSTHL'
+varnames['tnthlc']= 'TENDCTHL'
+varnames['tnthlshc']= 'TENDSHCTHL'
+varnames['tnthld']= 'TENDMTHL'
+
+varnames['tnqtpbl'] = 'TENDTQT'
+varnames['tnqtlscp'] = 'TENDSQT'
+varnames['tnqtc'] = 'TENDCQT'
+varnames['tnqtshc'] = 'TENDSHCQT'
+varnames['tnqtd'] = 'TENDMQT'
+
+varnames['tnql']  = 'TENDQL'
+varnames['tnqi']  = 'TENDQI'
+varnames['tnqr']  = 'TENDQR'
+varnames['tnqsn']  = 'TENDQS'
+
+varnames['tnqlc'] = 'TENDQLCONV'
+varnames['tnqic'] = 'TENDQICONV'
+varnames['tnqrc'] = 'TENDQRCONV'
+varnames['tnqsnc'] = 'TENDQSCONV'
+
+varnames['tnqlshc'] = 'TENDQLSHCONV'
+varnames['tnqishc'] = 'TENDQISHCONV'
+varnames['tnqrshc'] = 'TENDQRSHCONV'
+varnames['tnqsnshc'] = 'TENDQSSHCONV'
+
+##########################################
+# 8.2 Flux de la physique
+
+varnames['wpqtp_pbl'] = 'ZWPQT_tur'
+varnames['wpthlp_pbl'] = 'WTHL_tur'
+varnames['wpqtp_conv'] = 'ZWPQT_dee'
+varnames['wpthlp_conv'] = 'WTHL_dee'
+
+##########################################
+# 9. Tendances liees au forcages
+
+varnames['tdt_ls'] = 'ZFT_ADV'
+varnames['tntnudg'] = 'ZFT_NUDG'
+varnames['qdt_ls'] = 'ZFQ_ADV'
+varnames['tnqnudg'] = 'ZFQ_NUDG'
+
+##########################################
+# 10. Divers
+
+varnames['Cp'] = 'PCP'
+varnames['Lv'] = 'PLH'
+
+##########################################
+# 11. Bilan eau et energie
+
+varnames['qflux'] = 'WATERFLUX'
+varnames['qfluxEv'] = 'WATERFLUXE'
+varnames['qfluxPr'] = 'WATERFLUXP'
+varnames['dwater'] = 'RDWATER'
+varnames['efluxTOA'] = 'EFLUXTOA'
+varnames['efluxSfc'] = 'EFLUXSFC'
+varnames['denergy'] = 'RDENERGY'
+varnames['RMSE9'] = 'RMSE9'
+varnames['RMSE0'] = 'RMSE0'
+varnames['RMSE1'] = 'RMSE1'
+varnames['RDMSE'] = 'RDMSE'
+varnames['msefluxSfc'] = 'MSEFLUXSFC'
+varnames['iQadv'] = 'TOTFORCQADV'
+varnames['iQnud'] = 'TOTFORCQNUD'
+varnames['iTadv'] = 'TOTFORCTADV'
+varnames['iTnud'] = 'TOTFORCTNUD'
+varnames['iUadv'] = 'TOTFORCUADV'
+varnames['iUnud'] = 'TOTFORCUNUD'
+varnames['iVadv'] = 'TOTFORCVADV'
+varnames['iVnud'] = 'TOTFORCVNUD'
+varnames['iEadv'] = 'TOTFORCEADV'
+varnames['iEnud'] = 'TOTFORCENUD'
+varnames['efluxSfcRad'] = 'EFLUXSFCRAD'
+varnames['efluxSfcTurb'] = 'EFLUXSFCTS'
+varnames['efluxSfcConv'] = 'EFLUXSFCCS'
+varnames['efluxSfcAdj'] = 'EFLUXSFCCAS'
+varnames['efluxSfcPrSen'] = 'EFLUXSFC1'
+varnames['efluxSfcPrLat'] = 'EFLUXSFC2'
+varnames['iMSEadv'] = 'MSEADV'
+varnames['iMSEnud'] = 'MSENUD'
+varnames['iMSEw'] = 'MSEW'
+varnames['iQw'] = 'WATERW'
+varnames['iEw'] = 'ENERGYW'
+
+##########################################
+# 12. Especes Gazeuses
+
+varnames['rCO2'] = 'ZCO2'
+varnames['rCH4'] = 'ZCH4'
+varnames['rN2O'] = 'ZN2O'
+varnames['rNO2'] = 'ZNO2'
+varnames['rCFC11'] = 'ZC11'
+varnames['rCFC12'] = 'ZC12'
+varnames['rCFC22'] = 'ZC22'
+varnames['rCCL4'] = 'ZCL4'
+varnames['rO3'] = 'ZOZN'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+varnames['alpha'] = 'ZALF'
+varnames['mu'] = 'ZFORM2'
+varnames['Tu'] = 'ZTN'
+varnames['Thu'] = 'ZTHN'
+varnames['qvu'] = 'ZQN'
+varnames['qcu'] = 'ZLN'
+
+##########################################
+# 14. Variables du schema PCMT
+
+varnames['alpha_up'] = 'PUDAL'
+varnames['w_up'] = 'ZUDW' #'ZUDW_ACPCMT' #'PUDW'
+varnames['omega_up'] = 'PUDOM'
+varnames['alpha_dn'] = 'PDDAL'
+varnames['w_dn'] = 'ZDDW' #'ZDDW_ACPCMT' #'PDDW'
+varnames['omega_dn'] = 'PDDOM'
+varnames['cape'] = 'PCAPE'
+varnames['T_up'] = 'ZTU_PCMT'
+varnames['qv_up'] = 'ZQU_PCMT'
+
+##########################################
+# 15. Variables pour le wake
+
+varnames['delta_t'] = 'PWAKEDELTAT'
+varnames['delta_q'] = 'PWAKEDELTAQ'
+varnames['d_delta_t_gw'] = 'PWAKEDDELTATGW'
+varnames['omgb_dth'] = 'PWAKEOMGBDTH'
+varnames['dp_omgb'] = 'PWAKEDPOMGB'
+varnames['dt_KE'] = 'PWAKEDTKE'
+varnames['dq_KE'] = 'PWAKEDQKE'
+varnames['dt_PBL'] = 'PWAKEDTPBL'
+varnames['dq_PBL'] = 'PWAKEDQPBL'
+varnames['omg_w'] = 'PWAKEOMG'
+varnames['dp_delt_omg'] = 'PWAKEDPDELTOMG'
+varnames['spread_w'] = 'PWAKESPREAD'
+varnames['delta_th'] = 'PWAKEDTH'
+varnames['dt_wake'] = 'PDTWAKE'
+varnames['dq_wake'] = 'PDQWAKE'
+varnames['t_undi'] = 'PTUNDI'
+varnames['q_undi'] = 'PQUNDI'
+varnames['d_delta_t'] = 'PWAKEDDELTAT'
+varnames['d_delta_q'] = 'PWAKEDDELTAQ'
+varnames['hw'] = 'PWAKEH'
+varnames['sigmaw'] = 'PWAKES'
+varnames['wake_pe'] = 'PWAKEPE'
+varnames['wake_fip'] = 'PWAKEFIP'
+varnames['wake_gfl'] = 'PWAKEGFL'
+varnames['Cstar'] = 'PWAKECSTAR'
+varnames['wdens'] = 'PWAKEDENS'
+varnames['dt_dn'] = 'ZDTDWN'
+varnames['dt_up'] = 'ZDTA'
+varnames['dq_dn'] = 'ZDQDWN'
+varnames['dq_up'] = 'ZDQA'
+varnames['Mf_dn'] = 'ZMDWN'
+varnames['Mf_up'] = 'ZMUP'
+varnames['sigd'] = 'ZSIGD'
+varnames['omgb'] = 'POMGB'
+varnames['t_undi_pcmt'] = 'ZTUNDI'
+varnames['q_undi_pcmt'] = 'ZQUNDI'
+varnames['t_wake_pcmt'] = 'ZTWAKE'
+varnames['q_wake_pcmt'] = 'ZQWAKE'
+varnames['qw_undi'] = 'ZQWUNDI'
+varnames['qw_wake'] = 'ZQWWAKE'
+varnames['Tw_wake'] = 'ZTWWAKE'
+varnames['Tw_undi'] = 'ZTWUNDI'
+varnames['qsat_undi'] = 'ZQSATUNDI'
+varnames['qsat_wake'] = 'ZQSATWAKE'
+
+#---------------------------------------------------------------------------------------------------
+#                        Long name of variables
+#---------------------------------------------------------------------------------------------------
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+names['pres']  = 'Pressure on Full Levels'
+names['p']  = 'Pressure on Full Levels'
+names['presH'] = 'Pressure on Half Levels'
+
+names['zg']    = 'Geopotential on Full Levels'
+names['zgH']   = 'Geopotential on Half Levels'
+
+names['rho']   = 'Air Volumic Mass'
+names['T']    = 'Air Temperature'
+names['qv']   = 'Specific Humidity'
+names['hur']   = 'Relative Humidity'
+names['ql']    = 'Specific Mass of Cloud Liquid Water'
+names['qi']    = 'Specific Mass of Cloud Ice Water'
+names['qr']    = 'Specific Mass of Rain'
+names['qsn']   = 'Specific Mass of Snow'
+
+names['qlc']   = 'Specific Mass of Convective Liquid Water'
+names['qic']   = 'Specific Mass of Convective Ice Water'
+names['qrc']   = 'Specific Mass of Convective Rain'
+names['qsnc']  = 'Specific Mass of Convective Snow'
+
+names['qlshc'] = 'Specific Mass of Shallow Convection Liquid Water'
+names['qishc'] = 'Specific Mass of Shallow Convection Ice Water'
+names['qrshc'] = 'Specific Mass of Shallow Convection Rain'
+names['qsnshc']= 'Specific Mass of Shallow Convection Snow'
+
+names['tke']   = 'Turbulent Kinetic Energy'
+
+names['th']    = 'Potential Temperature'
+names['thv']    = 'Virtual Potential Temperature'
+names['thl']    = 'Liquid Potential Temperature'
+names['thlv']    = 'Virtual Potential Temperature'
+
+names['qsat']  = 'Specific Humidity at Saturation'
+
+names['ua']    = 'Zonal Wind'
+names['va']    = 'Meridional Wind'
+names['wa']    = 'Vertical Velocity'
+names['wap']   = 'Vertical Pressure Velocity'
+
+##########################################
+# 2. Variables nuageuses
+
+names['cloud']    = 'Cloud Fraction'
+names['cls']   = 'Stratiform Cloud Fraction'
+names['cldtot']   = 'Total Cloud Fraction'
+names['cltc']  = 'Total Convective Cloud Fraction'
+names['cldlow']  = 'Total Low Cloud Fraction'
+names['cltm']  = 'Total Mid Cloud Fraction'
+names['clth']  = 'Total High Cloud Fraction'
+
+##########################################
+# 3. Variables pluies
+
+#names['precls']= 'Large-Scale Precipitation Flux'
+#names['snowls']= 'Large-Scale Snow Flux'
+#names['precc'] = 'Convective Precipitation Flux'
+#names['snowc'] = 'Convective Snow Flux'
+
+names['prect']    = 'Surface Precipitation'
+names['precl']  = 'Surface Large-Scale Precipitation'
+names['precc']   = 'Surface Convective Precipitation'
+names['ppr']   = 'Total Precipitation Profile'
+names['pprls'] = 'Large-Scale Precipitation Profile'
+names['pprc']  = 'Convective Precipitation Profile'
+
+##########################################
+# 4. Variables rayonnement
+
+names['rsdt']  = 'Downward SW Radiation at TOA'
+names['rsdtcs']= 'Clear-sky Downward SW Radiation at TOA'
+names['rldt']  = 'Downward LW Radiation at TOA'
+names['rldtcs']= 'Clear-sky Downward LW Radiation at TOA'
+names['rsut']  = 'Upward SW Radiation at TOA'
+names['rsutcs']= 'Clear-sky Upward SW Radiation at TOA'
+names['flnt']  = 'Upward LW Radiation at TOA'
+names['flntc']= 'Clear-sky Upward LW Radiation at TOA'
+names['fsnt']   = 'SW Radiation at TOA'
+names['fsntc'] = 'Clear-sky SW Radiation at TOA'
+names['rlt']   = 'LW Radiation at TOA'
+names['rltcs'] = 'Clear-sky LW Radiation at TOA'
+
+names['rsds']  = 'Downward SW Radiation at Surface'
+names['rsdscs']= 'Clear-sky Downward SW Radiation at Surface'
+names['rsus']  = 'Upward SW Radiation at Surface'
+names['rsuscs']= 'Clear-sky Upward SW Radiation at Surface'
+names['rlds']  = 'Downward LW Radiation at Surface'
+names['rldscs']= 'Clear-sky Downward LW Radiation at Surface'
+names['rlus']  = 'Upward LW Radiation at Surface'
+names['rluscs']= 'Clear-sky Upward LW Radiation at Surface'
+names['fsns']   = 'SW Radiation at Surface'
+names['fsnsc'] = 'Clear-sky SW Radiation at Surface'
+names['flns']   = 'LW Radiation at Surface'
+names['flnsc'] = 'Clear-sky LW Radiation at Surface'
+
+names['SWd'] = 'Downward SW Flux'
+names['SWu'] = 'Upward SW Flux'
+names['SWdcs'] = 'CS Downward SW Flux'
+names['SWucs'] = 'CS Upward SW Flux'
+names['SWnet'] = 'Net SW Flux'
+
+names['LWd'] = 'Downward LW Flux'
+names['LWu'] = 'Upward LW Flux'
+names['LWdcs'] = 'CS Downward LW Flux'
+names['LWucs'] = 'CS Upward LW Flux'
+names['LWnet'] = 'Net LW Flux'
+
+names['mu1'] = 'Sinus of zenith angle'
+names['mueff'] = 'Sinus of effective zenith angle'
+names['I0'] = 'Solar irradiance'
+names['daydur'] = 'Day duration'
+
+names['alb_ss'] = 'SW Surface Albedo'
+
+##########################################
+# 5. Variables flux de surface
+
+names['lh']  = 'Surface Latent Heat Flux'
+names['sh']  = 'Surface Sensible Heat Flux'
+names['hflsn'] = 'Surface Latent Heat Flux over Snow or Ice'
+
+names['evap']  = 'Evaporation over liquid water (or wet soil)'
+names['evapi'] = 'Evaporation over frozen soil'
+names['evapn'] = 'Evaporation over snow (or ice) and frozen soil'
+
+names['Cd'] = 'Surface Exchange Coefficient for Wind'
+names['Ch'] = 'Surface Exchange Coefficient for Heat'
+names['Ce'] = 'Surface Exchange Coefficient for Water Vapor'
+
+names['Cdn'] = 'Surface Exchange Neutral Coefficient for Wind'
+names['Chn'] = 'Surface Exchange Neutral Coefficient for Heat'
+names['Cen'] = 'Surface Exchange Neutral Coefficient for Water Vapor'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+names['precw']   = 'Precipitable Water'
+names['tglwp']   = 'Liquid Water Path'
+names['iwp']   = 'Ice Water Path'
+names['cwp']   = 'Cloud Water Path'
+
+##########################################
+# 7. Variables en surface
+
+names['tsair']   = '2-meter Air Temperature'
+names['huss']  = '2-meter Specific Humidity'
+names['hurs']  = '2-meter Relative Humidity'
+names['uas']   = '10-meter Zonal Wind'
+names['vas']   = '10-meter Meridional Wind'
+
+names['pblh']  = 'Planetary Boundary Layer Height'
+
+names['ts']    = 'Surface Temperature'
+
+##########################################
+# 8.1 Tendances de la physique
+
+names['Q1']    = 'Apparent Heat Source'
+names['Q2']    = 'Apparent Moisture Sink'
+names['QRad']  = 'Radiative Heating Rate'
+
+names['tnthl'] = 'Liquid Potential Temperature Tendency due to Physics'
+names['tnqt'] = 'Total Water Tendency due to Physics'
+
+names['tdt_sw'] = 'Temperature Tendency due to SW Radiation'
+names['tdt_lw'] = 'Temperature Tendency due to LW Radiation'
+names['tntrswcs'] = 'Temperature Tendency due to Clear-sky SW Radiation'
+names['tntrlwcs'] = 'Temperature Tendency due to Clear-sky LW Radiation'
+names['tdt_turb'] = 'Temperature Tendency due to Turbulence'
+names['tdt_cond'] = 'Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tdt_deep'] = 'Temperature Tendency due to Convection'
+names['tntshc'] = 'Temperature Tendency due to Shallow Convection'
+names['tntd'] = 'Temperature Tendency due to Other Processes'
+
+names['tnthrsw'] = 'Potential Temperature Tendency due to SW Radiation'
+names['tnthrlw'] = 'Potential Temperature Tendency due to LW Radiation'
+names['tnthrswcs'] = 'Potential Temperature Tendency due to Clear-sky SW Radiation'
+names['tnthrlwcs'] = 'Potential Temperature Tendency due to Clear-sky LW Radiation'
+names['tnthpbl'] = 'Potential Temperature Tendency due to Turbulence'
+names['tnthlscp'] = 'Potential Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tnthc'] = 'Potential Temperature Tendency due to Convection'
+names['tnthshc'] = 'Potential Temperature Tendency due to Shallow Convection'
+names['tnthd'] = 'Potential Temperature Tendency due to Other Processes'
+
+names['qdt_turb'] = 'Specific Humidity Tendency due to Turbulence'
+names['qdt_cond'] = 'Specific Humidity Tendency due to Large-scale Condensation and Precipitation'
+names['qdt_deep'] = 'Specific Humidity Tendency due to Convection'
+names['tnqvshc'] = 'Specific Humidity Tendency due to Shallow Convection'
+names['tnqvd'] = 'Specific Humidity Tendency due to Other Processes'
+
+names['tnupbl'] = 'Zonal Wind Tendency due to Turbulence'
+names['tnuc'] = 'Zonal Wind Tendency due to Convection'
+names['tnushc'] = 'Zonal Wind Tendency due to Shallow Convection'
+names['tnud'] = 'Zonal Wind Tendency due to Other Processes'
+
+names['tnvpbl'] = 'Meridional Wind Tendency due to Turbulence'
+names['tnvc'] = 'Meridional Wind Tendency due to Convection'
+names['tnvshc'] = 'Meridional Wind Tendency due to Shallow Convection'
+names['tnvd'] = 'Meridional Wind Tendency due to Other Processes'
+
+names['tnthlrsw'] = 'Liquid Potential Temperature Tendency due to SW Radiation'
+names['tnthlrlw'] = 'Liquid Potential Temperature Tendency due to LW Radiation'
+names['tnthlrswcs'] = 'Liquid Potential Temperature Tendency due to Clear-sky SW Radiation'
+names['tnthlrlwcs'] = 'Liquid Potential Temperature Tendency due to Clear-sky LW Radiation'
+names['tnthlpbl'] = 'Liquid Potential Temperature Tendency due to Turbulence'
+names['tnthllscp'] = 'Liquid Potential Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tnthlc'] = 'Liquid Potential Temperature Tendency due to Convection'
+names['tnthlshc'] = 'Liquid Potential Temperature Tendency due to Shallow Convection'
+names['tnthld'] = 'Liquid Potential Temperature Tendency due to Other Processes'
+
+names['tnqtpbl'] = 'Total Water Tendency due to Turbulence'
+names['tnqtlscp'] = 'Total Water Tendency due to Large-scale Condensation and Precipitation'
+names['tnqtc'] = 'Total Water Tendency due to Convection'
+names['tnqtshc'] = 'Total Water Tendency due to Shallow Convection'
+names['tnqtd'] = 'Total Water Tendency due to Other Processes'
+
+names['tnql'] = 'Liquid Water Tendency due to Physics'
+names['tnqi'] = 'Ice Water Tendency due to Physics'
+names['tnqr'] = 'Rain Tendency due to Physics'
+names['tnqsn'] = 'Snow Tendency due to Physics'
+
+names['tnqlc'] = 'Convective Liquid Water Tendency due to Physics'
+names['tnqic'] = 'Convective Ice Water Tendency due to Physics'
+names['tnqrc'] = 'Convective Rain Tendency due to Physics'
+names['tnqsnc'] = 'Convective Snow Tendency due to Physics'
+
+names['tnqlshc'] = 'Shallow Convection Liquid Water Tendency due to Physics'
+names['tnqishc'] = 'Shallow Convection Ice Water Tendency due to Physics'
+names['tnqrshc'] = 'Shallow Convection Rain Tendency due to Physics'
+names['tnqsnshc'] = 'Shallow Convection Snow Tendency due to Physics'
+
+##########################################
+# 8.2 Flux de la physique
+
+names['wpqtp_pbl'] = 'Total Water Flux due to Turbulence'
+names['wpthlp_pbl'] = 'Liquid Potential Temperature Flux due to Turbulence'
+names['wpqtp_conv'] = 'Total Water flux due to Convection'
+names['wpthlp_conv'] = 'Liquid Potential Temperature Flux due to Convection'
+
+##########################################
+# 9. Tendances liees au forcages
+
+names['tdt_ls'] = 'Temperature Tendency due to Horizontal Advection'
+names['tntnudg'] = 'Temperature Tendency due to Nudging'
+names['qdt_ls'] = 'Specific Humidity Tendency due to Horizontal Advection'
+names['tnqnudg'] = 'Specific Humidity Tendency due to Nudging'
+
+##########################################
+# 10. Divers
+
+names['Cp'] = 'Heat Capacity of Air'
+names['Lv'] = 'Latent Heat of Vaporization'
+
+##########################################
+# 11. Bilan eau et energie
+
+names['qflux'] = 'Net Flux of water in the atmosphere'
+names['qfluxPr'] = 'Net Flux of water at Surface due to Precipitation'
+names['qfluxEv'] = 'Net Flux of water at Surface due to Evaporation'
+names['dwater'] = 'RDWATER'
+names['efluxTOA'] = 'Net Enthalpy Flux at TOA'
+names['efluxSfc'] = 'Net Enthalpy Flux at Surface'
+names['denergy'] = 'RDENERGY'
+
+names['RMSE9'] = 'RMSE9'
+names['RMSE0'] = 'RMSE0'
+names['RMSE1'] = 'RMSE1'
+names['RDMSE'] = 'RDMSE'
+names['msefluxSfc'] = 'Net Moist Static Energy Flux at Surface'
+names['iQadv'] = 'Horizontal Advection of moisture integrated over the atmospheric column'
+names['iQnud'] = 'Moisture Tendency due to nudging integrated over the atmospheric column'
+names['iTadv'] = 'Horizontal Advection of temperature integrated over the atmospheric column'
+names['iTnud'] = 'Temperature Tendency due to nudging integrated over the atmospheric column'
+names['iUadv'] = 'Horizontal Advection of zonal wind integrated over the atmospheric column'
+names['iUnud'] = 'Zonal Wind Tendency due to nudging integrated over the atmospheric column'
+names['iVadv'] = 'Horizontal Advection of meridional wind integrated over the atmospheric column'
+names['iVnud'] = 'Meridional Wind Tendency due to nudging integrated over the atmospheric column'
+names['iEadv'] = 'Horizontal Advection of enthalpy integrated over the atmospheric column'
+names['iEnud'] = 'Enthalpy Tendency due to nudging integrated over the atmospheric column'
+
+names['efluxSfcRad'] = 'Surface Enthalpy Flux due to radiation'
+names['efluxSfcTurb'] = 'Surface Enthalpy Flux due to turbulence'
+names['efluxSfcConv'] = 'Surface Enthalpy Flux due to convective eddies'
+names['efluxSfcAdj'] = 'Surface Enthalpy Flux due to dry adjustment'
+names['efluxSfcPrSen'] = 'Surface Enthalpy Flux due to sensible heat of precipitation'
+names['efluxSfcPrLat'] = 'Surface Enthalpy Flux due to latent heat of precipitation'
+names['iMSEadv'] = 'Horizontal Advection of moist static energy integrated over the atmospheric column'
+names['iMSEnud'] = 'Moist Static Energy Tendency due to nudging integrated over the atmospheric column'
+names['iMSEw'] = 'Vertical Advection of moist static energy integrated over the atmospheric column'
+names['iQw'] = 'Vertical Advection of specific humidity integrated over the atmospheric column'
+names['iEw'] = 'Vertical Advection of enthalpy integrated over the atmospheric column'
+
+##########################################
+# 12. Especes Gazeuses
+
+names['rCO2'] = 'CO2 Mixing Ratio'
+names['rCH4'] = 'CH4 Mixing Ratio'
+names['rN2O'] = 'N2O Mixing Ratio'
+names['rNO2'] = 'NO2 Mixing Ratio'
+names['rCFC11'] = 'CFC11 Mixing Ratio'
+names['rCFC12'] = 'CFC12 Mixing Ratio'
+names['rCFC22'] = 'CFC22 Mixing Ratio'
+names['rCCL4'] = 'CCL4 Mixing Ratio'
+names['rO3'] = 'O3 Mixing Ratio'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+names['alpha'] = 'Closure coefficient'
+names['mu'] = 'Mass Flux'
+names['Tu'] = 'Updraft Temperature'
+names['Thu'] = 'Updraft Potential Temperature'
+names['qvu'] = 'Updraft Specific Humidity'
+names['qcu'] = 'Updraft Condensed Water'
+
+##########################################
+# 14. Variables du schema PCMT
+
+names['alpha_up'] = 'Convective Updraft Fraction'
+names['w_up'] = 'Convective Updraft Velocity'
+names['omega_up'] = 'Convective Updraft Pressure Velocity'
+names['alpha_dn'] = 'Convective Downdraft Fraction'
+names['w_dn'] = 'Convective Downdraft Velocity'
+names['omega_dn'] = 'Convective Downdraft Pressure Velocity'
+names['cape'] = 'CAPE'
+names['T_up'] = 'Convective Updraft Temperature'
+names['qv_up'] = 'Convective Updraft Specific Humidity'
+
+##########################################
+# 15. Variables pour le wake
+
+names['delta_t'] = 'delta T'
+names['delta_q'] = 'delta q'
+names['d_delta_t_gw'] = ' delta T tendency due to GW'
+names['omgb_dth'] = 'flux of delta_theta transported by LS omega'
+names['dp_omgb'] = 'vertical gradient of large scale omega'
+names['dt_KE'] = 'differential heating (wake-unperturbed) CONV'
+names['dq_KE'] = 'differential moistening (wake-unperturbed) CONV'
+names['dt_PBL'] = 'differential heating (wake-unperturbed) PBL'
+names['dq_PBL'] = 'differential moistening (wake-unperturbed) PBL'
+names['omg_w'] = 'Wake verticale velocity'
+names['dp_delt_omg'] = 'vertical gradient of wake_omg'
+names['spread_w'] = 'Spreading term in wake_delt'
+names['delta_th'] = 'Potential Temperature Difference'
+names['dt_wake'] = 'T tendency due to wake'
+names['dq_wake'] = 'q tendency due to wake'
+names['t_undi'] = 'Temperature in unperturbed area'
+names['q_undi'] = 'Specific humidity in unperturbed area'
+names['d_delta_t'] = 'delta T tendency'
+names['d_delta_q'] = 'delta q tendency'
+names['hw'] = 'Wake depth'
+names['sigmaw'] = 'wake fractional area'
+names['wake_pe'] = 'Wake Potential Energy (WAPE)'
+names['wake_fip'] = 'wake ALP'
+names['wake_gfl'] = 'Wake Gust Front Length'
+names['Cstar'] = 'Wake spreading velocity'
+names['wdens'] = 'Wake density'
+names['dt_dn'] = 'T tendendy due to downdrafts'
+names['dt_up'] = 'T tendency due to updrafts'
+names['dq_dn'] = 'qv tendendy due to downdrafts'
+names['dq_up'] = 'qv tendency due to updrafts'
+names['Mf_dn'] = 'Downdraft Mass flux'
+names['Mf_up'] = 'Updraft Mass flux'
+names['sigd'] = 'Downdraft area fraction'
+names['omgb'] = 'LS Vertical Velocity'
+names['t_undi_pcmt'] = 'Temperature in undisturbed area (PCMT)'
+names['q_undi_pcmt'] = 'Specific Humidity in undisturbed area (PCMT)'
+names['t_wake_pcmt'] = 'Temperature in wake (PCMT)'
+names['q_wake_pcmt'] = 'Specific Humidity in wake (PCMT)'
+names['qw_undi'] = 'Wet-bulb Specific Humidity in undisturbed area'
+names['qw_wake'] = 'Wet-bulb Specific Humidity in wake'
+names['Tw_wake'] = 'Wet-bulb Temperature in wake'
+names['Tw_undi'] = 'Wet-bulb Temperature in undisturbed area'
+names['qsat_undi'] = 'Saturation Specific Humidity in undisturbed area'
+names['qsat_wake'] = 'Saturation Specific Humidity in wake'
+
+
+#---------------------------------------------------------------------------------------------------
+#                        Units
+#---------------------------------------------------------------------------------------------------
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+units['pres']  = 'Pa'
+units['p']  = 'Pa'
+units['presH'] = 'Pa'
+
+units['zg']    = 'm2/s2'
+units['zgH']   = 'm2/s2'
+
+units['rho']   = 'kg/m3'
+units['T']    = 'K'
+units['qv']   = 'kg/kg'
+units['hur']   = '-'
+units['ql']    = 'kg/kg'
+units['qi']    = 'kg/kg'
+units['qr']    = 'kg/kg'
+units['qsn']   = 'kg/kg'
+
+units['qlc']   = 'kg/kg'
+units['qic']   = 'kg/kg'
+units['qrc']   = 'kg/kg'
+units['qsnc']  = 'kg/kg'
+
+units['qlshc'] = 'kg/kg'
+units['qishc'] = 'kg/kg'
+units['qrshc'] = 'kg/kg'
+units['qsnshc']= 'kg/kg'
+
+
+units['tke']   = 'm2/s2'
+
+units['th']    = 'K'
+units['thv']    = 'K'
+units['thl']    = 'K'
+units['thlv']    = 'K'
+
+units['qsat']  = 'kg/kg'
+
+units['ua']    = 'm/s'
+units['va']    = 'm/s'
+units['wa']    = 'm/s'
+units['wap']   = 'Pa/s'
+
+##########################################
+# 2. Variables nuageuses
+
+units['cloud']    = '-'
+units['cls']   = '-'
+units['cldtot']   = '-'
+units['cltc']  = '-'
+units['cldlow']  = '-'
+units['cltm']  = '-'
+units['clth']  = '-'
+
+##########################################
+# 3. Variables pluies
+
+#units['precls']= 'kg/m2/s'
+#units['snowls']= 'kg/m2/s'
+#units['precc'] = 'kg/m2/s'
+#units['snowc'] = 'kg/m2/s'
+
+units['prect']  = 'kg/m2/s'
+units['precl']  = 'kg/m2/s'
+units['precc']  = 'kg/m2/s'
+units['ppr'] = 'kg/m2/s'
+units['pprls'] = 'kg/m2/s'
+units['pprc'] = 'kg/m2/s'
+
+##########################################
+# 4. Variables rayonnement
+
+units['rsdt']  = 'W/m2'
+units['rsdtcs']= 'W/m2'
+units['rldt']  = 'W/m2'
+units['rldtcs']= 'W/m2'
+units['rsut']  = 'W/m2'
+units['rsutcs']= 'W/m2'
+units['flnt']  = 'W/m2'
+units['flntc']= 'W/m2'
+units['fsnt']   = 'W/m2'
+units['fsntc'] = 'W/m2'
+units['rlt']   = 'W/m2'
+units['rltcs'] = 'W/m2'
+
+units['rsds']  = 'W/m2'
+units['rsdscs']= 'W/m2'
+units['rsus']  = 'W/m2'
+units['rsuscs']= 'W/m2'
+units['rlds']  = 'W/m2'
+units['rldscs']= 'W/m2'
+units['rlus']  = 'W/m2'
+units['rluscs']= 'W/m2'
+units['fsns']   = 'W/m2'
+units['fsnsc'] = 'W/m2'
+units['flns']   = 'W/m2'
+units['flnsc'] = 'W/m2'
+
+units['SWd'] = 'W/m2'
+units['SWu'] = 'W/m2'
+units['SWdcs'] = 'W/m2'
+units['SWucs'] = 'W/m2'
+units['SWnet'] = 'W/m2'
+
+units['LWd'] = 'W/m2'
+units['LWu'] = 'W/m2'
+units['LWdcs'] = 'W/m2'
+units['LWucs'] = 'W/m2'
+units['LWnet'] = 'W/m2'
+
+units['mu1'] = '-'
+units['mueff'] = '-'
+units['I0'] = 'W/m2'
+units['daydur'] = 's'
+
+units['alb_ss'] = '-'
+
+##########################################
+# 5. Variables flux de surface
+
+units['lh']  = 'W/m2'
+units['sh']  = 'W/m2'
+units['hflsn'] = 'W/m2'
+
+units['evap'] = 'kg/m2/s'
+units['evapi'] = 'kg/m2/s'
+units['evapn'] = 'kg/m2/s'
+
+units['Cd'] = '-'
+units['Ch'] = '-'
+units['Ce'] = '-'
+
+units['Cdn'] = '-'
+units['Chn'] = '-'
+units['Cen'] = '-'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+units['precw']   = 'kg/m2'
+units['tglwp']   = 'kg/m2'
+units['iwp']   = 'kg/m2'
+units['cwp']   = 'kg/m2'
+
+##########################################
+# 7. Variables en surface
+
+units['tsair']   = 'K'
+units['huss']  = 'kg/kg'
+units['hurs']  = '-'
+units['uas']   = 'm/s'
+units['vas']   = 'm/s'
+
+units['pblh']  = 'm'
+
+units['ts']    = 'K'
+
+##########################################
+# 8.1 Tendances de la physique
+
+units['Q1']    = 'K/s'
+units['Q2']    = 'K/s'
+units['QRad']  = 'K/s'
+
+units['tnthl'] = 'K/s'
+units['tnqt'] = 'kg/kg/s'
+
+units['tdt_sw'] = 'K/s'
+units['tdt_lw'] = 'K/s'
+units['tntrswcs'] = 'K/s'
+units['tntrlwcs'] = 'K/s'
+units['tdt_turb'] = 'K/s'
+units['tdt_cond'] = 'K/s'
+units['tdt_deep'] = 'K/s'
+units['tntshc'] = 'K/s'
+units['tntd'] = 'K/s'
+
+units['tnthrsw'] = 'K/s'
+units['tnthrlw'] = 'K/s'
+units['tnthrswcs'] = 'K/s'
+units['tnthrlwcs'] = 'K/s'
+units['tnthpbl'] = 'K/s'
+units['tnthlscp'] = 'K/s'
+units['tnthc'] = 'K/s'
+units['tnthshc'] = 'K/s'
+units['tnthd'] = 'K/s'
+
+units['qdt_turb'] = 'kg/kg/s'
+units['qdt_cond'] = 'kg/kg/s'
+units['qdt_deep'] = 'kg/kg/s'
+units['tnqvshc'] = 'kg/kg/s'
+units['tnqvd'] = 'kg/kg/s'
+
+units['tnupbl'] = 'm/s2'
+units['tnuc'] = 'm/s2'
+units['tnushc'] = 'm/s2'
+units['tnud'] = 'm/s2'
+
+units['tnvpbl'] = 'm/s2'
+units['tnvc'] = 'm/s2'
+units['tnvshc'] = 'm/s2'
+units['tnvd'] = 'm/s2'
+
+units['tnthlrsw'] = 'K/s'
+units['tnthlrlw'] = 'K/s'
+units['tnthlrswcs'] = 'K/s'
+units['tnthlrlwcs'] = 'K/s'
+units['tnthlpbl'] = 'K/s'
+units['tnthllscp'] = 'K/s'
+units['tnthlc'] = 'K/s'
+units['tnthlshc'] = 'K/s'
+units['tnthld'] = 'K/s'
+
+units['tnqtpbl'] = 'kg/kg/s'
+units['tnqtlscp'] = 'kg/kg/s'
+units['tnqtc'] = 'kg/kg/s'
+units['tnqtshc'] = 'kg/kg/s'
+units['tnqtd'] = 'kg/kg/s'
+
+units['tnql'] = 'kg/kg/s'
+units['tnqi'] = 'kg/kg/s'
+units['tnqr'] = 'kg/kg/s'
+units['tnqsn'] = 'kg/kg/s'
+
+units['tnqlc'] = 'kg/kg/s'
+units['tnqic'] = 'kg/kg/s'
+units['tnqrc'] = 'kg/kg/s'
+units['tnqsnc'] = 'kg/kg/s'
+
+units['tnqlshc'] = 'kg/kg/s'
+units['tnqishc'] = 'kg/kg/s'
+units['tnqrshc'] = 'kg/kg/s'
+units['tnqsnshc'] = 'kg/kg/s'
+
+##########################################
+# 8.2 Flux de la physique
+
+units['wpqtp_pbl'] = 'kg kg-1 m s-1'
+units['wpthlp_pbl'] = 'K m s-1'
+units['wpqtp_conv'] = 'kg kg-1 m s-1'
+units['wpthlp_conv'] = 'K m s-1'
+
+##########################################
+# 9. Tendances liees au forcages
+
+units['tdt_ls'] = 'K/s'
+units['tntnudg'] = 'K/s'
+units['qdt_ls'] = 'kg/kg/s'
+units['tnqnudg'] = 'kg/kg/s'
+
+##########################################
+# 10. Divers
+
+units['Cp'] = 'J/K/kg'
+units['Lv'] = 'J/kg'
+
+##########################################
+# 11. Bilan eau et energie
+
+units['qflux'] = 'kg/m2/s'
+units['qfluxPr'] = 'kg/m2/s'
+units['qfluxEv'] = 'kg/m2/s'
+units['dwater'] = 'kg/m2'
+units['efluxTOA'] = 'W/m2'
+units['efluxSfc'] = 'W/m2'
+units['denergy'] = 'J/kg'
+
+units['RMSE9'] = '-'
+units['RMSE0'] = '-'
+units['RMSE1'] = '-'
+units['RDMSE'] = '-'
+units['msefluxSfc'] = 'W/m2'
+units['iQadv'] = 'kg/m2/s'
+units['iQnud'] = 'kg/m2/s'
+units['iTadv'] = 'K kg/m2/s'
+units['iTnud'] = 'K kg/m2/s'
+units['iUadv'] = 'm2/s2'
+units['iUnud'] = 'm2/s2'
+units['iVadv'] = 'm2/s2'
+units['iVnud'] = 'm2/s2'
+units['iEadv'] = 'W/m2'
+units['iEnud'] = 'W/m2'
+
+units['efluxSfcRad'] = 'W/m2'
+units['efluxSfcTurb'] = 'W/m2'
+units['efluxSfcConv'] = 'W/m2'
+units['efluxSfcAdj'] = 'W/m2'
+units['efluxSfcPrSen'] = 'W/m2'
+units['efluxSfcPrLat'] = 'W/m2'
+
+units['iMSEadv'] = 'W/m2'
+units['iMSEnud'] = 'W/m2'
+units['iMSEw'] = 'W/m2'
+units['iQw'] = 'kg/m2/s'
+units['iEw'] = 'W/m2'
+
+##########################################
+# 12. Especes Gazeuses
+
+units['rCO2'] = 'kg/kg'
+units['rCH4'] = 'kg/kg'
+units['rN2O'] = 'kg/kg'
+units['rNO2'] = 'kg/kg'
+units['rCFC11'] = 'kg/kg'
+units['rCFC12'] = 'kg/kg'
+units['rCFC22'] = 'kg/kg'
+units['rCCL4'] = 'kg/kg'
+units['rO3'] = 'kg/kg'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+units['alpha'] = '-'
+units['mu'] = 'kg/m2/s'
+units['Tu'] = 'K'
+units['Thu'] = 'K'
+units['qvu'] = 'kg/kg'
+units['qcu'] = 'kg/kg'
+
+##########################################
+# 14. Variables du schema PCMT
+
+units['alpha_up'] = '-'
+units['w_up'] = 'm/s'
+units['omega_up'] = 'Pa/s'
+units['alpha_dn'] = '-'
+units['w_dn'] = 'm/s'
+units['omega_dn'] = 'Pa/s'
+units['cape'] = 'J/kg'
+units['T_up'] = 'K'
+units['qv_up'] = 'kg/kg'
+
+##########################################
+# 15. Variables pour le wake
+
+units['delta_t'] = 'K'
+units['delta_q'] = 'kg/kg'
+units['d_delta_t_gw'] = 'K/s'
+units['omgb_dth'] = 'K/s'
+units['dp_omgb'] = '/s'
+units['dt_KE'] = 'K/s'
+units['dq_KE'] = 'kg/kg/s'
+units['dt_PBL'] = 'K/s'
+units['dq_PBL'] = 'kg/kg/S'
+units['omg_w'] = 'Pa/s'
+units['dp_delt_omg'] = '/s'
+units['spread_w'] = 'K/s'
+units['delta_th'] = 'K'
+units['dt_wake'] = 'K/s'
+units['dq_wake'] = 'K_s'
+units['t_undi'] = 'K'
+units['q_undi'] = 'kg/kg'
+units['d_delta_t'] = 'K/s'
+units['d_delta_q'] = 'kg/kg/s'
+units['hw'] = 'm'
+units['sigmaw'] = '-'
+units['wake_pe'] = 'J/kg'
+units['wake_fip'] = 'W/m2'
+units['wake_gfl'] = 'm'
+units['Cstar'] = 'm/s'
+units['wdens'] = '/m2'
+units['dt_dn'] = 'K/s'
+units['dt_up'] = 'K/s'
+units['dq_dn'] = 'kg/kg/s'
+units['dq_up'] = 'kg/kg/s'
+units['Mf_dn'] = 'kg/m2/s'
+units['Mf_up'] = 'kg/m2/s'
+units['sigd'] = '-'
+units['omgb'] = 'Pa/s'
+units['t_undi_pcmt'] = 'K'
+units['q_undi_pcmt'] = 'kg/kg'
+units['t_wake_pcmt'] = 'K'
+units['q_wake_pcmt'] = 'kg/kg'
+units['qw_undi'] = 'kg/kg'
+units['qw_wake'] = 'kg/kg'
+units['Tw_wake'] = 'K'
+units['Tw_undi'] = 'K'
+units['qsat_undi'] = 'kg/kg'
+units['qsat_wake'] = 'kg/kg'
+
+
diff --git a/UTIL/post.old/variables_DEPHY.py b/UTIL/post.old/variables_DEPHY.py
new file mode 100644
index 0000000..263ced5
--- /dev/null
+++ b/UTIL/post.old/variables_DEPHY.py
@@ -0,0 +1,1490 @@
+#pres et presH joue un role particulier donc doivent etre definies
+varnames = {}
+names = {}
+units = {}
+
+#---------------------------------------------------------------------------------------------------
+#                        Variable in ARPEGE/MUSC
+#---------------------------------------------------------------------------------------------------
+
+# 1. Variables dynamiques et thermodynamiques
+#      pf(pres), presH, zg, zgH, rho, temp(ta), qv(hus), hur, ql, qi, qr, qsn, tke, theta(th), thv, thl, thlv, qsat,
+#      u(ua), v(va), wa, wap
+#      qlc, qic, qrc, qsnc, qlshc, qishc, qrshc, qsnshc
+# 2. Variables nuageuses
+#      rneb(cl), cls, cc (clt), cltc, cltl, cltm, clth
+# 3. Variables pluies
+#      precls, snowls, precc, snowc, rain(pr), prls, prc, ppr, pprls, pprc    
+# 4. Variables rayonnement
+#      rsdt, rsdtcs, rldt, rldtcs, rsut, rsutcs, rlut, rlutcs, rst, rstcs, rlt, rltcs
+#      rsds, rsdscs, rsus, rsuscs, rlds, rldscs, rlus, rluscs, rss, rsscs, rls, rlscs
+#      SWd, SWu, SWdcs, SWucs, SWnet, LWd, LWu, LWdcs, LWucs, LWnet
+#      mu1, mueff, I0, alb_ss
+# 5. Variables flux de surface
+#      shf(hfss), lhf(hfls), hflsn
+#      evap, evapi, evapn
+#      tauu, tauv, ustar
+#      Cd, Ch, Ce, Cdn, Chn, Cen
+#      Ugr
+#      z0, z0h, zref, tsurf, qsurf
+# 6. Variables integrees sur la colonne
+#      prw, lwp, iwp, cwp
+# 7. Variables en surface
+#      t2m(tas), huss, hurs, uas, vas, pblh, ts
+# 8.1 Tendances de la physique
+#      Q1, Q2, Qrad
+#      tnthl, tnqt
+#      tntrswn tntrlw, tntrswcs, tntrlwcs, tntpbl, tntlscp, tntc, tntshc, tntd
+#      tnthrswn tnthrlw, tnthrswcs, tnthrlwcs, tnthpbl, tnthlscp, tnthc, tnthshc, tnthd
+#      tnqvpbl, tnqvlscp, tnqvc, tnqvshc, tnqvd
+#      tnupbl, tnuc, tnushc, tnud, tnvpbl, tnvc, tnvshc, tnvd
+#      tnthlrswn tnthlrlw, tnthlrswcs, tnthlrlwcs, tnthlpbl, tnthllscp, tnthlc, tnthlshc, tnthld
+#      tnqtpbl, tnqtlscp, tnqtc, tnqtshc, tnqtd
+#      tnql, tnqi, tnqr, tnqsn
+#      tnqlc, tnqic, tnqrc, tnqsnc
+#      tnqlshc, tnqishc, tnqrshc, tnqsnc
+#      tntcas, tntcs, tntfplcl, tntfplcn, tntfccql, tntfecl, tntfccqn, tntfecn, tntfhimcc
+#      tntfplsl, tntfplsn, tntfcsql, tntfesl, tntfcsqn, tntfesn
+# 8.2 Flux de la physique
+#      wpqtp_pbl, wpthlp_pbl, wpqtp_conv, wpthlp_conv
+# 9. Tendances liees au forcages
+#      tntadv, tntnudg, tnqadv, tnqnudg
+# 10. Divers
+#      Cp, Lv
+# 11. Bilan eau et energie
+#      qflux, qfluxPr, qfluxEv, dwater, efluxTOA, efluxSfc, denergy
+#      RMSE9, RMSE0, RMSE1, RDMSE, msefluxSfc
+#      iQadv, iQnud, iTadv, iTnud, iUadv, iUnud, iVadv, iVnud, iEadv, iEnud
+#      efluxSfcRad, efluxSfcTurb, efluxSfcConv, efluxSfcAdj, efluxSfcPrSen, efluxSfcPrLat
+#      iMSEadv, iMSEnud, iQw, iEw
+# 12. Especes Gazeuses
+#      rCO2, rCH4, rN2O, rNO2, rCFC11, rCFC12, rCFC22, rCCL4, rO3
+# 13. Variables du schema de convection Bougeault 1985
+#      alpha, Mf, Tu, Thu, qvu, qcu
+# 14. Variables du schema PCMT
+#      alpha_up, w_up, omega_up, alpha_dn, w_dn, omega_dn, cape, T_up, qv_up, omega_ref
+# 15. Variables pour le wake
+#      delta_t, delta_q, d_delta_t_gw, omgb_dth, omgb, dt_KE, dq_KE, dt_PBL, dq_PBL
+#      omg_w, dp_delt_omg, spread_w, delta_th, dt_wake, dq_wake, t_undi, q_undi, 
+#      d_delta_t, d_delta_q,
+#      hw, sigmaw, wake_pe, wake_fip, wake_gfl, Cstar, wdens
+#      dt_dn, dt_up, dq_dn, dq_up, Mf_dn, Mf_up, sigd, omgb
+#      t_undi_pcmt, q_undi_pcmt, t_wake_pcmt, q_wake_pcmt
+#      qw_undi, qw_wake, Tw_wake, Tw_undi, qsat_undi, qsat_wake
+# 16. Variables pour la turbulence
+#      Q11, igs, igs2, igs2turb, igs2conv, sigs, sigs2, sigs2turb, sigs2conv, mlen
+#      Q11min, Q11max, acoef, sigc0, sigc1
+# 17. Variables COSP
+#      frac_out
+#      cltcalipso, cllcalipso, clmcalipso, clhcalipso, clcalipso
+#      cllcalipsoice, clmcalipsoice, clhcalipsoice, cltcalipsoice
+#      cllcalipsoliq, clmcalipsoliq, clhcalipsoliq, cltcalipsoliq
+#      cllcalipsoun, clmcalipsoun, clhcalipsoun, cltcalipsoun
+#      clcalipso, lidarBetaMol532
+#      clcalipsoice, clcalipsoliq, clcalipsoun, 
+#      clcalipsotmp, clcalipsotmpice, clcalipsotmpliq, clcalipsotmpun
+#      parasolRefl
+#      atb532, cfadLidarsr532
+#      dbze94, cfadDbze94
+#      cltlidarradar, clcalipso2
+#      cltisccp, pctisccp, tauisccp, albisccp, meantbisccp, meantbclrisccp, 
+#      boxtauisccp, boxptopisccp
+#      clisccp
+#      cltmodis, clwmodis, climodis, clhmodis, clmmodis, cllmodis
+#      tautmodis, tauwmodis, tauimodis, tautlogmodis, tauwlogmodis, tauilogmodis
+#      reffclwmodis, reffclimodis
+#      pctmodis, lwpmodis, iwpmodis
+#      clmodis
+#      clMISR
+#      COSP input : 
+#      'ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP',
+#      'ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP',
+#      'ZU_COSP','ZV_COSP',
+#      'ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP',
+#      'ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP',
+#      'ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP',
+#      'ZRADLP_COSP','ZRADIP_COSP',
+#      'ZTAUSW_COSP','ZEMILW_COSP'
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+varnames['pf']  = 'PAPRSF'
+varnames['presH'] = 'PAPRS'
+
+varnames['zf']    = 'PAPHIF'
+varnames['zgH']   = 'PAPHI'
+
+varnames['rho']   = 'RHO'
+varnames['temp']    = 'PT'
+varnames['qv']   = 'PQ'
+varnames['hur']   = 'PRH'
+varnames['ql']    = 'PQLI'
+varnames['qi']    = 'PQICE'
+varnames['qr']    = 'PQR'
+varnames['qsn']   = 'PQSN'
+
+varnames['qlc']   = 'PQLCONV'
+varnames['qic']   = 'PQICONV'
+varnames['qrc']   = 'PQRCONV'
+varnames['qsnc']  = 'PQSCONV'
+
+varnames['qlshc'] = 'PQLSHCONV'
+varnames['qishc'] = 'PQISHCONV'
+varnames['qrshc'] = 'PQRSHCONV'
+varnames['qsnshc']= 'PQSSHCONV'
+
+varnames['tke']   = 'PECT'
+
+varnames['theta']    = 'THETA'
+varnames['thv']   = 'THETAV'
+varnames['thl']   = 'THETAL'
+varnames['thlv']  = 'THETAVL'
+
+varnames['qsat']  = 'PQSAT'
+
+varnames['u']    = 'PU'
+varnames['v']    = 'PV'
+varnames['wa']    = 'ZW'
+varnames['wap']   = 'ZOMEGA'
+
+##########################################
+# 2. Variables nuageuses
+
+varnames['rneb']    = 'PNEB'
+varnames['cls']   = 'ZNEBS'
+varnames['cc']   = 'PCLCT'
+varnames['cltc']  = 'PCLCC'
+varnames['cltl']  = 'PCLCL'
+varnames['cltm']  = 'PCLCM'
+varnames['clth']  = 'PCLCH'
+
+##########################################
+# 3. Variables pluies
+
+varnames['precls']= 'PFPLSL'
+varnames['snowls']= 'PFPLSN'
+varnames['precc'] = 'PFPLCL'
+varnames['snowc'] = 'PFPLCN'
+
+varnames['rain']    = 'PRECS_TOT'
+varnames['prls']  = 'PRECS_LS'
+varnames['prc']   = 'PRECS_CONV'
+varnames['ppr']   = 'PREC_TOT'
+varnames['pprls'] = 'PREC_LS'
+varnames['pprc']  = 'PREC_C'
+
+##########################################
+# 4. Variables rayonnement
+
+varnames['rsdt']  = 'SW_TOA_dn'
+varnames['rsdtcs']= 'SW_TOA_cs_dn'
+varnames['rldt']  = 'LW_TOA_dn'
+varnames['rldtcs']= 'LW_TOA_cs_dn'
+varnames['rsut']  = 'SW_TOA_up'
+varnames['rsutcs']= 'SW_TOA_cs_up'
+varnames['rlut']  = 'LW_TOA_up'
+varnames['rlutcs']= 'LW_TOA_cs_up'
+varnames['rst']   = 'SW_TOA'
+varnames['rstcs'] = 'SW_TOA_cs'
+varnames['rlt']   = 'LW_TOA'
+varnames['rltcs'] = 'LW_TOA_cs'
+
+varnames['rsds']  = 'SW_Surf_dn'
+varnames['rsdscs']= 'SW_Surf_cs_dn'
+varnames['rsus']  = 'SW_Surf_up'
+varnames['rsuscs']= 'SW_Surf_cs_up'
+varnames['rlds']  = 'LW_Surf_dn'
+varnames['rldscs']= 'LW_Surf_cs_dn'
+varnames['rlus']  = 'LW_Surf_up'
+varnames['rluscs']= 'LW_Surf_cs_up'
+varnames['rss']   = 'SW_Surf'
+varnames['rsscs'] = 'SW_Surf_cs'
+varnames['rls']   = 'LW_Surf'
+varnames['rlscs'] = 'LW_Surf_cs'
+
+varnames['SWd'] = 'SWd'
+varnames['SWu'] = 'SWu'
+varnames['SWdcs'] = 'SWdcs'
+varnames['SWucs'] = 'SWucs'
+varnames['SWnet'] = 'PFRSO'
+
+varnames['LWd'] = 'LWd'
+varnames['LWu'] = 'LWu'
+varnames['LWdcs'] = 'LWdcs'
+varnames['LWucs'] = 'LWucs'
+varnames['LWnet'] = 'PFRTH'
+
+varnames['mu1'] = 'ZMU0'
+varnames['mueff'] = 'ZMU0EFF'
+varnames['I0'] = 'ZI0'
+varnames['daydur'] = 'Day duration'
+
+varnames['alb_ss'] = 'SW_ALB'
+
+##########################################
+# 5. Variables flux de surface
+
+varnames['lhf']  = 'PFCLL'
+varnames['shf']  = 'PFCS'
+varnames['hflsn'] = 'PFCLN'
+
+varnames['evap'] = 'PFEVL'
+varnames['evapi'] = 'PFEVI'
+varnames['evapn'] = 'PFEVN'
+
+varnames['tauu']  = 'PSFU'
+varnames['tauv']  = 'PSFV'
+varnames['ustar']  = 'ZUSTAR'
+
+varnames['Cd'] = 'ZCD'
+varnames['Ch'] = 'ZCH'
+varnames['Ce'] = 'ZCE'
+
+varnames['Cdn'] = 'ZCDN'
+varnames['Chn'] = 'ZCHN'
+varnames['Cen'] = 'ZCEN'
+
+varnames['Ugr'] = 'UGR'
+
+varnames['z0']  = 'PZ0'
+varnames['z0h']  = 'PZ0H'
+varnames['zref'] = 'PZREF'
+
+varnames['tsurf'] = 'PTSURF'
+varnames['qsurf'] = 'PQSURF'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+varnames['prw']   = 'WVP'
+varnames['lwp']   = 'LWP'
+varnames['iwp']   = 'IWP'
+varnames['cwp']   = 'CWP'
+
+##########################################
+# 7. Variables en surface
+
+varnames['t2m']   = 'PTCLS'
+varnames['huss']  = 'PQCLS'
+varnames['hurs']  = 'PRHCLS'
+varnames['uas']   = 'PUCLS'
+varnames['vas']   = 'PVCLS'
+
+varnames['pblh']  = 'HCLA'
+
+varnames['ts']    = 'PTS'
+
+##########################################
+# 8.1 Tendances de la physique
+
+varnames['Q1']    = 'Q1'
+varnames['Q2']    = 'Q2'
+varnames['QRad']  = 'QRad'
+
+varnames['tnth'] = 'TENDTHETA'
+varnames['tnthl'] = 'TENDTHETAL'
+varnames['tnqt']  = 'TENDQT'
+
+varnames['tntrsw']= 'TENDSWT'
+varnames['tntrlw']= 'TENDLWT'
+varnames['tntrswcs']= 'TENDSWTCS'
+varnames['tntrlwcs']= 'TENDLWTCS'
+varnames['tntpbl']= 'TENDTT'
+varnames['tntlscp'] = 'TENDST'
+varnames['tntc']  = 'TENDCT'
+varnames['tntshc']  = 'TENDSHCT'
+varnames['tntd']  = 'TENDMT'
+
+varnames['tnthrsw']= 'TENDSWTH'
+varnames['tnthrlw']= 'TENDLWTH'
+varnames['tnthrswcs']= 'TENDSWTHCS'
+varnames['tnthrlwcs']= 'TENDLWTHCS'
+varnames['tnthpbl']= 'TENDTTH'
+varnames['tnthlscp'] = 'TENDSTH'
+varnames['tnthc']  = 'TENDCTH'
+varnames['tnthshc']  = 'TENDSHCTH'
+varnames['tnthd']  = 'TENDMTH'
+
+varnames['tnqvpbl'] = 'TENDTQ'
+varnames['tnqvlscp'] = 'TENDSQ'
+varnames['tnqvc'] = 'TENDCQ'
+varnames['tnqvshc'] = 'TENDSHCQ'
+varnames['tnqvd'] = 'TENDMQ'
+
+varnames['tnupbl']= 'TENDTU'
+varnames['tnuc']  = 'TENDCU'
+varnames['tnushc']  = 'TENDSHCU'
+varnames['tnud']  = 'TENDMU'
+
+varnames['tnvpbl']= 'TENDTV'
+varnames['tnvc']  = 'TENDCV'
+varnames['tnvshc']  = 'TENDSHCV'
+varnames['tnvd']  = 'TENDMV'
+
+varnames['tnthlrsw']= 'TENDSWTHL'
+varnames['tnthlrlw']= 'TENDLWTHL'
+varnames['tnthlrswcs']= 'TENDSWTHLCS'
+varnames['tnthlrlwcs']= 'TENDLWTHLCS'
+varnames['tnthlpbl'] = 'TENDTTHL'
+varnames['tnthllscp'] = 'TENDSTHL'
+varnames['tnthlc']= 'TENDCTHL'
+varnames['tnthlshc']= 'TENDSHCTHL'
+varnames['tnthld']= 'TENDMTHL'
+
+varnames['tnqtpbl'] = 'TENDTQT'
+varnames['tnqtlscp'] = 'TENDSQT'
+varnames['tnqtc'] = 'TENDCQT'
+varnames['tnqtshc'] = 'TENDSHCQT'
+varnames['tnqtd'] = 'TENDMQT'
+
+varnames['tnql']  = 'TENDQL'
+varnames['tnqi']  = 'TENDQI'
+varnames['tnqr']  = 'TENDQR'
+varnames['tnqsn']  = 'TENDQS'
+
+varnames['tnqlc'] = 'TENDQLCONV'
+varnames['tnqic'] = 'TENDQICONV'
+varnames['tnqrc'] = 'TENDQRCONV'
+varnames['tnqsnc'] = 'TENDQSCONV'
+
+varnames['tnqlshc'] = 'TENDQLSHCONV'
+varnames['tnqishc'] = 'TENDQISHCONV'
+varnames['tnqrshc'] = 'TENDQRSHCONV'
+varnames['tnqsnshc'] = 'TENDQSSHCONV'
+
+varnames['tntcas'] = 'TENDTCAS'
+varnames['tntcs'] = 'TENDTCS'
+varnames['tntfplcl'] = 'TENDTFPLCL'
+varnames['tntfplcn'] = 'TENDTFPLCN'
+varnames['tntfccql'] = 'TENDTFCCQL'
+varnames['tntfecl'] = 'TENDTFECL'
+varnames['tntfccqn'] = 'TENDTFCCQN'
+varnames['tntfecn'] = 'TENDTFECN'
+varnames['tntfhimcc'] = 'TENDTFHIMCC'
+
+varnames['tntfplsl'] = 'TENDTFPLSL'
+varnames['tntfplsn'] = 'TENDTFPLSN'
+varnames['tntfcsql'] = 'TENDTFCSQL'
+varnames['tntfesl'] = 'TENDTFESL'
+varnames['tntfcsqn'] = 'TENDTFCSQN'
+varnames['tntfesn'] = 'TENDTFESN'
+
+
+##########################################
+# 8.2 Flux de la physique
+
+varnames['wpqtp_pbl'] = 'ZWPQT_tur'
+varnames['wpthlp_pbl'] = 'WTHL_tur'
+varnames['wpqtp_conv'] = 'ZWPQT_dee'
+varnames['wpthlp_conv'] = 'WTHL_dee'
+
+##########################################
+# 9. Tendances liees au forcages
+
+varnames['tntadv'] = 'ZFT_ADV'
+varnames['tntnudg'] = 'ZFT_NUDG'
+varnames['tnqadv'] = 'ZFQ_ADV'
+varnames['tnqnudg'] = 'ZFQ_NUDG'
+
+##########################################
+# 10. Divers
+
+varnames['Cp'] = 'PCP'
+varnames['Lv'] = 'PLH'
+
+##########################################
+# 11. Bilan eau et energie
+
+varnames['qflux'] = 'WATERFLUX'
+varnames['qfluxEv'] = 'WATERFLUXE'
+varnames['qfluxPr'] = 'WATERFLUXP'
+varnames['dwater'] = 'RDWATER'
+varnames['efluxTOA'] = 'EFLUXTOA'
+varnames['efluxSfc'] = 'EFLUXSFC'
+varnames['denergy'] = 'RDENERGY'
+varnames['RMSE9'] = 'RMSE9'
+varnames['RMSE0'] = 'RMSE0'
+varnames['RMSE1'] = 'RMSE1'
+varnames['RDMSE'] = 'RDMSE'
+varnames['msefluxSfc'] = 'MSEFLUXSFC'
+varnames['iQadv'] = 'TOTFORCQADV'
+varnames['iQnud'] = 'TOTFORCQNUD'
+varnames['iTadv'] = 'TOTFORCTADV'
+varnames['iTnud'] = 'TOTFORCTNUD'
+varnames['iUadv'] = 'TOTFORCUADV'
+varnames['iUnud'] = 'TOTFORCUNUD'
+varnames['iVadv'] = 'TOTFORCVADV'
+varnames['iVnud'] = 'TOTFORCVNUD'
+varnames['iEadv'] = 'TOTFORCEADV'
+varnames['iEnud'] = 'TOTFORCENUD'
+varnames['efluxSfcRad'] = 'EFLUXSFCRAD'
+varnames['efluxSfcTurb'] = 'EFLUXSFCTS'
+varnames['efluxSfcConv'] = 'EFLUXSFCCS'
+varnames['efluxSfcAdj'] = 'EFLUXSFCCAS'
+varnames['efluxSfcPrSen'] = 'EFLUXSFC1'
+varnames['efluxSfcPrLat'] = 'EFLUXSFC2'
+varnames['iMSEadv'] = 'MSEADV'
+varnames['iMSEnud'] = 'MSENUD'
+varnames['iMSEw'] = 'MSEW'
+varnames['iQw'] = 'WATERW'
+varnames['iEw'] = 'ENERGYW'
+
+##########################################
+# 12. Especes Gazeuses
+
+varnames['rCO2'] = 'ZCO2'
+varnames['rCH4'] = 'ZCH4'
+varnames['rN2O'] = 'ZN2O'
+varnames['rNO2'] = 'ZNO2'
+varnames['rCFC11'] = 'ZC11'
+varnames['rCFC12'] = 'ZC12'
+varnames['rCFC22'] = 'ZC22'
+varnames['rCCL4'] = 'ZCL4'
+varnames['rO3'] = 'ZOZN'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+varnames['alpha'] = 'ZALF'
+varnames['Mf'] = 'ZFORM2'
+varnames['Tu'] = 'ZTN'
+varnames['Thu'] = 'ZTHN'
+varnames['qvu'] = 'ZQN'
+varnames['qcu'] = 'ZLN'
+
+##########################################
+# 14. Variables du schema PCMT
+
+varnames['alpha_up'] = 'PUDAL'
+varnames['w_up'] = 'ZUDW' #'ZUDW_ACPCMT' #'PUDW'
+varnames['omega_up'] = 'PUDOM'
+varnames['alpha_dn'] = 'PDDAL'
+varnames['w_dn'] = 'ZDDW' #'ZDDW_ACPCMT' #'PDDW'
+varnames['omega_dn'] = 'PDDOM'
+varnames['cape'] = 'PCAPE'
+varnames['T_up'] = 'ZTU_PCMT'
+varnames['qv_up'] = 'ZQU_PCMT'
+varnames['omega_ref'] = 'ZVVREF'
+
+##########################################
+# 15. Variables pour le wake
+
+varnames['delta_t'] = 'PWAKEDELTAT'
+varnames['delta_q'] = 'PWAKEDELTAQ'
+varnames['d_delta_t_gw'] = 'PWAKEDDELTATGW'
+varnames['omgb_dth'] = 'PWAKEOMGBDTH'
+varnames['dp_omgb'] = 'PWAKEDPOMGB'
+varnames['dt_KE'] = 'PWAKEDTKE'
+varnames['dq_KE'] = 'PWAKEDQKE'
+varnames['dt_PBL'] = 'PWAKEDTPBL'
+varnames['dq_PBL'] = 'PWAKEDQPBL'
+varnames['omg_w'] = 'PWAKEOMG'
+varnames['dp_delt_omg'] = 'PWAKEDPDELTOMG'
+varnames['spread_w'] = 'PWAKESPREAD'
+varnames['delta_th'] = 'PWAKEDTH'
+varnames['dt_wake'] = 'PDTWAKE'
+varnames['dq_wake'] = 'PDQWAKE'
+varnames['t_undi'] = 'PTUNDI'
+varnames['q_undi'] = 'PQUNDI'
+varnames['d_delta_t'] = 'PWAKEDDELTAT'
+varnames['d_delta_q'] = 'PWAKEDDELTAQ'
+varnames['hw'] = 'PWAKEH'
+varnames['sigmaw'] = 'PWAKES'
+varnames['wake_pe'] = 'PWAKEPE'
+varnames['wake_fip'] = 'PWAKEFIP'
+varnames['wake_gfl'] = 'PWAKEGFL'
+varnames['Cstar'] = 'PWAKECSTAR'
+varnames['wdens'] = 'PWAKEDENS'
+varnames['dt_dn'] = 'ZDTDWN'
+varnames['dt_up'] = 'ZDTA'
+varnames['dq_dn'] = 'ZDQDWN'
+varnames['dq_up'] = 'ZDQA'
+varnames['Mf_dn'] = 'ZMDWN'
+varnames['Mf_up'] = 'ZMUP'
+varnames['sigd'] = 'ZSIGD'
+varnames['omgb'] = 'POMGB'
+varnames['t_undi_pcmt'] = 'ZTUNDI'
+varnames['q_undi_pcmt'] = 'ZQUNDI'
+varnames['t_wake_pcmt'] = 'ZTWAKE'
+varnames['q_wake_pcmt'] = 'ZQWAKE'
+varnames['qw_undi'] = 'ZQWUNDI'
+varnames['qw_wake'] = 'ZQWWAKE'
+varnames['Tw_wake'] = 'ZTWWAKE'
+varnames['Tw_undi'] = 'ZTWUNDI'
+varnames['qsat_undi'] = 'ZQSATUNDI'
+varnames['qsat_wake'] = 'ZQSATWAKE'
+
+##########################################
+# 16. Variables pour la turbulence
+
+varnames['Q11'] = 'ZQ11'
+varnames['Q11min'] = 'ZQ1MIN'
+varnames['Q11max'] = 'ZQ1MAX'
+varnames['igs'] = 'ZIGMAS'
+varnames['igs2'] = 'ZIGMAS2'
+varnames['igs2turb'] = 'ZIGMAS2TURB'
+varnames['igs2conv'] = 'ZIGMAS2CONV'
+varnames['sigs'] = 'ZSIGMAS'
+varnames['sigs2'] = 'ZSIGMAS2'
+varnames['sigs2turb'] = 'ZSIGMAS2TURB'
+varnames['sigs2conv'] = 'ZSIGMAS2CONV'
+varnames['mlen'] = 'ZZLMF'
+varnames['acoef'] = 'ZAA'
+varnames['sigc0'] = 'PSIGCLOUD0'
+varnames['sigc1'] = 'PSIGCLOUD1'
+
+##########################################
+# 17. Variables COSP
+
+for vv in ['cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']:
+  varnames[vv] = vv
+
+for vv in ['ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']:
+  varnames[vv] = vv
+
+#---------------------------------------------------------------------------------------------------
+#                        Long name of variables
+#---------------------------------------------------------------------------------------------------
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+names['pf']  = 'Pressure on Full Levels'
+names['presH'] = 'Pressure on Half Levels'
+
+names['zf']    = 'Geopotential on Full Levels'
+names['zgH']   = 'Geopotential on Half Levels'
+
+names['rho']   = 'Air Volumic Mass'
+names['temp']    = 'Air Temperature'
+names['qv']   = 'Specific Humidity'
+names['hur']   = 'Relative Humidity'
+names['ql']    = 'Specific Mass of Cloud Liquid Water'
+names['qi']    = 'Specific Mass of Cloud Ice Water'
+names['qr']    = 'Specific Mass of Rain'
+names['qsn']   = 'Specific Mass of Snow'
+
+names['qlc']   = 'Specific Mass of Convective Liquid Water'
+names['qic']   = 'Specific Mass of Convective Ice Water'
+names['qrc']   = 'Specific Mass of Convective Rain'
+names['qsnc']  = 'Specific Mass of Convective Snow'
+
+names['qlshc'] = 'Specific Mass of Shallow Convection Liquid Water'
+names['qishc'] = 'Specific Mass of Shallow Convection Ice Water'
+names['qrshc'] = 'Specific Mass of Shallow Convection Rain'
+names['qsnshc']= 'Specific Mass of Shallow Convection Snow'
+
+names['tke']   = 'Turbulent Kinetic Energy'
+
+names['theta']    = 'Potential Temperature'
+names['thv']    = 'Virtual Potential Temperature'
+names['thl']    = 'Liquid Potential Temperature'
+names['thlv']    = 'Virtual Potential Temperature'
+
+names['qsat']  = 'Specific Humidity at Saturation'
+
+names['u']    = 'Zonal Wind'
+names['v']    = 'Meridional Wind'
+names['wa']    = 'Vertical Velocity'
+names['wap']   = 'Vertical Pressure Velocity'
+
+##########################################
+# 2. Variables nuageuses
+
+names['rneb']    = 'Cloud Fraction'
+names['cls']   = 'Stratiform Cloud Fraction'
+names['cc']   = 'Total Cloud Fraction'
+names['cltc']  = 'Total Convective Cloud Fraction'
+names['cltl']  = 'Total Low Cloud Fraction'
+names['cltm']  = 'Total Mid Cloud Fraction'
+names['clth']  = 'Total High Cloud Fraction'
+
+##########################################
+# 3. Variables pluies
+
+names['precls']= 'Large-Scale Precipitation Flux'
+names['snowls']= 'Large-Scale Snow Flux'
+names['precc'] = 'Convective Precipitation Flux'
+names['snowc'] = 'Convective Snow Flux'
+
+names['rain']    = 'Surface Precipitation'
+names['prls']  = 'Surface Large-Scale Precipitation'
+names['prc']   = 'Surface Convective Precipitation'
+names['ppr']   = 'Total Precipitation Profile'
+names['pprls'] = 'Large-Scale Precipitation Profile'
+names['pprc']  = 'Convective Precipitation Profile'
+
+##########################################
+# 4. Variables rayonnement
+
+names['rsdt']  = 'Downward SW Radiation at TOA'
+names['rsdtcs']= 'Clear-sky Downward SW Radiation at TOA'
+names['rldt']  = 'Downward LW Radiation at TOA'
+names['rldtcs']= 'Clear-sky Downward LW Radiation at TOA'
+names['rsut']  = 'Upward SW Radiation at TOA'
+names['rsutcs']= 'Clear-sky Upward SW Radiation at TOA'
+names['rlut']  = 'Upward LW Radiation at TOA'
+names['rlutcs']= 'Clear-sky Upward LW Radiation at TOA'
+names['rst']   = 'SW Radiation at TOA'
+names['rstcs'] = 'Clear-sky SW Radiation at TOA'
+names['rlt']   = 'LW Radiation at TOA'
+names['rltcs'] = 'Clear-sky LW Radiation at TOA'
+
+names['rsds']  = 'Downward SW Radiation at Surface'
+names['rsdscs']= 'Clear-sky Downward SW Radiation at Surface'
+names['rsus']  = 'Upward SW Radiation at Surface'
+names['rsuscs']= 'Clear-sky Upward SW Radiation at Surface'
+names['rlds']  = 'Downward LW Radiation at Surface'
+names['rldscs']= 'Clear-sky Downward LW Radiation at Surface'
+names['rlus']  = 'Upward LW Radiation at Surface'
+names['rluscs']= 'Clear-sky Upward LW Radiation at Surface'
+names['rss']   = 'SW Radiation at Surface'
+names['rsscs'] = 'Clear-sky SW Radiation at Surface'
+names['rls']   = 'LW Radiation at Surface'
+names['rlscs'] = 'Clear-sky LW Radiation at Surface'
+
+names['SWd'] = 'Downward SW Flux'
+names['SWu'] = 'Upward SW Flux'
+names['SWdcs'] = 'CS Downward SW Flux'
+names['SWucs'] = 'CS Upward SW Flux'
+names['SWnet'] = 'Net SW Flux'
+
+names['LWd'] = 'Downward LW Flux'
+names['LWu'] = 'Upward LW Flux'
+names['LWdcs'] = 'CS Downward LW Flux'
+names['LWucs'] = 'CS Upward LW Flux'
+names['LWnet'] = 'Net LW Flux'
+
+names['mu1'] = 'Sinus of zenith angle'
+names['mueff'] = 'Sinus of effective zenith angle'
+names['I0'] = 'Solar irradiance'
+names['daydur'] = 'Day duration'
+
+names['alb_ss'] = 'SW Surface Albedo'
+
+##########################################
+# 5. Variables flux de surface
+
+names['lhf']  = 'Surface Latent Heat Flux'
+names['shf']  = 'Surface Sensible Heat Flux'
+names['hflsn'] = 'Surface Latent Heat Flux over Snow or Ice'
+
+names['evap']  = 'Evaporation over liquid water (or wet soil)'
+names['evapi'] = 'Evaporation over frozen soil'
+names['evapn'] = 'Evaporation over snow (or ice) and frozen soil'
+
+names['tauu']  = 'Surface zonal stress'
+names['tauv']  = 'Surface meridional stress'
+names['ustar']  = 'ustar'
+
+names['Cd'] = 'Surface Exchange Coefficient for Wind'
+names['Ch'] = 'Surface Exchange Coefficient for Heat'
+names['Ce'] = 'Surface Exchange Coefficient for Water Vapor'
+
+names['Cdn'] = 'Surface Exchange Neutral Coefficient for Wind'
+names['Chn'] = 'Surface Exchange Neutral Coefficient for Heat'
+names['Cen'] = 'Surface Exchange Neutral Coefficient for Water Vapor'
+
+names['Ugr'] = 'Wind gustiness due to precipitation'
+
+names['z0']  = 'z0'
+names['z0h']  = 'z0h'
+names['zref'] = 'Altitude of the first atmospheric level'
+
+names['tsurf'] = 'Surface temperature (SST)'
+names['qsurf'] = 'Surface saturated specific humidity (qsat(SST))'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+names['prw']   = 'Precipitable Water'
+names['lwp']   = 'Liquid Water Path'
+names['iwp']   = 'Ice Water Path'
+names['cwp']   = 'Cloud Water Path'
+
+##########################################
+# 7. Variables en surface
+
+names['t2m']   = '2-meter Air Temperature'
+names['huss']  = '2-meter Specific Humidity'
+names['hurs']  = '2-meter Relative Humidity'
+names['uas']   = '10-meter Zonal Wind'
+names['vas']   = '10-meter Meridional Wind'
+
+names['pblh']  = 'Planetary Boundary Layer Height'
+
+names['ts']    = 'Surface Temperature'
+
+##########################################
+# 8.1 Tendances de la physique
+
+names['Q1']    = 'Apparent Heat Source'
+names['Q2']    = 'Apparent Moisture Sink'
+names['QRad']  = 'Radiative Heating Rate'
+
+names['tnthl'] = 'Liquid Potential Temperature Tendency due to Physics'
+names['tnqt'] = 'Total Water Tendency due to Physics'
+
+names['tntrsw'] = 'Temperature Tendency due to SW Radiation'
+names['tntrlw'] = 'Temperature Tendency due to LW Radiation'
+names['tntrswcs'] = 'Temperature Tendency due to Clear-sky SW Radiation'
+names['tntrlwcs'] = 'Temperature Tendency due to Clear-sky LW Radiation'
+names['tntpbl'] = 'Temperature Tendency due to Turbulence'
+names['tntlscp'] = 'Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tntc'] = 'Temperature Tendency due to Convection'
+names['tntshc'] = 'Temperature Tendency due to Shallow Convection'
+names['tntd'] = 'Temperature Tendency due to Other Processes'
+
+names['tnthrsw'] = 'Potential Temperature Tendency due to SW Radiation'
+names['tnthrlw'] = 'Potential Temperature Tendency due to LW Radiation'
+names['tnthrswcs'] = 'Potential Temperature Tendency due to Clear-sky SW Radiation'
+names['tnthrlwcs'] = 'Potential Temperature Tendency due to Clear-sky LW Radiation'
+names['tnthpbl'] = 'Potential Temperature Tendency due to Turbulence'
+names['tnthlscp'] = 'Potential Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tnthc'] = 'Potential Temperature Tendency due to Convection'
+names['tnthshc'] = 'Potential Temperature Tendency due to Shallow Convection'
+names['tnthd'] = 'Potential Temperature Tendency due to Other Processes'
+
+names['tnqvpbl'] = 'Specific Humidity Tendency due to Turbulence'
+names['tnqvlscp'] = 'Specific Humidity Tendency due to Large-scale Condensation and Precipitation'
+names['tnqvc'] = 'Specific Humidity Tendency due to Convection'
+names['tnqvshc'] = 'Specific Humidity Tendency due to Shallow Convection'
+names['tnqvd'] = 'Specific Humidity Tendency due to Other Processes'
+
+names['tnupbl'] = 'Zonal Wind Tendency due to Turbulence'
+names['tnuc'] = 'Zonal Wind Tendency due to Convection'
+names['tnushc'] = 'Zonal Wind Tendency due to Shallow Convection'
+names['tnud'] = 'Zonal Wind Tendency due to Other Processes'
+
+names['tnvpbl'] = 'Meridional Wind Tendency due to Turbulence'
+names['tnvc'] = 'Meridional Wind Tendency due to Convection'
+names['tnvshc'] = 'Meridional Wind Tendency due to Shallow Convection'
+names['tnvd'] = 'Meridional Wind Tendency due to Other Processes'
+
+names['tnthlrsw'] = 'Liquid Potential Temperature Tendency due to SW Radiation'
+names['tnthlrlw'] = 'Liquid Potential Temperature Tendency due to LW Radiation'
+names['tnthlrswcs'] = 'Liquid Potential Temperature Tendency due to Clear-sky SW Radiation'
+names['tnthlrlwcs'] = 'Liquid Potential Temperature Tendency due to Clear-sky LW Radiation'
+names['tnthlpbl'] = 'Liquid Potential Temperature Tendency due to Turbulence'
+names['tnthllscp'] = 'Liquid Potential Temperature Tendency due to Large-scale Condensation and Precipitation'
+names['tnthlc'] = 'Liquid Potential Temperature Tendency due to Convection'
+names['tnthlshc'] = 'Liquid Potential Temperature Tendency due to Shallow Convection'
+names['tnthld'] = 'Liquid Potential Temperature Tendency due to Other Processes'
+
+names['tnqtpbl'] = 'Total Water Tendency due to Turbulence'
+names['tnqtlscp'] = 'Total Water Tendency due to Large-scale Condensation and Precipitation'
+names['tnqtc'] = 'Total Water Tendency due to Convection'
+names['tnqtshc'] = 'Total Water Tendency due to Shallow Convection'
+names['tnqtd'] = 'Total Water Tendency due to Other Processes'
+
+names['tnql'] = 'Liquid Water Tendency due to Physics'
+names['tnqi'] = 'Ice Water Tendency due to Physics'
+names['tnqr'] = 'Rain Tendency due to Physics'
+names['tnqsn'] = 'Snow Tendency due to Physics'
+
+names['tnqlc'] = 'Convective Liquid Water Tendency due to Physics'
+names['tnqic'] = 'Convective Ice Water Tendency due to Physics'
+names['tnqrc'] = 'Convective Rain Tendency due to Physics'
+names['tnqsnc'] = 'Convective Snow Tendency due to Physics'
+
+names['tnqlshc'] = 'Shallow Convection Liquid Water Tendency due to Physics'
+names['tnqishc'] = 'Shallow Convection Ice Water Tendency due to Physics'
+names['tnqrshc'] = 'Shallow Convection Rain Tendency due to Physics'
+names['tnqsnshc'] = 'Shallow Convection Snow Tendency due to Physics'
+
+names['tntcas'] = 'Temperature Tendency due to Dry Convective Adjustment'
+names['tntcs'] = 'Temperature Tendency due to Convective Eddies'
+names['tntfplcl'] = 'Temperature Tendency due to Convective Liquid Precipitation'
+names['tntfplcn'] = 'Temperature Tendency due to Convective Solid Precipitation'
+names['tntfccql'] = 'Temperature Tendency due to Convective Liquid Precipitation Generation'
+names['tntfecl'] = 'Temperature Tendency due to Convective Liquid Precipitation Evaporation'
+names['tntfccqn'] = 'Temperature Tendency due to Convective Solid Precipitation Generation'
+names['tntfecn'] = 'Temperature Tendency due to Convective Solid Precipitation Evaporation'
+names['tntfhimcc'] = 'Temperature Tendency due to Convective Melting/Icing'
+
+names['tntfplsl'] = 'Temperature Tendency due to Stratiform Liquid Precipitation'
+names['tntfplsn'] = 'Temperature Tendency due to Stratiform Solid Precipitation'
+names['tntfcsql'] = 'Temperature Tendency due to Stratiform Liquid Precipitation Generation'
+names['tntfesl'] = 'Temperature Tendency due to Stratiform Liquid Precipitation Evaporation'
+names['tntfcsqn'] = 'Temperature Tendency due to Stratiform Solid Precipitation Generation'
+names['tntfesn'] = 'Temperature Tendency due to Stratiform Solid Precipitation Evaporation'
+
+##########################################
+# 8.2 Flux de la physique
+
+names['wpqtp_pbl'] = 'Total Water Flux due to Turbulence'
+names['wpthlp_pbl'] = 'Liquid Potential Temperature Flux due to Turbulence'
+names['wpqtp_conv'] = 'Total Water flux due to Convection'
+names['wpthlp_conv'] = 'Liquid Potential Temperature Flux due to Convection'
+
+##########################################
+# 9. Tendances liees au forcages
+
+names['tntadv'] = 'Temperature Tendency due to Horizontal Advection'
+names['tntnudg'] = 'Temperature Tendency due to Nudging'
+names['tnqadv'] = 'Specific Humidity Tendency due to Horizontal Advection'
+names['tnqnudg'] = 'Specific Humidity Tendency due to Nudging'
+
+##########################################
+# 10. Divers
+
+names['Cp'] = 'Heat Capacity of Air'
+names['Lv'] = 'Latent Heat of Vaporization'
+
+##########################################
+# 11. Bilan eau et energie
+
+names['qflux'] = 'Net Flux of water in the atmosphere'
+names['qfluxPr'] = 'Net Flux of water at Surface due to Precipitation'
+names['qfluxEv'] = 'Net Flux of water at Surface due to Evaporation'
+names['dwater'] = 'RDWATER'
+names['efluxTOA'] = 'Net Enthalpy Flux at TOA'
+names['efluxSfc'] = 'Net Enthalpy Flux at Surface'
+names['denergy'] = 'RDENERGY'
+
+names['RMSE9'] = 'RMSE9'
+names['RMSE0'] = 'RMSE0'
+names['RMSE1'] = 'RMSE1'
+names['RDMSE'] = 'RDMSE'
+names['msefluxSfc'] = 'Net Moist Static Energy Flux at Surface'
+names['iQadv'] = 'Horizontal Advection of moisture integrated over the atmospheric column'
+names['iQnud'] = 'Moisture Tendency due to nudging integrated over the atmospheric column'
+names['iTadv'] = 'Horizontal Advection of temperature integrated over the atmospheric column'
+names['iTnud'] = 'Temperature Tendency due to nudging integrated over the atmospheric column'
+names['iUadv'] = 'Horizontal Advection of zonal wind integrated over the atmospheric column'
+names['iUnud'] = 'Zonal Wind Tendency due to nudging integrated over the atmospheric column'
+names['iVadv'] = 'Horizontal Advection of meridional wind integrated over the atmospheric column'
+names['iVnud'] = 'Meridional Wind Tendency due to nudging integrated over the atmospheric column'
+names['iEadv'] = 'Horizontal Advection of enthalpy integrated over the atmospheric column'
+names['iEnud'] = 'Enthalpy Tendency due to nudging integrated over the atmospheric column'
+
+names['efluxSfcRad'] = 'Surface Enthalpy Flux due to radiation'
+names['efluxSfcTurb'] = 'Surface Enthalpy Flux due to turbulence'
+names['efluxSfcConv'] = 'Surface Enthalpy Flux due to convective eddies'
+names['efluxSfcAdj'] = 'Surface Enthalpy Flux due to dry adjustment'
+names['efluxSfcPrSen'] = 'Surface Enthalpy Flux due to sensible heat of precipitation'
+names['efluxSfcPrLat'] = 'Surface Enthalpy Flux due to latent heat of precipitation'
+names['iMSEadv'] = 'Horizontal Advection of moist static energy integrated over the atmospheric column'
+names['iMSEnud'] = 'Moist Static Energy Tendency due to nudging integrated over the atmospheric column'
+names['iMSEw'] = 'Vertical Advection of moist static energy integrated over the atmospheric column'
+names['iQw'] = 'Vertical Advection of specific humidity integrated over the atmospheric column'
+names['iEw'] = 'Vertical Advection of enthalpy integrated over the atmospheric column'
+
+##########################################
+# 12. Especes Gazeuses
+
+names['rCO2'] = 'CO2 Mixing Ratio'
+names['rCH4'] = 'CH4 Mixing Ratio'
+names['rN2O'] = 'N2O Mixing Ratio'
+names['rNO2'] = 'NO2 Mixing Ratio'
+names['rCFC11'] = 'CFC11 Mixing Ratio'
+names['rCFC12'] = 'CFC12 Mixing Ratio'
+names['rCFC22'] = 'CFC22 Mixing Ratio'
+names['rCCL4'] = 'CCL4 Mixing Ratio'
+names['rO3'] = 'O3 Mixing Ratio'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+names['alpha'] = 'Closure coefficient'
+names['Mf'] = 'Mass Flux'
+names['Tu'] = 'Updraft Temperature'
+names['Thu'] = 'Updraft Potential Temperature'
+names['qvu'] = 'Updraft Specific Humidity'
+names['qcu'] = 'Updraft Condensed Water'
+
+##########################################
+# 14. Variables du schema PCMT
+
+names['alpha_up'] = 'Convective Updraft Fraction'
+names['w_up'] = 'Convective Updraft Velocity'
+names['omega_up'] = 'Convective Updraft Pressure Velocity'
+names['alpha_dn'] = 'Convective Downdraft Fraction'
+names['w_dn'] = 'Convective Downdraft Velocity'
+names['omega_dn'] = 'Convective Downdraft Pressure Velocity'
+names['cape'] = 'CAPE'
+names['T_up'] = 'Convective Updraft Temperature'
+names['qv_up'] = 'Convective Updraft Specific Humidity'
+names['omega_ref'] = 'Reference Vertical Velocity'
+
+
+##########################################
+# 15. Variables pour le wake
+
+names['delta_t'] = 'delta T'
+names['delta_q'] = 'delta q'
+names['d_delta_t_gw'] = ' delta T tendency due to GW'
+names['omgb_dth'] = 'flux of delta_theta transported by LS omega'
+names['dp_omgb'] = 'vertical gradient of large scale omega'
+names['dt_KE'] = 'differential heating (wake-unperturbed) CONV'
+names['dq_KE'] = 'differential moistening (wake-unperturbed) CONV'
+names['dt_PBL'] = 'differential heating (wake-unperturbed) PBL'
+names['dq_PBL'] = 'differential moistening (wake-unperturbed) PBL'
+names['omg_w'] = 'Wake verticale velocity'
+names['dp_delt_omg'] = 'vertical gradient of wake_omg'
+names['spread_w'] = 'Spreading term in wake_delt'
+names['delta_th'] = 'Potential Temperature Difference'
+names['dt_wake'] = 'T tendency due to wake'
+names['dq_wake'] = 'q tendency due to wake'
+names['t_undi'] = 'Temperature in unperturbed area'
+names['q_undi'] = 'Specific humidity in unperturbed area'
+names['d_delta_t'] = 'delta T tendency'
+names['d_delta_q'] = 'delta q tendency'
+names['hw'] = 'Wake depth'
+names['sigmaw'] = 'wake fractional area'
+names['wake_pe'] = 'Wake Potential Energy (WAPE)'
+names['wake_fip'] = 'wake ALP'
+names['wake_gfl'] = 'Wake Gust Front Length'
+names['Cstar'] = 'Wake spreading velocity'
+names['wdens'] = 'Wake density'
+names['dt_dn'] = 'T tendendy due to downdrafts'
+names['dt_up'] = 'T tendency due to updrafts'
+names['dq_dn'] = 'qv tendendy due to downdrafts'
+names['dq_up'] = 'qv tendency due to updrafts'
+names['Mf_dn'] = 'Downdraft Mass flux'
+names['Mf_up'] = 'Updraft Mass flux'
+names['sigd'] = 'Downdraft area fraction'
+names['omgb'] = 'LS Vertical Velocity'
+names['t_undi_pcmt'] = 'Temperature in undisturbed area (PCMT)'
+names['q_undi_pcmt'] = 'Specific Humidity in undisturbed area (PCMT)'
+names['t_wake_pcmt'] = 'Temperature in wake (PCMT)'
+names['q_wake_pcmt'] = 'Specific Humidity in wake (PCMT)'
+names['qw_undi'] = 'Wet-bulb Specific Humidity in undisturbed area'
+names['qw_wake'] = 'Wet-bulb Specific Humidity in wake'
+names['Tw_wake'] = 'Wet-bulb Temperature in wake'
+names['Tw_undi'] = 'Wet-bulb Temperature in undisturbed area'
+names['qsat_undi'] = 'Saturation Specific Humidity in undisturbed area'
+names['qsat_wake'] = 'Saturation Specific Humidity in wake'
+
+##########################################
+# 16. Variables pour la turbulence
+
+names['Q11'] = 'Normalized saturation deficit'
+names['Q11min'] = 'Minimum Normalized saturation deficit'
+names['Q11max'] = 'Maximum Normalized saturation deficit'
+names['igs'] = 'Subgrid Standard Deviation of s'
+names['igs2'] = 'Subgrid Variance of s'
+names['igs2conv'] = 'Convective Subgrid Variance of s'
+names['igs2turb'] = 'Turbulent Subgrid Variance of s'
+names['sigs'] = 'Subgrid Standard Deviation of s (LNEBECT)'
+names['sigs2'] = 'Subgrid Variance of s (LNEBECT)'
+names['sigs2conv'] = 'Convective Subgrid Variance of s (LNEBECT)'
+names['sigs2turb'] = 'Turbulent Subgrid Variance of s (LNEBECT)'
+names['mlen'] = 'Mixing Length*g'
+names['acoef'] = 'a Coefficient'
+names['sigc0'] = 'PSIGCLOUD0'
+names['sigc1'] = 'PSIGCLOUD1'
+
+##########################################
+# 17. Variables COSP
+
+for vv in ['cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','toffset','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']:
+  names[vv] = vv
+
+for vv in ['ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']:
+  names[vv] = vv	
+
+#---------------------------------------------------------------------------------------------------
+#                        Units
+#---------------------------------------------------------------------------------------------------
+
+##########################################
+# 1. Variables dynamiques et thermodynamiques
+
+units['pf']  = 'Pa'
+units['presH'] = 'Pa'
+
+units['zf']    = 'm2/s2'
+units['zgH']   = 'm2/s2'
+
+units['rho']   = 'kg/m3'
+units['temp']    = 'K'
+units['qv']   = 'kg/kg'
+units['hur']   = '-'
+units['ql']    = 'kg/kg'
+units['qi']    = 'kg/kg'
+units['qr']    = 'kg/kg'
+units['qsn']   = 'kg/kg'
+
+units['qlc']   = 'kg/kg'
+units['qic']   = 'kg/kg'
+units['qrc']   = 'kg/kg'
+units['qsnc']  = 'kg/kg'
+
+units['qlshc'] = 'kg/kg'
+units['qishc'] = 'kg/kg'
+units['qrshc'] = 'kg/kg'
+units['qsnshc']= 'kg/kg'
+
+
+units['tke']   = 'm2/s2'
+
+units['theta']    = 'K'
+units['thv']    = 'K'
+units['thl']    = 'K'
+units['thlv']    = 'K'
+
+units['qsat']  = 'kg/kg'
+
+units['u']    = 'm/s'
+units['v']    = 'm/s'
+units['wa']    = 'm/s'
+units['wap']   = 'Pa/s'
+
+##########################################
+# 2. Variables nuageuses
+
+units['rneb']    = '-'
+units['cls']   = '-'
+units['cc']   = '-'
+units['cltc']  = '-'
+units['cltl']  = '-'
+units['cltm']  = '-'
+units['clth']  = '-'
+
+##########################################
+# 3. Variables pluies
+
+units['precls']= 'kg/m2/s'
+units['snowls']= 'kg/m2/s'
+units['precc'] = 'kg/m2/s'
+units['snowc'] = 'kg/m2/s'
+
+units['rain']  = 'kg/m2/s'
+units['prls']  = 'kg/m2/s'
+units['prc']  = 'kg/m2/s'
+units['ppr'] = 'kg/m2/s'
+units['pprls'] = 'kg/m2/s'
+units['pprc'] = 'kg/m2/s'
+
+##########################################
+# 4. Variables rayonnement
+
+units['rsdt']  = 'W/m2'
+units['rsdtcs']= 'W/m2'
+units['rldt']  = 'W/m2'
+units['rldtcs']= 'W/m2'
+units['rsut']  = 'W/m2'
+units['rsutcs']= 'W/m2'
+units['rlut']  = 'W/m2'
+units['rlutcs']= 'W/m2'
+units['rst']   = 'W/m2'
+units['rstcs'] = 'W/m2'
+units['rlt']   = 'W/m2'
+units['rltcs'] = 'W/m2'
+
+units['rsds']  = 'W/m2'
+units['rsdscs']= 'W/m2'
+units['rsus']  = 'W/m2'
+units['rsuscs']= 'W/m2'
+units['rlds']  = 'W/m2'
+units['rldscs']= 'W/m2'
+units['rlus']  = 'W/m2'
+units['rluscs']= 'W/m2'
+units['rss']   = 'W/m2'
+units['rsscs'] = 'W/m2'
+units['rls']   = 'W/m2'
+units['rlscs'] = 'W/m2'
+
+units['SWd'] = 'W/m2'
+units['SWu'] = 'W/m2'
+units['SWdcs'] = 'W/m2'
+units['SWucs'] = 'W/m2'
+units['SWnet'] = 'W/m2'
+
+units['LWd'] = 'W/m2'
+units['LWu'] = 'W/m2'
+units['LWdcs'] = 'W/m2'
+units['LWucs'] = 'W/m2'
+units['LWnet'] = 'W/m2'
+
+units['mu1'] = '-'
+units['mueff'] = '-'
+units['I0'] = 'W/m2'
+units['daydur'] = 's'
+
+units['alb_ss'] = '-'
+
+##########################################
+# 5. Variables flux de surface
+
+units['lhf']  = 'W/m2'
+units['shf']  = 'W/m2'
+units['hflsn'] = 'W/m2'
+
+units['evap'] = 'kg/m2/s'
+units['evapi'] = 'kg/m2/s'
+units['evapn'] = 'kg/m2/s'
+
+units['tauu']  = 'kg m-1 s-2'
+units['tauv']  = 'kg m-1 s-2'
+units['ustar']  = 'm/s'
+
+units['Cd'] = '-'
+units['Ch'] = '-'
+units['Ce'] = '-'
+
+units['Cdn'] = '-'
+units['Chn'] = '-'
+units['Cen'] = '-'
+
+units['Ugr'] = 'm/s'
+
+units['z0']  = 'm'
+units['z0h']  = 'm'
+units['zref'] = 'm'
+
+units['tsurf'] = 'K'
+units['qsurf'] = 'kg/kg'
+
+##########################################
+# 6. Variables integrees sur la colonne
+
+units['prw']   = 'kg/m2'
+units['lwp']   = 'kg/m2'
+units['iwp']   = 'kg/m2'
+units['cwp']   = 'kg/m2'
+
+##########################################
+# 7. Variables en surface
+
+units['t2m']   = 'K'
+units['huss']  = 'kg/kg'
+units['hurs']  = '-'
+units['uas']   = 'm/s'
+units['vas']   = 'm/s'
+
+units['pblh']  = 'm'
+
+units['ts']    = 'K'
+
+##########################################
+# 8.1 Tendances de la physique
+
+units['Q1']    = 'K/s'
+units['Q2']    = 'K/s'
+units['QRad']  = 'K/s'
+
+units['tnthl'] = 'K/s'
+units['tnqt'] = 'kg/kg/s'
+
+units['tntrsw'] = 'K/s'
+units['tntrlw'] = 'K/s'
+units['tntrswcs'] = 'K/s'
+units['tntrlwcs'] = 'K/s'
+units['tntpbl'] = 'K/s'
+units['tntlscp'] = 'K/s'
+units['tntc'] = 'K/s'
+units['tntshc'] = 'K/s'
+units['tntd'] = 'K/s'
+
+units['tnthrsw'] = 'K/s'
+units['tnthrlw'] = 'K/s'
+units['tnthrswcs'] = 'K/s'
+units['tnthrlwcs'] = 'K/s'
+units['tnthpbl'] = 'K/s'
+units['tnthlscp'] = 'K/s'
+units['tnthc'] = 'K/s'
+units['tnthshc'] = 'K/s'
+units['tnthd'] = 'K/s'
+
+units['tnqvpbl'] = 'kg/kg/s'
+units['tnqvlscp'] = 'kg/kg/s'
+units['tnqvc'] = 'kg/kg/s'
+units['tnqvshc'] = 'kg/kg/s'
+units['tnqvd'] = 'kg/kg/s'
+
+units['tnupbl'] = 'm/s2'
+units['tnuc'] = 'm/s2'
+units['tnushc'] = 'm/s2'
+units['tnud'] = 'm/s2'
+
+units['tnvpbl'] = 'm/s2'
+units['tnvc'] = 'm/s2'
+units['tnvshc'] = 'm/s2'
+units['tnvd'] = 'm/s2'
+
+units['tnthlrsw'] = 'K/s'
+units['tnthlrlw'] = 'K/s'
+units['tnthlrswcs'] = 'K/s'
+units['tnthlrlwcs'] = 'K/s'
+units['tnthlpbl'] = 'K/s'
+units['tnthllscp'] = 'K/s'
+units['tnthlc'] = 'K/s'
+units['tnthlshc'] = 'K/s'
+units['tnthld'] = 'K/s'
+
+units['tnqtpbl'] = 'kg/kg/s'
+units['tnqtlscp'] = 'kg/kg/s'
+units['tnqtc'] = 'kg/kg/s'
+units['tnqtshc'] = 'kg/kg/s'
+units['tnqtd'] = 'kg/kg/s'
+
+units['tnql'] = 'kg/kg/s'
+units['tnqi'] = 'kg/kg/s'
+units['tnqr'] = 'kg/kg/s'
+units['tnqsn'] = 'kg/kg/s'
+
+units['tnqlc'] = 'kg/kg/s'
+units['tnqic'] = 'kg/kg/s'
+units['tnqrc'] = 'kg/kg/s'
+units['tnqsnc'] = 'kg/kg/s'
+
+units['tnqlshc'] = 'kg/kg/s'
+units['tnqishc'] = 'kg/kg/s'
+units['tnqrshc'] = 'kg/kg/s'
+units['tnqsnshc'] = 'kg/kg/s'
+
+units['tntcas'] = 'K/s'
+units['tntcs'] = 'K/s'
+units['tntfplcl'] = 'K/s'
+units['tntfplcn'] = 'K/s'
+units['tntfccql'] = 'K/s'
+units['tntfecl'] = 'K/s'
+units['tntfccqn'] = 'K/s'
+units['tntfecn'] = 'K/s'
+units['tntfhimcc'] = 'K/s'
+
+units['tntfplsl'] = 'K/s'
+units['tntfplsn'] = 'K/s'
+units['tntfcsql'] = 'K/s'
+units['tntfesl'] = 'K/s'
+units['tntfcsqn'] = 'K/s'
+units['tntfesn'] = 'K/s'
+
+
+##########################################
+# 8.2 Flux de la physique
+
+units['wpqtp_pbl'] = 'kg kg-1 m s-1'
+units['wpthlp_pbl'] = 'K m s-1'
+units['wpqtp_conv'] = 'kg kg-1 m s-1'
+units['wpthlp_conv'] = 'K m s-1'
+
+##########################################
+# 9. Tendances liees au forcages
+
+units['tntadv'] = 'K/s'
+units['tntnudg'] = 'K/s'
+units['tnqadv'] = 'kg/kg/s'
+units['tnqnudg'] = 'kg/kg/s'
+
+##########################################
+# 10. Divers
+
+units['Cp'] = 'J/K/kg'
+units['Lv'] = 'J/kg'
+
+##########################################
+# 11. Bilan eau et energie
+
+units['qflux'] = 'kg/m2/s'
+units['qfluxPr'] = 'kg/m2/s'
+units['qfluxEv'] = 'kg/m2/s'
+units['dwater'] = 'kg/m2'
+units['efluxTOA'] = 'W/m2'
+units['efluxSfc'] = 'W/m2'
+units['denergy'] = 'J/kg'
+
+units['RMSE9'] = '-'
+units['RMSE0'] = '-'
+units['RMSE1'] = '-'
+units['RDMSE'] = '-'
+units['msefluxSfc'] = 'W/m2'
+units['iQadv'] = 'kg/m2/s'
+units['iQnud'] = 'kg/m2/s'
+units['iTadv'] = 'K kg/m2/s'
+units['iTnud'] = 'K kg/m2/s'
+units['iUadv'] = 'm2/s2'
+units['iUnud'] = 'm2/s2'
+units['iVadv'] = 'm2/s2'
+units['iVnud'] = 'm2/s2'
+units['iEadv'] = 'W/m2'
+units['iEnud'] = 'W/m2'
+
+units['efluxSfcRad'] = 'W/m2'
+units['efluxSfcTurb'] = 'W/m2'
+units['efluxSfcConv'] = 'W/m2'
+units['efluxSfcAdj'] = 'W/m2'
+units['efluxSfcPrSen'] = 'W/m2'
+units['efluxSfcPrLat'] = 'W/m2'
+
+units['iMSEadv'] = 'W/m2'
+units['iMSEnud'] = 'W/m2'
+units['iMSEw'] = 'W/m2'
+units['iQw'] = 'kg/m2/s'
+units['iEw'] = 'W/m2'
+
+##########################################
+# 12. Especes Gazeuses
+
+units['rCO2'] = 'kg/kg'
+units['rCH4'] = 'kg/kg'
+units['rN2O'] = 'kg/kg'
+units['rNO2'] = 'kg/kg'
+units['rCFC11'] = 'kg/kg'
+units['rCFC12'] = 'kg/kg'
+units['rCFC22'] = 'kg/kg'
+units['rCCL4'] = 'kg/kg'
+units['rO3'] = 'kg/kg'
+
+##########################################
+# 13. Variables du schema de convection Bougeault 1985
+
+units['alpha'] = '-'
+units['Mf'] = 'kg/m2/s'
+units['Tu'] = 'K'
+units['Thu'] = 'K'
+units['qvu'] = 'kg/kg'
+units['qcu'] = 'kg/kg'
+
+##########################################
+# 14. Variables du schema PCMT
+
+units['alpha_up'] = '-'
+units['w_up'] = 'm/s'
+units['omega_up'] = 'Pa/s'
+units['alpha_dn'] = '-'
+units['w_dn'] = 'm/s'
+units['omega_dn'] = 'Pa/s'
+units['cape'] = 'J/kg'
+units['T_up'] = 'K'
+units['qv_up'] = 'kg/kg'
+units['omega_ref'] = 'Pa/s'
+
+##########################################
+# 15. Variables pour le wake
+
+units['delta_t'] = 'K'
+units['delta_q'] = 'kg/kg'
+units['d_delta_t_gw'] = 'K/s'
+units['omgb_dth'] = 'K/s'
+units['dp_omgb'] = '/s'
+units['dt_KE'] = 'K/s'
+units['dq_KE'] = 'kg/kg/s'
+units['dt_PBL'] = 'K/s'
+units['dq_PBL'] = 'kg/kg/S'
+units['omg_w'] = 'Pa/s'
+units['dp_delt_omg'] = '/s'
+units['spread_w'] = 'K/s'
+units['delta_th'] = 'K'
+units['dt_wake'] = 'K/s'
+units['dq_wake'] = 'K_s'
+units['t_undi'] = 'K'
+units['q_undi'] = 'kg/kg'
+units['d_delta_t'] = 'K/s'
+units['d_delta_q'] = 'kg/kg/s'
+units['hw'] = 'm'
+units['sigmaw'] = '-'
+units['wake_pe'] = 'J/kg'
+units['wake_fip'] = 'W/m2'
+units['wake_gfl'] = 'm'
+units['Cstar'] = 'm/s'
+units['wdens'] = '/m2'
+units['dt_dn'] = 'K/s'
+units['dt_up'] = 'K/s'
+units['dq_dn'] = 'kg/kg/s'
+units['dq_up'] = 'kg/kg/s'
+units['Mf_dn'] = 'kg/m2/s'
+units['Mf_up'] = 'kg/m2/s'
+units['sigd'] = '-'
+units['omgb'] = 'Pa/s'
+units['t_undi_pcmt'] = 'K'
+units['q_undi_pcmt'] = 'kg/kg'
+units['t_wake_pcmt'] = 'K'
+units['q_wake_pcmt'] = 'kg/kg'
+units['qw_undi'] = 'kg/kg'
+units['qw_wake'] = 'kg/kg'
+units['Tw_wake'] = 'K'
+units['Tw_undi'] = 'K'
+units['qsat_undi'] = 'kg/kg'
+units['qsat_wake'] = 'kg/kg'
+
+##########################################
+# 16. Variables pour la turbulence
+
+units['Q11'] = '-'
+units['Q11min'] = '-'
+units['Q11max'] = '-'
+units['igs'] = 'kg/kg'
+units['igs2'] = '(kg/kg)^2'
+units['igs2turb'] = '(kg/kg)^2'
+units['igs2conv'] = '(kg/kg)^2'
+units['sigs'] = 'kg/kg'
+units['sigs2'] = '(kg/kg)^2'
+units['sigs2turb'] = '(kg/kg)^2'
+units['sigs2conv'] = '(kg/kg)^2'
+units['mlen'] = 'm2 s-2'
+units['acoef'] = '-'
+units['sigc0'] = 'kg/kg'
+units['sigc1'] = 'kg/kg'
+
+##########################################
+# 17. Variables COSP
+
+units['cltcalipso'] = '%'
+units['cllcalipso'] = '%'
+units['clmcalipso'] = '%'
+units['clhcalipso'] = '%'
+units['clcalipso'] = '%'
+units['cllcalipsoice'] = '%'
+units['clmcalipsoice'] = '%'
+units['clhcalipsoice'] = '%'
+units['cltcalipsoice'] = '%'
+units['cllcalipsoliq'] = '%'
+units['clmcalipsoliq'] = '%'
+units['clhcalipsoliq'] = '%'
+units['cltcalipsoliq'] = '%'
+units['cllcalipsoun'] = '%'
+units['clmcalipsoun'] = '%'
+units['clhcalipsoun'] = '%'
+units['cltcalipsoun'] = '%'
+units['lidarBetaMol532'] = 'm-1 sr-1'
+units['clcalipsoice'] = '%'
+units['clcalipsoliq'] = '%'
+units['clcalipsoun'] = '%'
+units['clcalipsotmp'] = '%'
+units['clcalipsotmpice'] = '%'
+units['clcalipsotmpliq'] = '%'
+units['clcalipsotmpun'] = '%'
+units['parasolRefl'] = '1'
+units['cltlidarradar'] = '%'
+units['clcalipso2'] = '%'
+units['cltisccp'] = '%'
+units['pctisccp'] = 'Pa'
+units['tauisccp'] = '1'
+units['albisccp'] = '1'
+units['meantbisccp'] = 'K'
+units['meantbclrisccp'] = 'K'
+units['boxtauisccp'] = '1'
+units['boxptopisccp'] = 'Pa'
+units['cltmodis'] = '%'
+units['clwmodis'] = '%'
+units['climodis'] = '%'
+units['clhmodis'] = '%'
+units['clmmodis'] = '%'
+units['cllmodis'] = '%'
+units['tautmodis'] = '1'
+units['tauwmodis'] = '1'
+units['tauimodis'] = '1'
+units['tautlogmodis'] = '1'
+units['tauwlogmodis'] = '1'
+units['tauilogmodis'] = '1'
+units['reffclwmodis'] = 'm'
+units['reffclimodis'] = 'm'
+units['pctmodis'] = 'Pa'
+units['lwpmodis'] = 'kg m-2'
+units['iwpmodis'] = 'kg m-2'
+units['toffset'] = 'day'
+units['fracout'] = '1'
+units['atb532'] = 'm-1 sr-1'
+units['cfadLidarsr532'] = '1'
+units['dbze94'] = '1'
+units['cfadDbze94'] = '1'
+units['clisccp'] = '%'
+units['clmodis'] = '%'
+units['clMISR'] = '%'
+
+for vv in ['ZLAT_COSP','ZLON_COSP','PLSM_COSP','PMU0_COSP','PEMIS_COSP','PTS_COSP','ZAP_COSP','ZAPH_COSP','ZAPHI_COSP','ZAPHIF_COSP','ZU_COSP','ZV_COSP','ZT_COSP','ZQ_COSP','ZRH_COSP','ZOZN_COSP','ZCLFR_COSP','ZCLFRCC_COSP','ZMRLSLIQ_COSP','ZMRLSICE_COSP','ZMRCCLIQ_COSP','ZMRCCICE_COSP','ZFLLSRAIN_COSP','ZFLLSSNOW_COSP','ZFLCCRAIN_COSP','ZFLCCSNOW_COSP','ZRADLP_COSP','ZRADIP_COSP','ZTAUSW_COSP','ZEMILW_COSP']:
+  units[vv] = '-'
diff --git a/UTIL/post_DEPHY.old/convert2p.F90 b/UTIL/post_DEPHY.old/convert2p.F90
new file mode 100644
index 0000000..3a803dc
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convert2p.F90
@@ -0,0 +1,40 @@
+!macRR: f2py -c interpvertp.F90 -m interpvertp
+!CNRM: /opt/cdat/bin/f2py -c -I/opt/cdat/include convert2p.F90 -m convert2p
+SUBROUTINE convert2p(nt,nlevin,nlevout,levin,levout,datain,dataout,missing)
+
+IMPLICIT NONE
+
+INTEGER, INTENT(IN) :: nt, nlevin, nlevout
+REAL, INTENT(IN) :: levin(nt,nlevin)
+REAL, INTENT(IN) :: levout(nlevout)
+REAL, INTENT(IN) :: datain(nt,nlevin)
+REAL, INTENT(OUT) :: dataout(nt,nlevout)
+REAL, INTENT(OUT) :: missing(nt,nlevout)
+
+!f2py intent(in) nt,nlevin,nlevout,levin,levout,datain
+!f2py intent(out) dataout, missing
+
+integer ilevin, ilevout, ii, it
+real slope
+
+do it=1,nt
+  do ilevout=1,nlevout
+    missing(it,ilevout) = 1.
+    do ilevin=1,nlevin-1
+      if ((levin(it,ilevin).lt.levout(ilevout)) &
+         & .and.(levin(it,ilevin+1).ge.levout(ilevout))) then
+        ii = ilevin
+        missing(it,ilevout) = 0.
+      endif
+    enddo
+    if (missing(it,ilevout) == 0.) then
+      slope = (levout(ilevout)-levin(it,ii))/(levin(it,ii+1)-levin(it,ii))
+
+      dataout(it,ilevout) = datain(it,ii)+slope*(datain(it,ii+1)-datain(it,ii))
+    endif
+  enddo
+enddo
+
+return
+
+END      
diff --git a/UTIL/post_DEPHY.old/convert2p.py b/UTIL/post_DEPHY.old/convert2p.py
new file mode 100644
index 0000000..019fcbc
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convert2p.py
@@ -0,0 +1,80 @@
+import cdms2
+import MV2
+import sys
+import convert2p
+import config
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+varall = config.saveall
+
+var2save = config.var2save
+
+levout = config.levout
+levout = MV2.array(levout,typecode=MV2.float32)
+nlevout = levout.shape[0]
+
+levout = cdms2.createAxis(levout)
+levout.id = 'levp'
+levout.designateLevel()
+levout.units = 'hPa'
+levout.long_name = 'pressure_level'
+
+missing_value = 1.e20
+
+
+if varall:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save = f.listvariables()
+  f.close
+else:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save0 = f.listvariables()
+  f.close 
+  var2save = set(var2save).intersection(set(var2save0))
+
+f = cdms2.open('netcdf/Out_klevel.nc')
+pres = f('ph')/100.
+presf = f('pf')/100.
+
+time = pres.getTime()
+
+nlev = presf.shape[1]
+nlev1 = pres.shape[1]
+
+g = cdms2.open('netcdf/Out_plevel.nc','w')
+
+for var in var2save:
+  if config.verbose >= 1:	
+    print var	
+  data0 = f(var)
+  if (len(data0.shape) == 2 and data0.shape[1] >= nlev) and var not in ['clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR','parasolRefl','clcalipso2','boxtauisccp','boxptopisccp','VETAF']:
+    if data0.shape[1] == nlev:
+      data,missing = convert2p.convert2p(presf,levout,data0)
+    elif data0.shape[1] == nlev1:
+      data,missing = convert2p.convert2p(pres,levout,data0)
+    else:
+      print 'vertical dimension unexpected for ' + var + ': ' + str(f[var].shape[1])
+      sys.exit()
+
+    data = MV2.array(data,typecode=MV2.float)
+    data = MV2.where(missing == 1, missing_value,data)
+    data = MV2.masked_values(data,missing_value)
+    data.missing_value = missing_value
+    data.setAxis(0,time)
+    data.setAxis(1,levout)
+    data.id = var
+    for att in data0.listattributes():
+      data.setattribute(att,data0.getattribute(att))
+
+    #print MV2.min(data), MV2.max(data)
+    g.write(data)
+  else:
+    #print MV2.min(data0), MV2.max(data0)
+    g.write(data0)	  
+
+
+f.close()
+g.close()
diff --git a/UTIL/post_DEPHY.old/convert2p.so b/UTIL/post_DEPHY.old/convert2p.so
new file mode 100755
index 0000000..20cd20c
Binary files /dev/null and b/UTIL/post_DEPHY.old/convert2p.so differ
diff --git a/UTIL/post_DEPHY.old/convert2z.F90 b/UTIL/post_DEPHY.old/convert2z.F90
new file mode 100644
index 0000000..c155552
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convert2z.F90
@@ -0,0 +1,43 @@
+!macRR: f2py -c interpvertp.F90 -m interpvertp
+!CNRM: /opt/cdat/bin/f2py -c -I/opt/cdat/include convert2z.F90 -m convert2z
+SUBROUTINE convert2z(nt,nlevin,nlevout,levin,levout,datain,dataout,missing)
+
+IMPLICIT NONE
+
+INTEGER, INTENT(IN) :: nt, nlevin, nlevout
+REAL, INTENT(IN) :: levin(nt,nlevin)
+REAL, INTENT(IN) :: levout(nlevout)
+REAL, INTENT(IN) :: datain(nt,nlevin)
+REAL, INTENT(OUT) :: dataout(nt,nlevout)
+REAL, INTENT(OUT) :: missing(nt,nlevout)
+
+!f2py intent(in) nt,nlevin,nlevout,levin,levout,datain
+!f2py intent(out) dataout,missing
+
+integer ilevin, ilevout, ii, it
+real slope
+
+do it=1,nt
+  do ilevout=1,nlevout
+    missing(it,ilevout) = 1.
+    do ilevin=1,nlevin-1
+!      if (it == 1) then
+!        print*, levin(it,ilevin), levin(it,ilevin+1), levout(ilevout)
+!      endif
+      if ((levin(it,ilevin).gt.levout(ilevout)) &
+         & .and.(levin(it,ilevin+1).le.levout(ilevout))) then
+        ii = ilevin
+        missing(it,ilevout) = 0.
+      endif
+    enddo
+    if (missing(it,ilevout) == 0.) then
+      slope = (levout(ilevout)-levin(it,ii))/(levin(it,ii+1)-levin(it,ii))
+
+      dataout(it,ilevout) = datain(it,ii)+slope*(datain(it,ii+1)-datain(it,ii))
+    endif
+  enddo
+enddo
+
+return
+
+END      
diff --git a/UTIL/post_DEPHY.old/convert2z.py b/UTIL/post_DEPHY.old/convert2z.py
new file mode 100644
index 0000000..75bcaa8
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convert2z.py
@@ -0,0 +1,83 @@
+import cdms2
+import MV2
+import sys
+import convert2z
+import config
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+varall = config.saveall
+
+var2save = config.var2save
+
+levelz = config.levoutz
+levelz = MV2.array(levelz,typecode=MV2.float32)
+nlevz = levelz.shape[0]
+
+levelz = cdms2.createAxis(levelz)
+levelz.id = 'levz'
+levelz.designateLevel()
+levelz.units = 'm'
+levelz.long_name = 'Altitude'
+
+
+missing_value = 1.e20
+
+if varall:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save = f.listvariables()
+  f.close
+else:
+  f =cdms2.open('netcdf/Out_klevel.nc')
+  var2save0 = f.listvariables()
+  f.close 
+  var2save = set(var2save).intersection(set(var2save0))
+
+f = cdms2.open('netcdf/Out_klevel.nc')
+phi = f('zh')
+phif = f('zf')
+
+time = phi.getTime()
+
+nlev = phif.shape[1]
+nlev1 = phi.shape[1]
+
+for ilev1 in range(0,nlev1):
+    phi[:,ilev1] = phi[:,ilev1] - phi[:,nlev1-1]
+
+for ilev in range(0,nlev):
+    phif[:,ilev] = phif[:,ilev] - phif[:,nlev-1]
+
+g = cdms2.open('netcdf/Out_zlevel.nc','w')
+
+for var in var2save:
+  print var	
+  data0 = f(var)
+  if (len(data0.shape) == 2 and data0.shape[1] >= nlev) and var not in ['clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR','parasolRefl','clcalipso2','boxtauisccp','boxptopisccp','VETAF']:
+    if data0.shape[1] == nlev:
+      data,missing = convert2z.convert2z(phif,levelz,data0)
+    elif data0.shape[1] == nlev1:
+      data,missing = convert2z.convert2z(phi,levelz,data0)
+    else:
+      print 'vertical dimension unexpected for ' + var + ': ' + str(f[var].shape[1])
+      sys.exit()
+  
+    data = MV2.array(data,typecode=MV2.float)
+    data = MV2.where(missing == 1, missing_value,data)
+    data = MV2.masked_values(data,missing_value)
+    data.missing_value = missing_value
+    data.setAxis(0,time)
+    data.setAxis(1,levelz)
+    data.id = var
+    for att in data0.listattributes():
+      data.setattribute(att,data0.getattribute(att))
+
+    g.write(data)
+  else:
+    g.write(data0)	  
+
+
+f.close()
+g.close()
diff --git a/UTIL/post_DEPHY.old/convert2z.so b/UTIL/post_DEPHY.old/convert2z.so
new file mode 100755
index 0000000..a432ba5
Binary files /dev/null and b/UTIL/post_DEPHY.old/convert2z.so differ
diff --git a/UTIL/post_DEPHY.old/convertLFA2nc.py b/UTIL/post_DEPHY.old/convertLFA2nc.py
new file mode 100755
index 0000000..8bd1f65
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertLFA2nc.py
@@ -0,0 +1,52 @@
+#!/usr/bin/env python
+# -*- coding:UTF-8 -*-
+import os, sys
+import config
+
+if not(os.path.exists('netcdf')):
+    os.makedirs('netcdf')
+else:
+    os.system('rm -f netcdf/*')
+
+os.system('python lfa2nc_part1.py')
+os.system('python lfa2nc_part2.py')
+
+os.system('mv Out_klevel.nc netcdf/')
+
+if config.convertk1h:
+    os.system('python convertk_to_1hourly.py')
+
+if config.convertk3h:
+    print 'convertk3h not coded yet'
+    pass #sys.exit()
+    #os.system('python convertk_to_3hourly.py')
+
+if config.convertkday:
+    os.system('python convertk_to_daily.py')
+
+
+if config.convert2p:
+    os.system('python convert2p.py')
+    if config.convertp1h:
+        os.system('python convertp_to_1hourly.py')
+
+    if config.convertp3h:
+        os.system('python convertp_to_3hourly.py')
+
+    if config.convertpday:
+        os.system('python convertp_to_daily.py')
+
+
+if config.convert2z:
+    os.system('python convert2z.py')
+    if config.convertz1h:
+        os.system('python convertz_to_1hourly.py')
+
+    if config.convertz3h:
+        print 'convertz3h not coded yet'
+        pass #sys.exit()
+        #os.system('python convertz_to_3hourly.py')
+
+    if config.convertzday:
+        os.system('python convertz_to_daily.py')
+
diff --git a/UTIL/post_DEPHY.old/convertk_to_1hourly.py b/UTIL/post_DEPHY.old/convertk_to_1hourly.py
new file mode 100644
index 0000000..9d1cc12
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertk_to_1hourly.py
@@ -0,0 +1,86 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_klevel.nc')
+
+time0 = f('pf').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/3600)-1
+
+kt = int(3600/dt)
+nt1=kt*nt
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_1hourly_klevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/convertk_to_daily.py b/UTIL/post_DEPHY.old/convertk_to_daily.py
new file mode 100644
index 0000000..d014b30
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertk_to_daily.py
@@ -0,0 +1,85 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_klevel.nc')
+
+time0 = f('pf').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/86400)-1
+
+kt = int(86400/dt)
+nt1 = kt*nt
+
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Day)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_daily_klevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/convertp_to_1hourly.py b/UTIL/post_DEPHY.old/convertp_to_1hourly.py
new file mode 100644
index 0000000..d743971
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertp_to_1hourly.py
@@ -0,0 +1,86 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+var = f.listvariables()
+time0 = f(var[0]).getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/3600)-1
+
+kt = int(3600/dt)
+nt1=kt*nt
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_1hourly_plevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/convertp_to_3hourly.py b/UTIL/post_DEPHY.old/convertp_to_3hourly.py
new file mode 100644
index 0000000..8fe3d95
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertp_to_3hourly.py
@@ -0,0 +1,96 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+nt = 100*24/3
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+tmp = f.getAxis('time')
+dt = tmp[1]-tmp[0]
+t0 = cdtime.reltime(tmp[0]-dt/2.,tmp.units)
+
+unitsTime = tmp.units.replace('seconds','hours') #'hours since 2011-10-01 0:0:0.0'
+
+time0 = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+#  tt = cdtime.comptime(2011,10,1,0,0,0)
+#  tt = tt.add(3.*it+1.5,cdtime.Hour)
+  tt = t0.add(3.*it+1.5,cdtime.Hour)
+  time0[it] = tt.torel(unitsTime).value
+
+time0.designateTime()
+time0.id = 'time'
+time0.units = unitsTime
+time0.calendar = 'gregorian'
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+
+g = cdms2.open(rep0 + '/netcdf/Out_3hourly_plevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+  nt = nt0/(3*4)-1
+  nt0 = nt*3*4+1
+  tmp = tmp[0:nt0]
+
+  for it in range(0,4*3+1):
+    if it == 0:
+      data = data + tmp[0:nt0-1:4*3]/(8*3.)
+      rms = rms + tmp[0:nt0-1:4*3]*tmp[0:nt0-1:4*3]/(8*3.)
+    elif it == 4*3:
+      data = data + tmp[4*3:nt0:4*3]/(8*3.)
+      rms = rms + tmp[4*3:nt0:4*3]*tmp[4*3:nt0:4*3]/(8*3.)
+    else:
+      data = data + tmp[it:nt0-1:4*3]/(4*3.)
+      rms = rms + tmp[it:nt0-1:4*3]*tmp[it:nt0:4*3]/(4*3.)
+
+  time = time0[0:nt]
+  time = cdms2.createAxis(time)
+  time.designateTime()
+  time.id = 'time'
+  time.units = unitsTime
+  time.calendar = 'gregorian'
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/convertp_to_daily.py b/UTIL/post_DEPHY.old/convertp_to_daily.py
new file mode 100644
index 0000000..5a889fb
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertp_to_daily.py
@@ -0,0 +1,94 @@
+import cdms2
+import MV2
+import cdtime
+import numpy as np
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+
+time0 = f('pf').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/86400)#-1
+
+kt = int(86400/dt)
+nt1 = kt*nt
+
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Day)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_daily_plevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 10:
+    lev = tmp.getLevel()
+
+  if var in ['rsuscs','rsdscs']:
+    tmp = MV2.where(np.isnan(tmp),0,tmp) # problem with nan values... to be understood in MUSC...
+
+  #print MV2.min(tmp),MV2.max(tmp)
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  #print MV2.min(data),MV2.max(data)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 10:
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/convertz_to_1hourly.py b/UTIL/post_DEPHY.old/convertz_to_1hourly.py
new file mode 100644
index 0000000..06da2df
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertz_to_1hourly.py
@@ -0,0 +1,86 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_zlevel.nc')
+
+time0 = f('pf').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/3600)-1
+
+kt = int(3600/dt)
+nt1=kt*nt
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_1hourly_zlevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  nt0 = tmp.shape[0]
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 31:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/convertz_to_daily.py b/UTIL/post_DEPHY.old/convertz_to_daily.py
new file mode 100644
index 0000000..c642dd5
--- /dev/null
+++ b/UTIL/post_DEPHY.old/convertz_to_daily.py
@@ -0,0 +1,85 @@
+import cdms2
+import MV2
+import cdtime
+#from sets import Set
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+rep0 = './'
+
+f = cdms2.open(rep0 + '/netcdf/Out_zlevel.nc')
+
+time0 = f('pf').getTime()
+
+nt0 = time0.shape[0]
+t0 = cdtime.reltime(time0[0],time0.units)
+dt = time0[1]-time0[0]
+
+nt = int(nt0*dt/86400)-1
+
+kt = int(86400/dt)
+nt1 = kt*nt
+
+
+time = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
+for it in range(0,nt):
+  tt = t0.add(it+0.5,cdtime.Hour)
+  time[it] = tt.torel(time0.units).value
+
+time.designateTime()
+time.id = 'time'
+time.units = time0.units
+time.calendar = 'gregorian'
+
+g = cdms2.open(rep0 + '/netcdf/Out_daily_zlevel.nc','w')
+
+for var in f.listvariables():
+ if not(var in ['bounds_time','boxtauisccp','boxptopisccp','fracout','atb532','cfadLidarsr532','dbze94','cfadDbze94','clisccp','clmodis','clMISR']):
+  print var
+  data = 0.
+  rms = 0.
+
+  tmp = f(var, squeeze=1)
+
+  for it in range(0,kt+1):
+    if it == 0:
+      data = data + tmp[0:nt1-1:kt]/(kt*2.)
+      rms = rms + tmp[0:nt1-1:kt]*tmp[0:nt1-1:kt]/(kt*2.)
+    elif it == kt:
+      data = data + tmp[kt:nt1+1:kt]/(kt*2.)
+      rms = rms + tmp[kt:nt1+1:kt]*tmp[kt:nt1+1:kt]/(kt*2.)
+    else:
+      data = data + tmp[it:nt1:kt]/(kt*1.)
+      rms = rms + tmp[it:nt1:kt]*tmp[it:nt1:kt]/(kt*1.)
+
+  data.setAxis(0,time)
+  rms.setAxis(0,time)
+
+  if len(tmp.shape) == 2 and tmp.shape[1] >= 10:
+    lev = tmp.getLevel()	 
+    data.setAxis(1,lev)
+    rms.setAxis(1,lev)
+
+  data.id = var
+  data.units = tmp.units
+  data.long_name = tmp.long_name
+
+  rms = MV2.sqrt(rms)
+  rms.id = 'rms_' + var
+  rms.units = tmp.units
+  rms.name = 'RMS of ' + tmp.long_name
+
+  g.write(data)
+  g.write(rms)
+
+  del(data)
+
+g.close()
+
+
+
+
+	  
+
diff --git a/UTIL/post_DEPHY.old/lfa2nc_part1.py b/UTIL/post_DEPHY.old/lfa2nc_part1.py
new file mode 100644
index 0000000..a0f1633
--- /dev/null
+++ b/UTIL/post_DEPHY.old/lfa2nc_part1.py
@@ -0,0 +1,239 @@
+import sys
+#print sys.path
+sys.path = ['./'] + sys.path
+
+import lfa
+import netCDF4
+import os
+import string
+import numpy
+
+import variables
+import config
+
+REP_EMS = os.getenv('REP_EMS')
+
+saveall = config.saveall
+
+if not(saveall):
+  var2save0 = config.var2save
+  var2save = []
+  for var in var2save0:
+    if var in variables.varnames.keys():
+      var2save.append(variables.varnames[var])	 
+    else:
+      print var, 'not in variables.varnames.keys()' 
+
+  var2add = ['NINDAT',\
+             'NSSSSS',\
+             'RSTATI',\
+	     'TSPHY',\
+	     'PAPRS',\
+	     'PAPRSF',\
+	     'PAPHI',\
+	     'PAPHIF']
+
+  for var in var2add:
+    var2save.append(var)
+
+  var2save = set(var2save)
+
+# list of files
+
+os.system("find LFA -name '*.lfa' > var.tmp")
+
+f = open('var.tmp')
+files = f.readlines()
+f.close()
+os.system('rm var.tmp')
+
+
+nfiles = len(files)
+
+# List of variables and their size and type is retrieved
+
+lfalaf= REP_EMS + '/UTIL/Tools/LFA/bin/lfalaf'
+
+os.system(lfalaf + ' ' + files[0].strip() + ' > var.tmp')
+
+f = open('var.tmp')
+line0 = f.readline()
+lines=f.readlines()
+f.close()
+os.system('rm var.tmp')
+
+variables = []
+sizes = {}
+types = {}
+for line in lines:
+  sp = string.split(line,'|')
+#  print sp
+  var = sp[3][1:-1]
+  type = sp[1]
+  tmp = string.split(sp[2])
+  size = int(tmp[1])
+  variables.append(var)
+  sizes[var] = size
+  types[var] = type
+
+lvar4D = {}
+for vv in ['fracout', 'atb532', 'cfadLidarsr532', 'dbze94', 'cfadDbze94', 'clisccp', 'clmodis', 'clMISR']:
+  lvar4D[vv] = False	
+  if vv + '_001' in variables:
+    variables.append(vv)	  
+    lvar4D[vv] = True
+    sizes[vv] = sizes[vv + '_001']
+    types[vv] = types[vv + '_001']
+
+if saveall: 
+  var2save = variables
+  var2save = set(var2save)
+else:
+  variables = set(variables)
+  var2save = variables.intersection(set(var2save))
+
+
+# Getting levels number
+
+klev = int(lfa.readi(files[0].strip(),'KLEV',1))
+lcolumn = False
+try:
+  ncol = int(lfa.readi(files[0].strip(),'NCOLUMNS',1))
+  if not(ncol == 0): lcolumn = True
+except:
+  pass
+
+# Init nectdf file
+
+f = netCDF4.Dataset('global.nc','w',format='NETCDF3_CLASSIC')
+level = f.createDimension('level',klev)
+Hlevel = f.createDimension('Hlevel',klev+1)
+level2 = f.createDimension('level2',klev+2)
+alt40 = f.createDimension('alt40',40)
+temp = f.createDimension('temp',40)
+sza5 = f.createDimension('sza5',5)
+if lcolumn or lvar4D['dbze94'] or lvar4D['atb532'] or lvar4D['fracout']:
+  column = f.createDimension('column',ncol)
+if lvar4D['cfadDbze94']:
+  dbze = f.createDimension('dbze',15)
+if lvar4D['cfadLidarsr532']:
+  sratio = f.createDimension('sratio',15)
+if lvar4D['clisccp'] or lvar4D['clmodis'] or lvar4D['clMISR']:  
+  tau = f.createDimension('tau',7)
+if lvar4D['clisccp'] or lvar4D['clmodis']:  
+  plev7 = f.createDimension('plev7',7)  
+if lvar4D['clMISR']:  
+  cth16 = f.createDimension('cth16',16)
+
+time = f.createDimension('time',None)
+
+data = {}
+ii=0
+for var in var2save:
+  if sizes[var] == 1:
+    axis = ('time')
+  if sizes[var] == 2:
+    axis = ('time','TOASurf')
+    if ii == 0:
+      topdown = f.createDimension('TOASurf',2)
+      ii = 1
+  if sizes[var] == klev and not(var in ['fracout', 'atb532', 'cfadLidarsr532', 'dbze94', 'cfadDbze94', 'clisccp', 'clmodis', 'clMISR']):
+    axis = ('time','level')
+  if sizes[var] == klev+1  and not(var in ['fracout', 'atb532', 'cfadLidarsr532', 'dbze94', 'cfadDbze94', 'clisccp', 'clmodis', 'clMISR']):
+    axis = ('time','Hlevel')
+  if sizes[var] == klev+2:
+    axis = ('time','level2')
+  if var in ['clcalipso','clcalipso2','clcalipsoice','clcalipsoliq','clcalipsoun'] and sizes[var] == 40:
+    axis = ('time','alt40')
+  if var in ['clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun'] and sizes[var] == 40:
+    axis = ('time','temp')
+  if var in ['parasolRefl'] and sizes[var] == 5:
+    axis = ('time','sza5')
+  if lcolumn and var in ['boxtauisccp','boxptopisccp'] and sizes[var] == ncol:
+    axis = ('time','column')	
+  if var in ['fracout', 'atb532', 'dbze94']:
+    axis = ('time','column','level')
+  if var in ['cfadDbze94']:
+    axis = ('time','dbze','alt40')
+  if var in ['cfadLidarsr532']:
+    axis = ('time','sratio','alt40')
+  if var in ['clisccp','clmodis']:
+    axis = ('time','tau','plev7')
+  if var in ['clMISR']:
+    axis = ('time','tau','cth16')
+
+
+
+  if types[var] == 'I4':  	
+    typ = 'i4'
+  if types[var] == 'R4':
+    typ = 'f4'
+  if types[var] == 'C ':
+    typ = 'c'	  
+  
+  if typ <> 'c':
+    data[var] = f.createVariable(var,typ,axis)
+  
+
+it = -1
+for file in sorted(files):
+  it = it + 1
+  if config.verbose >= 2:
+    print file.strip()
+  for var in var2save:
+    if var in ['fracout', 'atb532', 'dbze94']:
+      datatmp = numpy.zeros((ncol,klev),dtype=numpy.float)
+      for i in range(0,ncol):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+    elif var in ['cfadDbze94']:
+      datatmp = numpy.zeros((15,40),dtype=numpy.float)
+      for i in range(0,15):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    elif var in ['cfadLidarsr532']:
+      datatmp = numpy.zeros((15,40),dtype=numpy.float)
+      for i in range(0,15):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    elif var in ['clisccp', 'clmodis']:
+      datatmp = numpy.zeros((7,7),dtype=numpy.float)
+      for i in range(0,7):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    elif var in ['clMISR']:
+      datatmp = numpy.zeros((7,16),dtype=numpy.float)
+      for i in range(0,7):
+        vv = var + '_%(i)3.3i'%{"i": i+1}
+	datatmp[i,:] = lfa.readr(file.strip(),vv,sizes[var])
+
+      data[var][it] = datatmp
+
+    else:
+      
+#    print var
+      if types[var] <> 'C ':
+        if types[var] == 'I4':
+          tmp = lfa.readi(file.strip(),var,sizes[var])
+          if sizes[var] == 1:
+            tmp = int(tmp)
+        if types[var] == 'R4':
+          tmp = lfa.readr(file.strip(),var,sizes[var])
+          if sizes[var] == 1:
+            tmp = float(tmp)
+
+        data[var][it] = tmp
+
+f.close()
+
diff --git a/UTIL/post_DEPHY.old/lfa2nc_part2.py b/UTIL/post_DEPHY.old/lfa2nc_part2.py
new file mode 100644
index 0000000..d495b62
--- /dev/null
+++ b/UTIL/post_DEPHY.old/lfa2nc_part2.py
@@ -0,0 +1,331 @@
+import sys, os
+sys.path = ['./'] + sys.path
+import cdms2
+import MV2
+import cdtime
+
+import variables as vv
+import config
+
+cdms2.setNetcdfShuffleFlag(0)
+cdms2.setNetcdfDeflateFlag(0)
+cdms2.setNetcdfDeflateLevelFlag(0)
+
+saveall = config.saveall
+
+var2save = config.var2save
+if not('pf' in var2save):
+  var2save.append('pf')
+if not('ph' in var2save):
+  var2save.append('ph')
+if not('zf' in var2save):
+  var2save.append('zf')
+if not('zh' in var2save):
+  var2save.append('zh')
+varnames = vv.varnames
+names = vv.names
+varunits = vv.units
+coefs = vv.coefs
+
+f = cdms2.open('global.nc')
+
+if saveall:
+  var2save0 = f.listvariables()
+  var2save = []
+  for var in var2save0:
+    if var in vv.varnames.values():
+      for vvar in vv.varnames.keys():
+        if vv.varnames[vvar] == var:	      
+          var2save.append(vvar)
+    else:
+      var2save.append(var)
+      varnames[var] = var
+      names[var] = var
+      coefs[var] = 1.
+      varunits[var] = '-'
+else:
+  var2save0 = f.listvariables()
+  var2save1 = []
+  for var in var2save0:
+    if var in vv.varnames.values():
+      for vvar in vv.varnames.keys():
+        if vv.varnames[vvar] == var:	      
+          var2save1.append(vvar)
+    else:
+      var2save1.append(var)
+      varnames[var] = var
+      names[var] = var
+      coefs[var] = 1.
+      varunits[var] = '-'
+  var2save = set(var2save).intersection(set(var2save1))
+
+#print var2save
+
+nindat = f('NINDAT')
+nsssss = f('NSSSSS')
+rstati = f('RSTATI')
+step = f('TSPHY')[0]
+
+nt = nindat.shape[0]
+
+time = MV2.array(range(0,nt),typecode=MV2.float32)
+time_bnds = MV2.zeros((nt,2),typecode=MV2.float32)
+#units = config.tunits
+
+year = int(str(nindat[0])[0:4])
+month = int(str(nindat[0])[4:6])
+day = int(str(nindat[0])[6:8])
+units = 'seconds since %(year)4.4i-%(month)2.2i-%(day)2.2i 0:0:0.0'%{"year": year, "month": month, "day": day}
+
+for it in range(0,nt):
+  year = int(str(nindat[it])[0:4])
+  month = int(str(nindat[it])[4:6])
+  day = int(str(nindat[it])[6:8])
+  hour = int((nsssss[it]+rstati[it])/3600)
+  minutes = int((nsssss[it]+rstati[it]-hour*3600)/60)
+  seconds = nsssss[it]+rstati[it]-hour*3600-minutes*60
+
+  lhour = False
+  if hour >= 24:
+    ndays = int(hour/24) 
+    hour = hour - ndays*24
+    lhour = True	
+
+  tt = cdtime.comptime(year,month,day,hour,minutes,seconds)
+  if lhour:
+    tt = tt.add(ndays*24,cdtime.Hour)
+
+  time[it] = float(tt.torel(units).value)
+
+  tt1 = tt.add(-step/2.,cdtime.Second)
+  tt2 = tt.add( step/2.,cdtime.Second)
+  if config.verbose >= 2:
+    print tt.tocomp(), tt1.tocomp(), tt2.tocomp()
+  time_bnds[it,0] = float(tt1.torel(units).value)
+  time_bnds[it,1] = float(tt2.torel(units).value)
+
+
+time = cdms2.createAxis(time,bounds=time_bnds)
+time.designateTime()
+time.id = 'time'
+time.units = units
+time.calendar = 'gregorian'
+
+paprsf = f('PAPRSF')[0,:]
+nlev = paprsf.shape[0]
+
+lalt40 = False
+for var in ['clcalipso','clcalipso2','clcalipsoice','clcalipsoliq','clcalipsoun']:
+  try:
+    tmp = f(var)[0,:]
+    lalt40 = True
+  except:
+    pass
+
+
+ltemp = False
+for var in ['clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun']:
+  try:
+    tmp = f(var)[0,:]
+    ltemp = True
+  except:
+    pass
+
+lsza5 = False
+for var in ['parasolRefl']:
+  try:
+    tmp = f(var)[0,:]
+    lsza5 = True
+  except:
+    pass
+
+
+lcolumn = False
+for var in ['boxtauisccp','boxptopisccp','dbze94','atb532','fracout']:
+  try:
+    tmp = f(var)[0,:]
+    ncol = tmp.shape[0]
+    lcolumn=True
+  except:
+    pass	  
+
+ldbze = False
+for var in ['cfadDbze94']:
+  try:
+    tmp = f(var)[0,:,:]
+    ldbze=True
+    lalt40 = True
+  except:
+    pass
+
+lsratio = False
+for var in ['cfadLidarsr532']:
+  try:
+    tmp = f(var)[0,:,:]
+    lsratio=True
+    lalt40 = True
+  except:
+    pass
+
+ltau = False
+lplev7 = False
+for var in ['clisccp','clmodis']:
+  try:
+    tmp = f(var)[0,:,:]
+    ltau=True
+    lplev7=True
+  except:
+    pass
+
+lmisr = False
+for var in ['clMISR']:
+  try:
+    tmp = f(var)[0,:,:]
+    lmisr=True
+  except:
+    pass
+
+levels = MV2.array(range(0,nlev),typecode=MV2.float32)
+levels = cdms2.createAxis(levels)
+levels.designateLevel()
+levels.id = 'levf'
+levels.name = 'Full Pressure Level Number'
+levels.units = '-'
+
+levels0 = MV2.array(range(0,nlev+1),typecode=MV2.float32)
+levels0 = cdms2.createAxis(levels0)
+levels0.designateLevel()
+levels0.id = 'levh'
+levels0.name = 'Half Pressure Level Number'
+levels0.units = '-'
+
+if lalt40:
+  alt40 = [240., 720., 1200., 1680., 2160., 2640., 3120., 3600., 4080., 4560., 5040., 5520., 6000., 6480., 6960., 7440., 7920., 8400., 8880., 9360., 9840., 10320., 10800., 11280., 11760., 12240., 12720., 13200., 13680., 14160., 14640., 15120., 15600., 16080., 16560., 17040., 17520., 18000., 18480., 18960.]
+  alt40 = MV2.array(alt40,typecode=MV2.float32)
+  alt40 = cdms2.createAxis(alt40)
+  alt40.designateLevel()
+  alt40.id = 'alt40'
+  alt40.name = 'altitude'
+  alt40.units = 'm'
+
+if ltemp:
+  temp = [-91.5,-88.5,-85.5,-82.5,-79.5,-76.5,-73.5,-70.5,-67.5,-64.5,-61.5,-58.5,-55.5,-52.5,-49.5,-46.5,-43.5,-40.5,-37.5,-34.5,-31.5,-28.5,-25.5,-22.5,-19.5,-16.5,-13.5,-10.5, -7.5, -4.5,-1.5,  1.5,  4.5,  7.5, 10.5, 13.5, 16.5, 19.5, 22.5, 25.5]
+  temp = MV2.array(temp,typecode=MV2.float32)
+  temp = cdms2.createAxis(temp)
+  temp.designateLevel()
+  temp.id = 'temp'
+  temp.name = 'Temperature'
+  temp.units = 'C'
+
+if lsza5:
+  sza5 = [0., 20., 40., 60., 80.]
+  sza5 = MV2.array(sza5,typecode=MV2.float32)
+  sza5 = cdms2.createAxis(sza5)
+  sza5.id = 'sza5'
+  sza5.name = 'Solar Zenith Angle'
+  sza5.units = 'degree'
+
+if lcolumn:
+  column = MV2.array(range(0,ncol),typecode=MV2.float32)
+  column = cdms2.createAxis(column)
+  column.id = 'column'
+  column.name = 'Column'
+  column.units = '-'
+
+if ldbze:
+  dbze = [-47.5, -42.5, -37.5, -32.5, -27.5, -22.5, -17.5, -12.5, -7.5, -2.5, 2.5, 7.5, 12.5, 17.5, 22.5]
+  dbze = MV2.array(dbze,typecode=MV2.float32)
+  dbze = cdms2.createAxis(dbze)
+  dbze.id = 'dbze'
+  dbze.name = 'CloudSat simulator equivalent radar reflectivity factor'
+  dbze.units = 'dBZ'
+
+if lsratio:
+  sratio = [0.005, 0.605, 2.1, 4., 6., 8.5, 12.5, 17.5, 22.5, 27.5, 35., 45., 55., 70., 50040.]
+  sratio = MV2.array(sratio,typecode=MV2.float32)
+  sratio = cdms2.createAxis(sratio)
+  sratio.id = 'scatratio'
+  sratio.name = 'lidar backscattering ratio'
+  sratio.units = '1'
+
+if ltau:
+  tau = [0.15, 0.8, 2.45, 6.5, 16.2, 41.5, 100.]
+  tau = MV2.array(tau,typecode=MV2.float32)
+  tau = cdms2.createAxis(tau)
+  tau.id = 'tau'
+  tau.name = 'cloud optical depth'
+  tau.units = '1'
+
+if lplev7:
+  plev7 = [90000., 74000., 62000., 50000., 37500., 24500., 9000.]
+  plev7 = MV2.array(plev7,typecode=MV2.float32)
+  plev7 = cdms2.createAxis(plev7)
+  plev7.id = 'plev7'
+  plev7.name = 'pressure'
+  plev7.units = 'Pa'
+
+if lmisr:
+  cth16 = [1000.*x for x in [0., 0.25, 0.75, 1.25, 1.75, 2.25, 2.75, 3.5, 4.5, 6., 8., 10., 12., 14.5, 16., 18.]]
+  cth16 = MV2.array(cth16,typecode=MV2.float32)
+  cth16 = cdms2.createAxis(cth16)
+  cth16.id = 'cth16'
+  cth16.name = 'altitude'
+  cth16.units = 'm'
+
+
+g = cdms2.open('Out_klevel.nc','w')
+for var in var2save:
+  if config.verbose >= 1:
+    print var
+  data = f(varnames[var])*coefs[var]
+  data = MV2.array(data, typecode=MV2.float32)
+  if var in ['cltcalipso','cllcalipso','clmcalipso','clhcalipso','clcalipso','cllcalipsoice','clmcalipsoice','clhcalipsoice','cltcalipsoice','cllcalipsoliq','clmcalipsoliq','clhcalipsoliq','cltcalipsoliq','cllcalipsoun','clmcalipsoun','clhcalipsoun','cltcalipsoun','clcalipso','lidarBetaMol532','clcalipsoice','clcalipsoliq','clcalipsoun','clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun','parasolRefl','cltlidarradar','clcalipso2','cltisccp','pctisccp','tauisccp','albisccp','meantbisccp','meantbclrisccp','boxtauisccp','boxptopisccp','cltmodis','clwmodis','climodis','clhmodis','clmmodis','cllmodis','tautmodis','tauwmodis','tauimodis','tautlogmodis','tauwlogmodis','tauilogmodis','reffclwmodis','reffclimodis','pctmodis','lwpmodis','iwpmodis','fracout', 'atb532', 'dbze94','cfadDbze94','cfadLidarsr532','clisccp', 'clmodis','clMISR']:
+    data = MV2.where(data < -0.5e20, 1.e20,data)
+    data = MV2.masked_values(data,1.e20)
+    data.missing_value = 1.e20
+  data.setAxis(0,time)
+  if data.shape == (nt,nlev):
+    data.setAxis(1,levels)
+  if data.shape == (nt,nlev+1):
+    data.setAxis(1,levels0)
+  if var in ['clcalipso','clcalipso2','clcalipsoice','clcalipsoliq','clcalipsoun'] and data.shape == (nt,40):
+    data.setAxis(1,alt40)
+  if var in ['clcalipsotmp','clcalipsotmpice','clcalipsotmpliq','clcalipsotmpun'] and data.shape == (nt,40):
+    data.setAxis(1,temp)
+  if var in ['parasolRefl'] and data.shape == (nt,5):
+    data.setAxis(1,sza5)
+  if var in ['boxtauisccp','boxptopisccp'] and data.shape == (nt,ncol):
+    data.setAxis(1,column)
+
+  if var in ['fracout', 'atb532', 'dbze94']:
+    data.setAxis(1,column)
+    data.setAxis(2,levels)
+  if var in ['cfadDbze94']:
+    data.setAxis(1,dbze)
+    data.setAxis(2,alt40)
+  if var in ['cfadLidarsr532']:
+    data.setAxis(1,sratio)
+    data.setAxis(2,alt40)
+  if var in ['clisccp', 'clmodis']:
+    data.setAxis(1,tau)
+    data.setAxis(2,plev7)
+  if var in ['clMISR']:
+    data.setAxis(1,tau)
+    data.setAxis(2,cth16)
+
+
+  data.id = var
+  if names.has_key(var):
+    data.long_name = names[var]
+    data.units = varunits[var]
+
+#  if var == 'ZFT':
+#    for ilev in range(0,nlev):
+#      data[:,ilev] = data[:,ilev]*(100000./levels[ilev])**(2./7.)
+#    data.id = 'dthdt_ls'
+#    data.long_name = 'Potential temperature tendency from large-scale forcings'
+
+  g.write(data)
+
+g.close()
+f.close()
diff --git a/UTIL/python/lfa.so b/UTIL/python/lfa.so
index cf2615f..fa60fc2 100755
Binary files a/UTIL/python/lfa.so and b/UTIL/python/lfa.so differ
diff --git a/UTIL/python/lfa/makelib.sh b/UTIL/python/lfa/makelib.sh
index 245f06e..6ab2673 100755
--- a/UTIL/python/lfa/makelib.sh
+++ b/UTIL/python/lfa/makelib.sh
@@ -1,5 +1,7 @@
 #!/bin/bash
 
+source activate myuvcdat
+
 DIR0=`pwd`
 
 for ff in cllang caracteres_lfa lfa
@@ -11,7 +13,7 @@ done
 
 gfortran -L$DIR0 -llfa -I$DIR0 -fconvert=big-endian -cpp  -c -fPIC -o famusc.o famusc.f90
 
-/opt/cdat/bin/f2py -I/opt/cdat/include -lgfortran -c famusc.pyf famusc.o liblfa.a
+f2py -lgfortran -c famusc.pyf famusc.o liblfa.a
 
 rm -f *.o *.mod *.a
 
@@ -20,3 +22,5 @@ mv lfa.so ../
 # Test
 
 #python tmp.py
+
+source deactivate myuvcdat
diff --git a/UTIL/python/lfa/makelib.sh.cnrm b/UTIL/python/lfa/makelib.sh.cnrm
deleted file mode 100644
index f08dba5..0000000
--- a/UTIL/python/lfa/makelib.sh.cnrm
+++ /dev/null
@@ -1,18 +0,0 @@
-
-
-#/opt/cdat/bin/f2py -m lfa -h famusc.pyf famusc.f90 (comment lfaread* subroutines)
-gfortran -I./ -fconvert=big-endian -cpp  -c -fPIC cllang.f90
-gfortran -I./ -fconvert=big-endian -cpp  -c -fPIC caracteres_lfa.f90
-gfortran -I./ -fconvert=big-endian -cpp  -c -fPIC lfa.f90
-ar r liblfa.a *.o
-gfortran -L./ -llfa -I./ -fconvert=big-endian -cpp  -c -fPIC -o famusc.o famusc.f90
-#f2py -L./ -llfa -lm -lgfortran --f77flags='-L./ -llfa -I./ -fPIC -fconvert=big-endian -cpp' --f90flags='-L./ -llfa -I./ -fPIC -fconvert=big-endian -cpp' --fcompiler=gnu95 -c famusc.pyf famusc.o
-/opt/cdat/bin/f2py -I/opt/cdat/include -L./ -llfa -lm -lgfortran --f77flags='-L./ -llfa -I./ -fPIC -fconvert=big-endian -cpp' --f90flags='-L./ -llfa -I./ -fPIC -fconvert=big-endian -cpp' --fcompiler=gnu95 -c famusc.pyf famusc.o
-
-##Ne fonctionne pas...
-#pgf90 -I./ -Mpreprocess -Mextend -Kieee -byteswapio info=inform-Dr4pre2 -c -fPIC cllang.f90
-#pgf90 -I./ -Mpreprocess -Mextend -Kieee -byteswapio info=inform-Dr4pre2 -c -fPIC caracteres_lfa.f90
-#pgf90 -I./ -Mpreprocess -Mextend -Kieee -byteswapio info=inform-Dr4pre2 -c -fPIC lfa.f90
-#ar r liblfa.a *.o
-#pgf90 -L./ -llfa -I./ -Mpreprocess -Mextend -Kieee -byteswapio info=inform-Dr4pre2 -c -fPIC -o famusc.o famusc.f90
-#/opt/cdat/bin/f2py -L./ -llfa --f77flags='-L./ -llfa -I./ -Mpreprocess -Mextend -Kieee -byteswapio info=inform-Dr4pre2 -fPIC' --f90flags='-L./ -llfa -I./ -Mpreprocess -Mextend -Kieee -byteswapio info=inform-Dr4pre2 -fPIC' --fcompiler=pg -c famusc.pyf famusc.o
diff --git a/install_macRR.sh b/install_macRR.sh
new file mode 100755
index 0000000..85ff2d0
--- /dev/null
+++ b/install_macRR.sh
@@ -0,0 +1,139 @@
+#!/bin/sh
+
+set -evx
+
+#####################################################
+# User specific
+
+# Directory where EMS is installed
+REP_EMS=$HOME/Tools/EMS_test
+
+# Directory where MUSC will be run
+REP_MUSC=$HOME/MUSC_test
+
+# Environment file to use
+PROFILE=.profile
+
+#####################################################
+
+
+
+DIR0=`pwd`
+
+#####################################################
+# Some tests to avoid overwriting
+
+if [ -d $REP_EMS ]; then
+  echo "REP_EMS="$REP_EMS
+  echo "REP_EMS already exists. Please remove it or modify REP_EMS at the top of install_macRR.sh"
+  exit
+fi
+
+if [ -d $REP_MUSC ]; then
+  echo "REP_MUSC="$REP_MUSC
+  echo "REP_MUSC already exists. Please remove it or modify REP_MUSC at the top of install_macRR.sh"
+  exit
+fi
+
+#####################################################
+# Download and install EMS in REP_EMS
+[ -d $REP_EMS ] || mkdir -p $REP_EMS
+cd $REP_EMS
+git clone https://github.com/romainroehrig/EMS.git .
+git checkout macRR
+
+# Modify your .bash_profile to initialize a few environment variables
+cd ~/
+
+# save bash_profile
+cat $PROFILE > $PROFILE.EMS-saved_$(date +"%Y-%m-%d_at_%H-%M-%S")
+
+# Modify it
+sed -i '' "/^export REP_EMS=/ s/$/ #commented on $(date)/" $PROFILE
+sed -i '' "s/^export REP_EMS=/#&/" $PROFILE
+sed -i '' "/^export REP_MUSC=/ s/$/ #commented on $(date)/" $PROFILE
+sed -i '' "s/^export REP_MUSC=/#&/" $PROFILE
+sed -i '' "/^export PYTHONPATH=.:\$REP_EMS/ s/$/ #commented on $(date)/" $PROFILE
+sed -i '' "s/^export PYTHONPATH=.:\$REP_EMS/#&/" $PROFILE
+
+cat << EOF >> $PROFILE
+
+# Modifications for Environment for MUSC simulations (EMS)
+# included on $(date)
+export REP_EMS=$REP_EMS
+export REP_MUSC=$REP_MUSC
+export PYTHONPATH=.:\$REP_EMS/CASES:\$REP_EMS/UTIL/python:\$REP_EMS/UTIL/install/:\$PYTHONPATH
+EOF
+
+. ~/$PROFILE
+
+# Some compilation if you want
+compile="n"
+
+if [ $compile == "y" ]; then
+
+  # lfa python library
+  cd $REP_EMS/UTIL/python/lfa
+  ./makelib.sh
+
+  # ascii2lfa binary
+  cd $REP_EMS/UTIL/Tools/ASCII2FA/src
+  #cp /Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/lib/libxrd.local.a libxrd.a
+  #cp /Users/romainroehrig/rootpack/arp603_export.01.MPIGNU640.x/lib/libxla.local.a libxla.a
+  #cp /Users/romainroehrig/libraries/auxlibs/GNU/auxlibs/lib/libgribex.a libgribex.a
+  #cp /Users/romainroehrig/libraries/auxlibs/GNU/auxlibs/lib/libmpidummy.a libmpidummy.a
+  make all
+  make clean
+
+  # LFA tools
+  cd $REP_EMS//UTIL/Tools/LFA
+  ./install
+
+  # a few python libraries
+  source activate myuvcdat
+
+  cd $REP_EMS/UTIL/Init_Forc/ARPCLIMAT
+  f2py -c interpvertp.F90 -m interpvertp
+  cd $REP_EMS/UTIL/post_DEPHY
+  f2py -c convert2p.F90 -m convert2p
+  f2py -c convert2z.F90 -m convert2z
+
+  source deactivate myuvcdat
+
+fi
+
+#####################################################
+# Prepare what is needed to run MUSC simulations in REP_MUSC
+[ -d $REP_MUSC ] || mkdir -p $REP_MUSC
+cd $REP_MUSC
+cp -r $REP_EMS/Examples/* .
+ln -s $REP_EMS/main/install_ATM_cases.py install_ATM_cases.py
+ln -s $REP_EMS/main/install_SFX_cases.py install_SFX_cases.py
+ln -s $REP_EMS/main/run_MUSC_cases.py run_MUSC_cases.py
+
+for ff in convertLFA2nc.py lfa2nc.py convert2p.py convert2z.py 
+do
+
+  ln -s $REP_EMS/UTIL/post/$ff $REP_MUSC/post/$ff
+
+done
+
+#####################################################
+# Some Testing
+cd $REP_MUSC
+
+source activate myuvcdat
+
+./install_ATM_cases.py AYOTTE 24SC
+[ -f $REP_MUSC/ATM/ARPCLIMAT/AYOTTE/24SC/initfile_L91 ] || echo "PROBLEM with install_ATM_cases.py"
+
+./install_SFX_cases.py config/config_arp631_CMIP6.py AYOTTE 24SC
+[ -f $REP_MUSC/SURFEX/arp631/CMIP6/AYOTTE/24SC/PGD.lfi ] || echo "PROBLEM with install_SFX_cases.py: PGD"
+[ -f $REP_MUSC/SURFEX/arp631/CMIP6/AYOTTE/24SC/PREP.lfi ] || echo "PROBLEM with install_SFX_cases.py: PREP"
+
+./run_MUSC_cases.py config/config_arp631_CMIP6.py AYOTTE 24SC
+[ -f $REP_MUSC/simulations/arp631/CMIP6/L91_300s/AYOTTE/24SC/Output/netcdf/Out_klevel.nc ] || echo "PROBLEM with run_MUSC_cases.py"
+
+#####################################################
+# Back in directory where installation was launched
+cd $DIR0
diff --git a/main/install_ATM_cases.py b/main/install_ATM_cases.py
index f315997..1d4a45e 100755
--- a/main/install_ATM_cases.py
+++ b/main/install_ATM_cases.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env cdat
+#!/usr/bin/env python
 # -*- coding:UTF-8 -*-
 
 #
diff --git a/main/install_SFX_cases.py b/main/install_SFX_cases.py
index 86cc76b..e145372 100755
--- a/main/install_SFX_cases.py
+++ b/main/install_SFX_cases.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env cdat
+#!/usr/bin/env python
 # -*- coding:UTF-8 -*-
 
 #
diff --git a/main/run_MUSC_cases.py b/main/run_MUSC_cases.py
index 594bf8f..5e75635 100755
--- a/main/run_MUSC_cases.py
+++ b/main/run_MUSC_cases.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env cdat
+#!/usr/bin/env python
 # -*- coding:UTF-8 -*-
 
 #
