diff --git a/CASES/CINDY-DYNAMO/RevelleARM1/CINDY-DYNAMO_Revelle-ARM-CSU_driver_RR_extended.nc b/CASES/CINDY-DYNAMO/RevelleARM1/CINDY-DYNAMO_Revelle-ARM-CSU_driver_RR_extended.nc
index ed62cdc..8861bd4 100644
Binary files a/CASES/CINDY-DYNAMO/RevelleARM1/CINDY-DYNAMO_Revelle-ARM-CSU_driver_RR_extended.nc and b/CASES/CINDY-DYNAMO/RevelleARM1/CINDY-DYNAMO_Revelle-ARM-CSU_driver_RR_extended.nc differ
diff --git a/CASES/CINDY-DYNAMO/RevelleARM1/extend_CSU.py b/CASES/CINDY-DYNAMO/RevelleARM1/extend_CSU.py
index bbf1360..527c59d 100644
--- a/CASES/CINDY-DYNAMO/RevelleARM1/extend_CSU.py
+++ b/CASES/CINDY-DYNAMO/RevelleARM1/extend_CSU.py
@@ -21,7 +21,7 @@ levmax = 0.
 f = cdms2.open('CINDY-DYNAMO_Revelle-ARM-CSU_driver_RR.nc')
 variables = f.listvariables()
 
-f1 = cdms2.open('thermo_ERAI_6hourly.nc')
+f1 = cdms2.open('/home/roehrig/Utilitaires/Romain/MUSC/current/DATA/CINDY-DYNAMO/RevelleARM1/thermo_ERAI_6hourly.nc')
 ta = f1('t', latitude = (latmin,latmax), longitude = (lonmin,lonmax), level = (levmin,levmax))
 ta = MV2.average(ta,axis=3)
 ta = MV2.average(ta,axis=2)
@@ -35,7 +35,7 @@ hus = MV2.average(hus,axis=2)
 
 
 
-fw = cdms2.open('wind_ERAI_6hourly.nc')
+fw = cdms2.open('/home/roehrig/Utilitaires/Romain/MUSC/current/DATA/CINDY-DYNAMO/RevelleARM1/wind_ERAI_6hourly.nc')
 ua = fw('u', latitude = (latmin,latmax), longitude = (lonmin,lonmax), level = (levmin,levmax))
 ua = MV2.average(ua,axis=3)
 ua = MV2.average(ua,axis=2)
@@ -157,7 +157,7 @@ g.p_nudging_q = 10000
 
 
 g.zorog = 0.
-g.s0 = 0.1
+g.z0 = 0.1
 g.surfaceType = 'ocean'
 g.surfaceForcing = 'ts'
 
diff --git a/CASES/EMS_cases.py b/CASES/EMS_cases.py
index e145269..32bfa9e 100644
--- a/CASES/EMS_cases.py
+++ b/CASES/EMS_cases.py
@@ -141,10 +141,15 @@ case = 'CINDY-DYNAMO'
 cases.append(case)
 #subcases[case] = ['NSA3a','NSA3aflux','SSA3a']
 subcases[case] = ['NSA3a']
+subcases[case] = ['Revelle-ARM-CSU-13Nov']
+subcases[case] = ['Revelle-PE-13Nov']
 data_input[case] = {}
 data_input[case]['NSA3a'] = rep0 + '/CINDY-DYNAMO/NSA3a/cindy-dynamo-NSA3a_driver_RR.nc'
 data_input[case]['NSA3aflux'] = rep0 + '/CINDY-DYNAMO/NSA3a/cindy-dynamo-NSA3aflux_driver_RR.nc'
 data_input[case]['SSA3a'] = rep0 + '/CINDY-DYNAMO/SSA3a/cindy-dynamo-SSA3a_driver_RR.nc'
+data_input[case]['Revelle-ARM-CSU-leg3'] = rep0 + '/CINDY-DYNAMO/RevelleARM1/CINDY-DYNAMO_Revelle-ARM-CSU-leg3_driver_RR_extended.nc'
+data_input[case]['Revelle-ARM-CSU-13Nov'] = rep0 + '/CINDY-DYNAMO/RevelleARM1/CINDY-DYNAMO_Revelle-ARM-CSU-13Nov_driver_RR_extended.nc'
+data_input[case]['Revelle-PE-13Nov'] = rep0 + '/CINDY-DYNAMO/RevellePE/CINDY-DYNAMO_Revelle-PE-13Nov_driver_RR.nc'
 
 # Derbyshire cases
 case = 'Derbyshire'
diff --git a/UTIL/Init_Forc/ARPCLIMAT/prepare_forcing.py b/UTIL/Init_Forc/ARPCLIMAT/prepare_forcing.py
index fc14190..b2dfea7 100644
--- a/UTIL/Init_Forc/ARPCLIMAT/prepare_forcing.py
+++ b/UTIL/Init_Forc/ARPCLIMAT/prepare_forcing.py
@@ -46,6 +46,8 @@ for att in f.listglobal():
 
 time0 = f.getAxis('time')
 
+nt = time0.shape[0]
+
 variables3D = []
 
 if attributes['tadv'] == 1:
@@ -135,7 +137,6 @@ names['omega'] = 'Omega'
 names['temp'] = 'T'
 names['qv'] = 'q'
 
-#nt = 736
 nlev = config.nlev
 
 lev = MV2.array(range(0,nlev),typecode=MV2.float)
diff --git a/UTIL/Init_Forc/ARPCLIMAT/prepare_nam1D.py b/UTIL/Init_Forc/ARPCLIMAT/prepare_nam1D.py
index f866e9b..f7d3204 100644
--- a/UTIL/Init_Forc/ARPCLIMAT/prepare_nam1D.py
+++ b/UTIL/Init_Forc/ARPCLIMAT/prepare_nam1D.py
@@ -161,7 +161,12 @@ except:
 #time = f('w').getTime()	
 #else:
 #  time = data_in['w'].getTime()
-nt = time.shape[0]
+try:
+  nt = time.shape[0]
+except:
+  time = data_in['temp'].getTime()
+  nt = time.shape[0]
+
 lev_in = data_in['pressure'].getLevel()
 nlev_in = lev_in.shape[0]
 
diff --git a/UTIL/post_DEPHY/convertp_to_3hourly.py b/UTIL/post_DEPHY/convertp_to_3hourly.py
index 40a20c4..8fe3d95 100644
--- a/UTIL/post_DEPHY/convertp_to_3hourly.py
+++ b/UTIL/post_DEPHY/convertp_to_3hourly.py
@@ -11,12 +11,18 @@ rep0 = './'
 
 nt = 100*24/3
 
-unitsTime = 'hours since 2011-10-01 0:0:0.0'
+f = cdms2.open(rep0 + '/netcdf/Out_plevel.nc')
+tmp = f.getAxis('time')
+dt = tmp[1]-tmp[0]
+t0 = cdtime.reltime(tmp[0]-dt/2.,tmp.units)
+
+unitsTime = tmp.units.replace('seconds','hours') #'hours since 2011-10-01 0:0:0.0'
 
 time0 = cdms2.createAxis(MV2.array(range(0,nt),typecode=MV2.float32))
 for it in range(0,nt):
-  tt = cdtime.comptime(2011,10,1,0,0,0)
-  tt = tt.add(3.*it+1.5,cdtime.Hour)
+#  tt = cdtime.comptime(2011,10,1,0,0,0)
+#  tt = tt.add(3.*it+1.5,cdtime.Hour)
+  tt = t0.add(3.*it+1.5,cdtime.Hour)
   time0[it] = tt.torel(unitsTime).value
 
 time0.designateTime()
